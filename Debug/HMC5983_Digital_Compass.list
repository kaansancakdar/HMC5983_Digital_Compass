
HMC5983_Digital_Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08007108  08007108  00008108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00008550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800755c  0800755c  0000855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007560  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001dc  0800773c  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800773c  000094a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a893  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193a  00000000  00000000  00013a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  000153e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  00015cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b0f  00000000  00000000  00016558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b005  00000000  00000000  0002d067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897d4  00000000  00000000  0003806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000c1884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070f0 	.word	0x080070f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080070f0 	.word	0x080070f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Set_Register_A>:

#include "HMC5983.h"
#include "main.h"

uint8_t Set_Register_A(uint8_t Set_Temperature_Sensor, uint8_t Set_Sample_Average, uint8_t Set_OutputRate, uint8_t Set_MeasurementMode)
{
 8000f48:	b490      	push	{r4, r7}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	717b      	strb	r3, [r7, #5]
 8000f62:	4613      	mov	r3, r2
 8000f64:	713b      	strb	r3, [r7, #4]
	uint8_t data;
	data = (Set_Temperature_Sensor << 7) | (Set_Sample_Average << 5) | (Set_OutputRate << 2) | (Set_MeasurementMode);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	015b      	lsls	r3, r3, #5
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]
	return data;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc90      	pop	{r4, r7}
 8000f94:	4770      	bx	lr

08000f96 <Set_Register_B>:

uint8_t Set_Register_B(uint8_t Set_Gain)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	data = (Set_Gain << 5);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	73fb      	strb	r3, [r7, #15]
	return data;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <Set_Mode_Register>:

uint8_t Set_Mode_Register(uint8_t Set_I2C_HighSpeed, uint8_t Set_Lowest_Power_Mod, uint8_t SPI_Mode_Selection, uint8_t Operating_Mode)
{
 8000fb4:	b490      	push	{r4, r7}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
	uint8_t data;
	data = (Set_I2C_HighSpeed << 7) | (Set_Lowest_Power_Mod << 5) | (SPI_Mode_Selection << 2) | (Operating_Mode);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	01db      	lsls	r3, r3, #7
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25a      	sxtb	r2, r3
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	73fb      	strb	r3, [r7, #15]
	return data;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc90      	pop	{r4, r7}
 8001000:	4770      	bx	lr
	...

08001004 <HMC5983_Init>:

uint8_t HMC5983_Init(SPI_HandleTypeDef *spi, uint8_t Register_A_Address, uint8_t Register_A_Value, uint8_t Register_B_Address, uint8_t Register_B_Value, uint8_t Mode_Register_Address, uint8_t Mode_Register_Value)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	70fb      	strb	r3, [r7, #3]
 8001016:	460b      	mov	r3, r1
 8001018:	70bb      	strb	r3, [r7, #2]
 800101a:	4613      	mov	r3, r2
 800101c:	707b      	strb	r3, [r7, #1]

	uint8_t Init_OK;
	uint8_t Register_A_OK = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
	uint8_t Register_B_OK = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73bb      	strb	r3, [r7, #14]
	uint8_t Register_Mode_OK = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2110      	movs	r1, #16
 800102e:	4861      	ldr	r0, [pc, #388]	@ (80011b4 <HMC5983_Init+0x1b0>)
 8001030:	f001 f95c 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &Register_A_Address, 1, 100);
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	2364      	movs	r3, #100	@ 0x64
 8001038:	2201      	movs	r2, #1
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f001 fe51 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi, &Register_A_Value, 1, 100);
 8001040:	1cb9      	adds	r1, r7, #2
 8001042:	2364      	movs	r3, #100	@ 0x64
 8001044:	2201      	movs	r2, #1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fe4b 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2110      	movs	r1, #16
 8001050:	4858      	ldr	r0, [pc, #352]	@ (80011b4 <HMC5983_Init+0x1b0>)
 8001052:	f001 f94b 	bl	80022ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2110      	movs	r1, #16
 800105a:	4856      	ldr	r0, [pc, #344]	@ (80011b4 <HMC5983_Init+0x1b0>)
 800105c:	f001 f946 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &Register_B_Address, 1, 100);
 8001060:	1c79      	adds	r1, r7, #1
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	2201      	movs	r2, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f001 fe3b 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi, &Register_B_Value, 1, 100);
 800106c:	2364      	movs	r3, #100	@ 0x64
 800106e:	2201      	movs	r2, #1
 8001070:	f107 0118 	add.w	r1, r7, #24
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f001 fe34 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2110      	movs	r1, #16
 800107e:	484d      	ldr	r0, [pc, #308]	@ (80011b4 <HMC5983_Init+0x1b0>)
 8001080:	f001 f934 	bl	80022ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2110      	movs	r1, #16
 8001088:	484a      	ldr	r0, [pc, #296]	@ (80011b4 <HMC5983_Init+0x1b0>)
 800108a:	f001 f92f 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &Mode_Register_Address, 1, 100);
 800108e:	f107 011c 	add.w	r1, r7, #28
 8001092:	2364      	movs	r3, #100	@ 0x64
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 fe23 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi, &Mode_Register_Value, 1, 100);
 800109c:	f107 0120 	add.w	r1, r7, #32
 80010a0:	2364      	movs	r3, #100	@ 0x64
 80010a2:	2201      	movs	r2, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f001 fe1c 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2110      	movs	r1, #16
 80010ae:	4841      	ldr	r0, [pc, #260]	@ (80011b4 <HMC5983_Init+0x1b0>)
 80010b0:	f001 f91c 	bl	80022ec <HAL_GPIO_WritePin>

	uint8_t data = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	72fb      	strb	r3, [r7, #11]
	uint8_t ReadReg = 0x80; //Read Register A
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	483c      	ldr	r0, [pc, #240]	@ (80011b4 <HMC5983_Init+0x1b0>)
 80010c2:	f001 f913 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &ReadReg, 1, 100);
 80010c6:	f107 010a 	add.w	r1, r7, #10
 80010ca:	2364      	movs	r3, #100	@ 0x64
 80010cc:	2201      	movs	r2, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f001 fe07 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &data, 1, 100);
 80010d4:	f107 010b 	add.w	r1, r7, #11
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	2201      	movs	r2, #1
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 ff44 	bl	8002f6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2110      	movs	r1, #16
 80010e6:	4833      	ldr	r0, [pc, #204]	@ (80011b4 <HMC5983_Init+0x1b0>)
 80010e8:	f001 f900 	bl	80022ec <HAL_GPIO_WritePin>

	if (data == Register_A_Value)
 80010ec:	7afa      	ldrb	r2, [r7, #11]
 80010ee:	78bb      	ldrb	r3, [r7, #2]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d102      	bne.n	80010fa <HMC5983_Init+0xf6>
	{
		Register_A_OK = 0x01;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <HMC5983_Init+0xfa>
	}
	else
	{
		Register_A_OK = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
	}

	ReadReg = 0x81; //Read Register B
 80010fe:	2381      	movs	r3, #129	@ 0x81
 8001100:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	482b      	ldr	r0, [pc, #172]	@ (80011b4 <HMC5983_Init+0x1b0>)
 8001108:	f001 f8f0 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &ReadReg, 1, 100);
 800110c:	f107 010a 	add.w	r1, r7, #10
 8001110:	2364      	movs	r3, #100	@ 0x64
 8001112:	2201      	movs	r2, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 fde4 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &data, 1, 100);
 800111a:	f107 010b 	add.w	r1, r7, #11
 800111e:	2364      	movs	r3, #100	@ 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 ff21 	bl	8002f6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2110      	movs	r1, #16
 800112c:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <HMC5983_Init+0x1b0>)
 800112e:	f001 f8dd 	bl	80022ec <HAL_GPIO_WritePin>

	if (data == Register_B_Value)
 8001132:	7afa      	ldrb	r2, [r7, #11]
 8001134:	7e3b      	ldrb	r3, [r7, #24]
 8001136:	429a      	cmp	r2, r3
 8001138:	d102      	bne.n	8001140 <HMC5983_Init+0x13c>
	{
		Register_B_OK = 0x01;
 800113a:	2301      	movs	r3, #1
 800113c:	73bb      	strb	r3, [r7, #14]
 800113e:	e001      	b.n	8001144 <HMC5983_Init+0x140>
	}
	else
	{
		Register_B_OK = 0x00;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
	}

	ReadReg = 0x82; //Read Mode Register
 8001144:	2382      	movs	r3, #130	@ 0x82
 8001146:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	4819      	ldr	r0, [pc, #100]	@ (80011b4 <HMC5983_Init+0x1b0>)
 800114e:	f001 f8cd 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &ReadReg, 1, 100);
 8001152:	f107 010a 	add.w	r1, r7, #10
 8001156:	2364      	movs	r3, #100	@ 0x64
 8001158:	2201      	movs	r2, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f001 fdc1 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &data, 1, 100);
 8001160:	f107 010b 	add.w	r1, r7, #11
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	2201      	movs	r2, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fefe 	bl	8002f6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2110      	movs	r1, #16
 8001172:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <HMC5983_Init+0x1b0>)
 8001174:	f001 f8ba 	bl	80022ec <HAL_GPIO_WritePin>

	if (data == Mode_Register_Value)
 8001178:	7afa      	ldrb	r2, [r7, #11]
 800117a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117e:	429a      	cmp	r2, r3
 8001180:	d102      	bne.n	8001188 <HMC5983_Init+0x184>
	{
		Register_Mode_OK = 0x01;
 8001182:	2301      	movs	r3, #1
 8001184:	737b      	strb	r3, [r7, #13]
 8001186:	e001      	b.n	800118c <HMC5983_Init+0x188>
	}
	else
	{
		Register_Mode_OK = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	737b      	strb	r3, [r7, #13]
	}

	Init_OK = (Register_A_OK << 2) | (Register_B_OK << 1) || Register_Mode_OK;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	009a      	lsls	r2, r3, #2
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4313      	orrs	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HMC5983_Init+0x19c>
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HMC5983_Init+0x1a0>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HMC5983_Init+0x1a2>
 80011a4:	2300      	movs	r3, #0
 80011a6:	733b      	strb	r3, [r7, #12]
	return Init_OK;
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000

080011b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b096      	sub	sp, #88	@ 0x58
 80011bc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011be:	f000 fd95 	bl	8001cec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011c2:	f000 fa97 	bl	80016f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011c6:	f000 fb5f 	bl	8001888 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80011ca:	f000 fb33 	bl	8001834 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 80011ce:	f000 fafb 	bl	80017c8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Register_A.Set_Temperature_Sensor = Set_Temperature_Sensor_Off;
 80011d2:	4bb3      	ldr	r3, [pc, #716]	@ (80014a0 <main+0x2e8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	Register_A.Set_Sample_Average = Sample_Avarage_8
 80011d8:	4bb1      	ldr	r3, [pc, #708]	@ (80014a0 <main+0x2e8>)
 80011da:	2211      	movs	r2, #17
 80011dc:	705a      	strb	r2, [r3, #1]
	;
	Register_A.Set_OutputRate = OutpuRate_15;
 80011de:	4bb0      	ldr	r3, [pc, #704]	@ (80014a0 <main+0x2e8>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	709a      	strb	r2, [r3, #2]
	Register_A.Set_Measurement_Mode = Measurement_Mode_Normal;
 80011e4:	4bae      	ldr	r3, [pc, #696]	@ (80014a0 <main+0x2e8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	70da      	strb	r2, [r3, #3]

	Register_B.Set_Gain = Set_Gain_4P7;
 80011ea:	4bae      	ldr	r3, [pc, #696]	@ (80014a4 <main+0x2ec>)
 80011ec:	2205      	movs	r2, #5
 80011ee:	701a      	strb	r2, [r3, #0]
	Register_B.Set_Scale = Scale_4P7;
 80011f0:	4bac      	ldr	r3, [pc, #688]	@ (80014a4 <main+0x2ec>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	705a      	strb	r2, [r3, #1]

	Register_Mode.Set_I2C_HighSpeed = Set_I2C_HighSpeed_Off;
 80011f6:	4bac      	ldr	r3, [pc, #688]	@ (80014a8 <main+0x2f0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	Register_Mode.Set_Lowest_Power_Mod = Set_Lowest_Power_Mod_Off;
 80011fc:	4baa      	ldr	r3, [pc, #680]	@ (80014a8 <main+0x2f0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	Register_Mode.Set_SPI_Mode_Selection = SPI_Mode_Selection_4Wire;
 8001202:	4ba9      	ldr	r3, [pc, #676]	@ (80014a8 <main+0x2f0>)
 8001204:	2200      	movs	r2, #0
 8001206:	709a      	strb	r2, [r3, #2]
	Register_Mode.Set_Operating_Mode = Operating_Mode_Continuous_Measurement;
 8001208:	4ba7      	ldr	r3, [pc, #668]	@ (80014a8 <main+0x2f0>)
 800120a:	2200      	movs	r2, #0
 800120c:	70da      	strb	r2, [r3, #3]

	Register_A_Value = Set_Register_A(Register_A.Set_Temperature_Sensor, Register_A.Set_Sample_Average, Register_A.Set_OutputRate, Register_A.Set_Measurement_Mode);
 800120e:	4ba4      	ldr	r3, [pc, #656]	@ (80014a0 <main+0x2e8>)
 8001210:	7818      	ldrb	r0, [r3, #0]
 8001212:	4ba3      	ldr	r3, [pc, #652]	@ (80014a0 <main+0x2e8>)
 8001214:	7859      	ldrb	r1, [r3, #1]
 8001216:	4ba2      	ldr	r3, [pc, #648]	@ (80014a0 <main+0x2e8>)
 8001218:	789a      	ldrb	r2, [r3, #2]
 800121a:	4ba1      	ldr	r3, [pc, #644]	@ (80014a0 <main+0x2e8>)
 800121c:	78db      	ldrb	r3, [r3, #3]
 800121e:	f7ff fe93 	bl	8000f48 <Set_Register_A>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4ba1      	ldr	r3, [pc, #644]	@ (80014ac <main+0x2f4>)
 8001228:	701a      	strb	r2, [r3, #0]
	Register_B_Value = Set_Register_B(Register_B.Set_Gain);
 800122a:	4b9e      	ldr	r3, [pc, #632]	@ (80014a4 <main+0x2ec>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feb1 	bl	8000f96 <Set_Register_B>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b9d      	ldr	r3, [pc, #628]	@ (80014b0 <main+0x2f8>)
 800123a:	701a      	strb	r2, [r3, #0]
	Register_Mode_Value = Set_Mode_Register(Register_Mode.Set_I2C_HighSpeed, Register_Mode.Set_Lowest_Power_Mod, Register_Mode.Set_SPI_Mode_Selection, Register_Mode.Set_Operating_Mode);
 800123c:	4b9a      	ldr	r3, [pc, #616]	@ (80014a8 <main+0x2f0>)
 800123e:	7818      	ldrb	r0, [r3, #0]
 8001240:	4b99      	ldr	r3, [pc, #612]	@ (80014a8 <main+0x2f0>)
 8001242:	7859      	ldrb	r1, [r3, #1]
 8001244:	4b98      	ldr	r3, [pc, #608]	@ (80014a8 <main+0x2f0>)
 8001246:	789a      	ldrb	r2, [r3, #2]
 8001248:	4b97      	ldr	r3, [pc, #604]	@ (80014a8 <main+0x2f0>)
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	f7ff feb2 	bl	8000fb4 <Set_Mode_Register>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b97      	ldr	r3, [pc, #604]	@ (80014b4 <main+0x2fc>)
 8001256:	701a      	strb	r2, [r3, #0]

	HMC5983_Init_OK = HMC5983_Init(&hspi1, HMC5983_CONF_A, Register_A_Value, HMC5983_CONF_B, Register_B_Value, HMC5983_MODE, Register_Mode_Value);
 8001258:	4b94      	ldr	r3, [pc, #592]	@ (80014ac <main+0x2f4>)
 800125a:	7819      	ldrb	r1, [r3, #0]
 800125c:	4b94      	ldr	r3, [pc, #592]	@ (80014b0 <main+0x2f8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4a94      	ldr	r2, [pc, #592]	@ (80014b4 <main+0x2fc>)
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	9202      	str	r2, [sp, #8]
 8001266:	2202      	movs	r2, #2
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	460a      	mov	r2, r1
 8001270:	2100      	movs	r1, #0
 8001272:	4891      	ldr	r0, [pc, #580]	@ (80014b8 <main+0x300>)
 8001274:	f7ff fec6 	bl	8001004 <HMC5983_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b8f      	ldr	r3, [pc, #572]	@ (80014bc <main+0x304>)
 800127e:	701a      	strb	r2, [r3, #0]

	//Hard Iron Calibration Settings
	const float hard_iron[3] = { 7.06, -5.32, 4.93 };
 8001280:	4a8f      	ldr	r2, [pc, #572]	@ (80014c0 <main+0x308>)
 8001282:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001286:	ca07      	ldmia	r2, {r0, r1, r2}
 8001288:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Soft Iron Calibration Settings
	const float soft_iron[3][3] = { { 0.974, 0.016, 0.026 }, { 0.016, 0.988, -0.009 }, { 0.026, -0.009, 1.040 } };
 800128c:	4b8d      	ldr	r3, [pc, #564]	@ (80014c4 <main+0x30c>)
 800128e:	f107 0410 	add.w	r4, r7, #16
 8001292:	461d      	mov	r5, r3
 8001294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	6023      	str	r3, [r4, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		static float hi_cal[3];
		float mag_data[] = { uT_X, uT_Y, uT_Z };
 80012a0:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <main+0x310>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <main+0x314>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b88      	ldr	r3, [pc, #544]	@ (80014d0 <main+0x318>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
		/* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2110      	movs	r1, #16
 80012b6:	4887      	ldr	r0, [pc, #540]	@ (80014d4 <main+0x31c>)
 80012b8:	f001 f818 	bl	80022ec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &Read_Data_Register, 1, 100);
 80012bc:	2364      	movs	r3, #100	@ 0x64
 80012be:	2201      	movs	r2, #1
 80012c0:	4985      	ldr	r1, [pc, #532]	@ (80014d8 <main+0x320>)
 80012c2:	487d      	ldr	r0, [pc, #500]	@ (80014b8 <main+0x300>)
 80012c4:	f001 fd0d 	bl	8002ce2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, buffer, 6, 100);
 80012c8:	2364      	movs	r3, #100	@ 0x64
 80012ca:	2206      	movs	r2, #6
 80012cc:	4983      	ldr	r1, [pc, #524]	@ (80014dc <main+0x324>)
 80012ce:	487a      	ldr	r0, [pc, #488]	@ (80014b8 <main+0x300>)
 80012d0:	f001 fe4b 	bl	8002f6a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2110      	movs	r1, #16
 80012d8:	487e      	ldr	r0, [pc, #504]	@ (80014d4 <main+0x31c>)
 80012da:	f001 f807 	bl	80022ec <HAL_GPIO_WritePin>
		Raw_X = ((buffer[0] << 8) | buffer[1]); //X
 80012de:	4b7f      	ldr	r3, [pc, #508]	@ (80014dc <main+0x324>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <main+0x324>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <main+0x328>)
 80012f2:	801a      	strh	r2, [r3, #0]
		Raw_Z = ((buffer[2] << 8) | buffer[3]); //Z
 80012f4:	4b79      	ldr	r3, [pc, #484]	@ (80014dc <main+0x324>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b77      	ldr	r3, [pc, #476]	@ (80014dc <main+0x324>)
 80012fe:	78db      	ldrb	r3, [r3, #3]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b77      	ldr	r3, [pc, #476]	@ (80014e4 <main+0x32c>)
 8001308:	801a      	strh	r2, [r3, #0]
		Raw_Y = ((buffer[4] << 8) | buffer[5]); //Y
 800130a:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <main+0x324>)
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b72      	ldr	r3, [pc, #456]	@ (80014dc <main+0x324>)
 8001314:	795b      	ldrb	r3, [r3, #5]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b72      	ldr	r3, [pc, #456]	@ (80014e8 <main+0x330>)
 800131e:	801a      	strh	r2, [r3, #0]

		mG_X = Raw_X * Register_B.Set_Scale; //mGauss Value
 8001320:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <main+0x328>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	461a      	mov	r2, r3
 8001328:	4b5e      	ldr	r3, [pc, #376]	@ (80014a4 <main+0x2ec>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	4b6c      	ldr	r3, [pc, #432]	@ (80014ec <main+0x334>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
		mG_Y = Raw_Y * Register_B.Set_Scale; //mGauss Value
 800133e:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <main+0x330>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	461a      	mov	r2, r3
 8001346:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <main+0x2ec>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	4b66      	ldr	r3, [pc, #408]	@ (80014f0 <main+0x338>)
 8001358:	edc3 7a00 	vstr	s15, [r3]
		mG_Z = Raw_Z * Register_B.Set_Scale; //mGauss Value
 800135c:	4b61      	ldr	r3, [pc, #388]	@ (80014e4 <main+0x32c>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	461a      	mov	r2, r3
 8001364:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <main+0x2ec>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	4b5f      	ldr	r3, [pc, #380]	@ (80014f4 <main+0x33c>)
 8001376:	edc3 7a00 	vstr	s15, [r3]

		//For motionCal Program
		raw_mG_X = mG_X; //int type of mG value
 800137a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ec <main+0x334>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <main+0x340>)
 800138c:	801a      	strh	r2, [r3, #0]
		raw_mG_Y = mG_Y; //int type of mG value
 800138e:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <main+0x338>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001398:	ee17 3a90 	vmov	r3, s15
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b57      	ldr	r3, [pc, #348]	@ (80014fc <main+0x344>)
 80013a0:	801a      	strh	r2, [r3, #0]
		raw_mG_Z = mG_Z; //int type of mG value
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <main+0x33c>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <main+0x348>)
 80013b4:	801a      	strh	r2, [r3, #0]

		uT_X = mG_X / 10.00;
 80013b6:	4b4d      	ldr	r3, [pc, #308]	@ (80014ec <main+0x334>)
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c4:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <main+0x310>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]
		uT_Y = mG_Y / 10.00;
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <main+0x338>)
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <main+0x314>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
		uT_Z = mG_Z / 10.00;
 80013de:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <main+0x33c>)
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ec:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <main+0x318>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]

		sprintf(sendData, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", raw_mG_X, raw_mG_Y, raw_mG_Z);
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <main+0x340>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b40      	ldr	r3, [pc, #256]	@ (80014fc <main+0x344>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	4619      	mov	r1, r3
 8001402:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <main+0x348>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	460b      	mov	r3, r1
 800140c:	493d      	ldr	r1, [pc, #244]	@ (8001504 <main+0x34c>)
 800140e:	483e      	ldr	r0, [pc, #248]	@ (8001508 <main+0x350>)
 8001410:	f003 fad6 	bl	80049c0 <siprintf>
		//sprintf(sendData, "%.2f,%.2f,%.2f\r\n", uT_X, uT_Y, uT_Z);
		HAL_UART_Transmit(&huart1, (uint8_t*) sendData, strlen(sendData), 1000);
 8001414:	483c      	ldr	r0, [pc, #240]	@ (8001508 <main+0x350>)
 8001416:	f7fe ff33 	bl	8000280 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	4939      	ldr	r1, [pc, #228]	@ (8001508 <main+0x350>)
 8001424:	4839      	ldr	r0, [pc, #228]	@ (800150c <main+0x354>)
 8001426:	f002 f9f5 	bl	8003814 <HAL_UART_Transmit>
		heading = atan2(uT_Y, uT_X);
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <main+0x314>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	4604      	mov	r4, r0
 8001436:	460d      	mov	r5, r1
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <main+0x310>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f88b 	bl	8000558 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b11 	vmov	d1, r2, r3
 800144a:	ec45 4b10 	vmov	d0, r4, r5
 800144e:	f005 fbe3 	bl	8006c18 <atan2>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fbad 	bl	8000bb8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <main+0x358>)
 8001462:	6013      	str	r3, [r2, #0]

		if (heading < 0)
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <main+0x358>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d552      	bpl.n	800151a <main+0x362>
		{
			heading += 2 * M_PI;
 8001474:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <main+0x358>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f86d 	bl	8000558 <__aeabi_f2d>
 800147e:	a306      	add	r3, pc, #24	@ (adr r3, 8001498 <main+0x2e0>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe ff0a 	bl	800029c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb92 	bl	8000bb8 <__aeabi_d2f>
 8001494:	e03e      	b.n	8001514 <main+0x35c>
 8001496:	bf00      	nop
 8001498:	54442d18 	.word	0x54442d18
 800149c:	401921fb 	.word	0x401921fb
 80014a0:	200001f8 	.word	0x200001f8
 80014a4:	200001fc 	.word	0x200001fc
 80014a8:	20000200 	.word	0x20000200
 80014ac:	20000204 	.word	0x20000204
 80014b0:	20000205 	.word	0x20000205
 80014b4:	20000206 	.word	0x20000206
 80014b8:	200002a0 	.word	0x200002a0
 80014bc:	20000207 	.word	0x20000207
 80014c0:	08007124 	.word	0x08007124
 80014c4:	08007130 	.word	0x08007130
 80014c8:	20000220 	.word	0x20000220
 80014cc:	20000224 	.word	0x20000224
 80014d0:	20000228 	.word	0x20000228
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000208 	.word	0x20000208
 80014e0:	2000020e 	.word	0x2000020e
 80014e4:	20000212 	.word	0x20000212
 80014e8:	20000210 	.word	0x20000210
 80014ec:	20000214 	.word	0x20000214
 80014f0:	20000218 	.word	0x20000218
 80014f4:	2000021c 	.word	0x2000021c
 80014f8:	2000022c 	.word	0x2000022c
 80014fc:	2000022e 	.word	0x2000022e
 8001500:	20000230 	.word	0x20000230
 8001504:	08007108 	.word	0x08007108
 8001508:	20000234 	.word	0x20000234
 800150c:	200002f8 	.word	0x200002f8
 8001510:	20000298 	.word	0x20000298
 8001514:	4603      	mov	r3, r0
 8001516:	4a72      	ldr	r2, [pc, #456]	@ (80016e0 <main+0x528>)
 8001518:	6013      	str	r3, [r2, #0]
		}
		heading = heading * 180 / M_PI;
 800151a:	4b71      	ldr	r3, [pc, #452]	@ (80016e0 <main+0x528>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80016e4 <main+0x52c>
 8001524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f7ff f814 	bl	8000558 <__aeabi_f2d>
 8001530:	a367      	add	r3, pc, #412	@ (adr r3, 80016d0 <main+0x518>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f991 	bl	800085c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fb39 	bl	8000bb8 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <main+0x528>)
 800154a:	6013      	str	r3, [r2, #0]
//
	  //Apply Hard iron offsets
	  for(int i=0; i<3; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001550:	e018      	b.n	8001584 <main+0x3cc>
	  {
		  hi_cal[i]=mag_data[i]-hard_iron[i];
 8001552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	3348      	adds	r3, #72	@ 0x48
 8001558:	443b      	add	r3, r7
 800155a:	3b44      	subs	r3, #68	@ 0x44
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	3348      	adds	r3, #72	@ 0x48
 8001566:	443b      	add	r3, r7
 8001568:	3b14      	subs	r3, #20
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	4a5d      	ldr	r2, [pc, #372]	@ (80016e8 <main+0x530>)
 8001574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i<3; i++)
 800157e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001580:	3301      	adds	r3, #1
 8001582:	647b      	str	r3, [r7, #68]	@ 0x44
 8001584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001586:	2b02      	cmp	r3, #2
 8001588:	dde3      	ble.n	8001552 <main+0x39a>
	  }
//
//	  //Apply soft iron scaling
	  for(int i=0; i<3;i++)
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	@ 0x40
 800158e:	e03a      	b.n	8001606 <main+0x44e>
	  {
		  mag_data[i]=(soft_iron[i][0]*hi_cal[0])+(soft_iron[i][1]*hi_cal[1])+(soft_iron[i][2]*hi_cal[2]);
 8001590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	3348      	adds	r3, #72	@ 0x48
 800159c:	443b      	add	r3, r7
 800159e:	3b38      	subs	r3, #56	@ 0x38
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b50      	ldr	r3, [pc, #320]	@ (80016e8 <main+0x530>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	3348      	adds	r3, #72	@ 0x48
 80015ba:	443b      	add	r3, r7
 80015bc:	3b34      	subs	r3, #52	@ 0x34
 80015be:	edd3 6a00 	vldr	s13, [r3]
 80015c2:	4b49      	ldr	r3, [pc, #292]	@ (80016e8 <main+0x530>)
 80015c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	3348      	adds	r3, #72	@ 0x48
 80015dc:	443b      	add	r3, r7
 80015de:	3b30      	subs	r3, #48	@ 0x30
 80015e0:	edd3 6a00 	vldr	s13, [r3]
 80015e4:	4b40      	ldr	r3, [pc, #256]	@ (80016e8 <main+0x530>)
 80015e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3348      	adds	r3, #72	@ 0x48
 80015f8:	443b      	add	r3, r7
 80015fa:	3b44      	subs	r3, #68	@ 0x44
 80015fc:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i<3;i++)
 8001600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001602:	3301      	adds	r3, #1
 8001604:	643b      	str	r3, [r7, #64]	@ 0x40
 8001606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001608:	2b02      	cmp	r3, #2
 800160a:	ddc1      	ble.n	8001590 <main+0x3d8>
	  }

	  heading_cal=atan2(mag_data[1],mag_data[0]);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b11 	vmov	d1, r2, r3
 8001628:	ec45 4b10 	vmov	d0, r4, r5
 800162c:	f005 faf4 	bl	8006c18 <atan2>
 8001630:	ec53 2b10 	vmov	r2, r3, d0
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fabe 	bl	8000bb8 <__aeabi_d2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a2b      	ldr	r2, [pc, #172]	@ (80016ec <main+0x534>)
 8001640:	6013      	str	r3, [r2, #0]

	  	  if(heading_cal<0)
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <main+0x534>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d512      	bpl.n	8001678 <main+0x4c0>
	  	  {
	  		heading_cal+=2*M_PI;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <main+0x534>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff7e 	bl	8000558 <__aeabi_f2d>
 800165c:	a31e      	add	r3, pc, #120	@ (adr r3, 80016d8 <main+0x520>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fe1b 	bl	800029c <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff faa3 	bl	8000bb8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <main+0x534>)
 8001676:	6013      	str	r3, [r2, #0]
	  	  }
	  	heading_cal=(heading_cal*180/M_PI)+magnetic_declination;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <main+0x534>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80016e4 <main+0x52c>
 8001682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001686:	ee17 0a90 	vmov	r0, s15
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	a310      	add	r3, pc, #64	@ (adr r3, 80016d0 <main+0x518>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8e2 	bl	800085c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	461d      	mov	r5, r3
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <main+0x538>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff57 	bl	8000558 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fdf3 	bl	800029c <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa7b 	bl	8000bb8 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <main+0x534>)
 80016c6:	6013      	str	r3, [r2, #0]
		HAL_Delay(10);
 80016c8:	200a      	movs	r0, #10
 80016ca:	f000 fb81 	bl	8001dd0 <HAL_Delay>
	{
 80016ce:	e5e7      	b.n	80012a0 <main+0xe8>
 80016d0:	54442d18 	.word	0x54442d18
 80016d4:	400921fb 	.word	0x400921fb
 80016d8:	54442d18 	.word	0x54442d18
 80016dc:	401921fb 	.word	0x401921fb
 80016e0:	20000298 	.word	0x20000298
 80016e4:	43340000 	.word	0x43340000
 80016e8:	20000340 	.word	0x20000340
 80016ec:	2000029c 	.word	0x2000029c
 80016f0:	20000004 	.word	0x20000004

080016f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	@ 0x50
 80016f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	@ 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f003 f9bf 	bl	8004a86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <SystemClock_Config+0xcc>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	4a27      	ldr	r2, [pc, #156]	@ (80017c0 <SystemClock_Config+0xcc>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	@ 0x40
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <SystemClock_Config+0xcc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <SystemClock_Config+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001740:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <SystemClock_Config+0xd0>)
 8001742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <SystemClock_Config+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175c:	2310      	movs	r3, #16
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001760:	2302      	movs	r3, #2
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800176c:	2354      	movs	r3, #84	@ 0x54
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001770:	2302      	movs	r3, #2
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fdcf 	bl	8002320 <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001788:	f000 f8c0 	bl	800190c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800178c:	230f      	movs	r3, #15
 800178e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f831 	bl	8002810 <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80017b4:	f000 f8aa 	bl	800190c <Error_Handler>
	}
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	@ 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_SPI1_Init+0x64>)
 800181a:	f001 f9d9 	bl	8002bd0 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001824:	f000 f872 	bl	800190c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002a0 	.word	0x200002a0
 8001830:	40013000 	.word	0x40013000

08001834 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <MX_USART1_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_USART1_UART_Init+0x4c>)
 800186c:	f001 ff82 	bl	8003774 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001876:	f000 f849 	bl	800190c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002f8 	.word	0x200002f8
 8001884:	40011000 	.word	0x40011000

08001888 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_GPIO_Init+0x7c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HMC5983_CS_GPIO_Port, HMC5983_CS_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2110      	movs	r1, #16
 80018da:	480b      	ldr	r0, [pc, #44]	@ (8001908 <MX_GPIO_Init+0x80>)
 80018dc:	f000 fd06 	bl	80022ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : HMC5983_CS_Pin */
	GPIO_InitStruct.Pin = HMC5983_CS_Pin;
 80018e0:	2310      	movs	r3, #16
 80018e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(HMC5983_CS_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_GPIO_Init+0x80>)
 80018f8:	f000 fb74 	bl	8001fe4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_SPI_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12b      	bne.n	80019e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c2:	23e0      	movs	r3, #224	@ 0xe0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d2:	2305      	movs	r3, #5
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019de:	f000 fb01 	bl	8001fe4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013000 	.word	0x40013000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_UART_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_UART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a64:	2307      	movs	r3, #7
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a70:	f000 fab8 	bl	8001fe4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 f957 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return 1;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_kill>:

int _kill(int pid, int sig)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b00:	f003 f814 	bl	8004b2c <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2216      	movs	r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
  return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_exit>:

void _exit (int status)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffe7 	bl	8001af6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <_exit+0x12>

08001b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
  }

  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e009      	b.n	8001b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf1      	blt.n	8001b78 <_write+0x12>
  }
  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 ff78 	bl	8004b2c <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20010000 	.word	0x20010000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	2000034c 	.word	0x2000034c
 8001c70:	200004a0 	.word	0x200004a0

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c9c:	f7ff ffea 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 ff37 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fa75 	bl	80011b8 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cdc:	08007560 	.word	0x08007560
  ldr r2, =_sbss
 8001ce0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ce4:	200004a0 	.word	0x200004a0

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f931 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fdfa 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f93b 	bl	8001fca <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f911 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000010 	.word	0x20000010
 8001db4:	20000350 	.word	0x20000350

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000350 	.word	0x20000350

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000010 	.word	0x20000010

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	@ 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff47 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff5c 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff8e 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb0 	bl	8001f38 <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e159      	b.n	80022b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8148 	bne.w	80022ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a2 	beq.w	80022ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b57      	ldr	r3, [pc, #348]	@ (80022cc <HAL_GPIO_Init+0x2e8>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a56      	ldr	r2, [pc, #344]	@ (80022cc <HAL_GPIO_Init+0x2e8>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b54      	ldr	r3, [pc, #336]	@ (80022cc <HAL_GPIO_Init+0x2e8>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a49      	ldr	r2, [pc, #292]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x202>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a48      	ldr	r2, [pc, #288]	@ (80022d8 <HAL_GPIO_Init+0x2f4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x1fe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a47      	ldr	r2, [pc, #284]	@ (80022dc <HAL_GPIO_Init+0x2f8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x1fa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a46      	ldr	r2, [pc, #280]	@ (80022e0 <HAL_GPIO_Init+0x2fc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x1f6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a45      	ldr	r2, [pc, #276]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x1f2>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x204>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	@ (80022d0 <HAL_GPIO_Init+0x2ec>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b38      	ldr	r3, [pc, #224]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a24      	ldr	r2, [pc, #144]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1a      	ldr	r2, [pc, #104]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f aea2 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e267      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d075      	beq.n	800242a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d00c      	beq.n	8002364 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234a:	4b85      	ldr	r3, [pc, #532]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002352:	2b08      	cmp	r3, #8
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4b82      	ldr	r3, [pc, #520]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002362:	d10b      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4b7e      	ldr	r3, [pc, #504]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05b      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d157      	bne.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e242      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x74>
 8002386:	4b76      	ldr	r3, [pc, #472]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a75      	ldr	r2, [pc, #468]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e01d      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x98>
 800239e:	4b70      	ldr	r3, [pc, #448]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 80023b8:	4b69      	ldr	r3, [pc, #420]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a68      	ldr	r2, [pc, #416]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b66      	ldr	r3, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a65      	ldr	r2, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fcee 	bl	8001db8 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fcea 	bl	8001db8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e207      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff fcda 	bl	8001db8 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff fcd6 	bl	8001db8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1f3      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b51      	ldr	r3, [pc, #324]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0xe8>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002436:	4b4a      	ldr	r3, [pc, #296]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244e:	4b44      	ldr	r3, [pc, #272]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1c7      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4937      	ldr	r1, [pc, #220]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	e03a      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <HAL_RCC_OscConfig+0x244>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff fc8f 	bl	8001db8 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff fc8b 	bl	8001db8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1a8      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4925      	ldr	r1, [pc, #148]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x244>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff fc6e 	bl	8001db8 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7ff fc6a 	bl	8001db8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e187      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d036      	beq.n	8002578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_RCC_OscConfig+0x248>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff fc4e 	bl	8001db8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff fc4a 	bl	8001db8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e167      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_OscConfig+0x240>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x200>
 800253e:	e01b      	b.n	8002578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_OscConfig+0x248>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fc37 	bl	8001db8 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	e00e      	b.n	800256c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7ff fc33 	bl	8001db8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d907      	bls.n	800256c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e150      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
 8002560:	40023800 	.word	0x40023800
 8002564:	42470000 	.word	0x42470000
 8002568:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b88      	ldr	r3, [pc, #544]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800256e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ea      	bne.n	800254e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8097 	beq.w	80026b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b81      	ldr	r3, [pc, #516]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b7d      	ldr	r3, [pc, #500]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a7c      	ldr	r2, [pc, #496]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b77      	ldr	r3, [pc, #476]	@ (8002794 <HAL_RCC_OscConfig+0x474>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d118      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b74      	ldr	r3, [pc, #464]	@ (8002794 <HAL_RCC_OscConfig+0x474>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a73      	ldr	r2, [pc, #460]	@ (8002794 <HAL_RCC_OscConfig+0x474>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fbf3 	bl	8001db8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7ff fbef 	bl	8001db8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e10c      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_OscConfig+0x474>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x2ea>
 80025fc:	4b64      	ldr	r3, [pc, #400]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a63      	ldr	r2, [pc, #396]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x324>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x30c>
 8002612:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002616:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6713      	str	r3, [r2, #112]	@ 0x70
 800261e:	4b5c      	ldr	r3, [pc, #368]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	4a5b      	ldr	r2, [pc, #364]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	@ 0x70
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0x324>
 800262c:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002630:	4a57      	ldr	r2, [pc, #348]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6713      	str	r3, [r2, #112]	@ 0x70
 8002638:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263c:	4a54      	ldr	r2, [pc, #336]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800263e:	f023 0304 	bic.w	r3, r3, #4
 8002642:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d015      	beq.n	8002678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff fbb4 	bl	8001db8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7ff fbb0 	bl	8001db8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0cb      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0ee      	beq.n	8002654 <HAL_RCC_OscConfig+0x334>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7ff fb9e 	bl	8001db8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7ff fb9a 	bl	8001db8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0b5      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002696:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ee      	bne.n	8002680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	4a38      	ldr	r2, [pc, #224]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a1 	beq.w	8002800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026be:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d05c      	beq.n	8002784 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d141      	bne.n	8002756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b31      	ldr	r3, [pc, #196]	@ (8002798 <HAL_RCC_OscConfig+0x478>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb6e 	bl	8001db8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fb6a 	bl	8001db8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e087      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x478>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff fb43 	bl	8001db8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7ff fb3f 	bl	8001db8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e05c      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x416>
 8002754:	e054      	b.n	8002800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <HAL_RCC_OscConfig+0x478>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff fb2c 	bl	8001db8 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff fb28 	bl	8001db8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e045      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_OscConfig+0x470>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x444>
 8002782:	e03d      	b.n	8002800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e038      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000
 8002798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x4ec>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d028      	beq.n	80027fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d121      	bne.n	80027fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11a      	bne.n	80027fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d111      	bne.n	80027fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	3b01      	subs	r3, #1
 80027e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cc      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b68      	ldr	r3, [pc, #416]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d90c      	bls.n	800284c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b65      	ldr	r3, [pc, #404]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a58      	ldr	r2, [pc, #352]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800286e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d044      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d119      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b3f      	ldr	r3, [pc, #252]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e067      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4934      	ldr	r1, [pc, #208]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7ff fa5a 	bl	8001db8 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7ff fa56 	bl	8001db8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e04f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2b      	ldr	r3, [pc, #172]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d20c      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4602      	mov	r2, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490a      	ldr	r1, [pc, #40]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f9ba 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08007154 	.word	0x08007154
 80029d4:	20000008 	.word	0x20000008
 80029d8:	2000000c 	.word	0x2000000c

080029dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e0:	b090      	sub	sp, #64	@ 0x40
 80029e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f4:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d00d      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x40>
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	f200 80a1 	bhi.w	8002b48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a0e:	e09b      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a14:	e09b      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a16:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a1a:	e098      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a26:	4b4d      	ldr	r3, [pc, #308]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d028      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	2200      	movs	r2, #0
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a44:	2100      	movs	r1, #0
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a48:	fb03 f201 	mul.w	r2, r3, r1
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	4a43      	ldr	r2, [pc, #268]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a56:	fba0 1202 	umull	r1, r2, r0, r2
 8002a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a62:	4413      	add	r3, r2
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	61fa      	str	r2, [r7, #28]
 8002a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a76:	f7fe f8ef 	bl	8000c58 <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4613      	mov	r3, r2
 8002a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a82:	e053      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	617a      	str	r2, [r7, #20]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a96:	f04f 0b00 	mov.w	fp, #0
 8002a9a:	4652      	mov	r2, sl
 8002a9c:	465b      	mov	r3, fp
 8002a9e:	f04f 0000 	mov.w	r0, #0
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	0159      	lsls	r1, r3, #5
 8002aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aac:	0150      	lsls	r0, r2, #5
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ab6:	eb63 090b 	sbc.w	r9, r3, fp
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ac6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ace:	ebb2 0408 	subs.w	r4, r2, r8
 8002ad2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	00eb      	lsls	r3, r5, #3
 8002ae0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ae4:	00e2      	lsls	r2, r4, #3
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	461d      	mov	r5, r3
 8002aea:	eb14 030a 	adds.w	r3, r4, sl
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	eb45 030b 	adc.w	r3, r5, fp
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b02:	4629      	mov	r1, r5
 8002b04:	028b      	lsls	r3, r1, #10
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	028a      	lsls	r2, r1, #10
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	2200      	movs	r2, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	60fa      	str	r2, [r7, #12]
 8002b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b20:	f7fe f89a 	bl	8000c58 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	3301      	adds	r3, #1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3740      	adds	r7, #64	@ 0x40
 8002b54:	46bd      	mov	sp, r7
 8002b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	017d7840 	.word	0x017d7840

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	@ (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000008 	.word	0x20000008

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	@ (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08007164 	.word	0x08007164

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bac:	f7ff ffdc 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0b5b      	lsrs	r3, r3, #13
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08007164 	.word	0x08007164

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07b      	b.n	8002cda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fea0 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0104 	and.w	r1, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	f003 0210 	and.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf2:	f7ff f861 	bl	8001db8 <HAL_GetTick>
 8002cf6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e12a      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Transmit+0x36>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e122      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Transmit+0x48>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e11b      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d10f      	bne.n	8002d9a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b40      	cmp	r3, #64	@ 0x40
 8002da6:	d007      	beq.n	8002db8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc0:	d152      	bne.n	8002e68 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0xee>
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d145      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df4:	e032      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e28:	e018      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2a:	f7fe ffc5 	bl	8001db8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d803      	bhi.n	8002e42 <HAL_SPI_Transmit+0x160>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_Transmit+0x166>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e082      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1c7      	bne.n	8002df6 <HAL_SPI_Transmit+0x114>
 8002e66:	e053      	b.n	8002f10 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_SPI_Transmit+0x194>
 8002e70:	8b7b      	ldrh	r3, [r7, #26]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d147      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e9c:	e033      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d113      	bne.n	8002ed4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed2:	e018      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed4:	f7fe ff70 	bl	8001db8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d803      	bhi.n	8002eec <HAL_SPI_Transmit+0x20a>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Transmit+0x210>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e02d      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1c6      	bne.n	8002e9e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fbd9 	bl	80036cc <SPI_EndRxTxTransaction>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e104      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f92:	d112      	bne.n	8002fba <HAL_SPI_Receive+0x50>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4613      	mov	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8f3 	bl	800319c <HAL_SPI_TransmitReceive>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	e0ec      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fba:	f7fe fefd 	bl	8001db8 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Receive+0x62>
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0e1      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_SPI_Receive+0x74>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0da      	b.n	8003194 <HAL_SPI_Receive+0x22a>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302c:	d10f      	bne.n	800304e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d007      	beq.n	800306c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d170      	bne.n	8003156 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003074:	e035      	b.n	80030e2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d115      	bne.n	80030b0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f103 020c 	add.w	r2, r3, #12
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030ae:	e018      	b.n	80030e2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b0:	f7fe fe82 	bl	8001db8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d803      	bhi.n	80030c8 <HAL_SPI_Receive+0x15e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d102      	bne.n	80030ce <HAL_SPI_Receive+0x164>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e058      	b.n	8003194 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1c4      	bne.n	8003076 <HAL_SPI_Receive+0x10c>
 80030ec:	e038      	b.n	8003160 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d113      	bne.n	8003124 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003122:	e018      	b.n	8003156 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fe fe48 	bl	8001db8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_Receive+0x1d2>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Receive+0x1d8>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e01e      	b.n	8003194 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1c6      	bne.n	80030ee <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa4b 	bl	8003600 <SPI_EndRxTransaction>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003192:	2300      	movs	r3, #0
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031aa:	2301      	movs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ae:	f7fe fe03 	bl	8001db8 <HAL_GetTick>
 80031b2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d00c      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x4a>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d2:	d106      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x46>
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d001      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	e17f      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x5c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x5c>
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e174      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_SPI_TransmitReceive+0x6e>
 8003206:	2302      	movs	r3, #2
 8003208:	e16d      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d007      	beq.n	800327a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003282:	d17e      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_TransmitReceive+0xf6>
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d16c      	bne.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b6:	e059      	b.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d11b      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x162>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x162>
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d113      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d119      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x1a4>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	b292      	uxth	r2, r2
 8003322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003340:	f7fe fd3a 	bl	8001db8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334c:	429a      	cmp	r2, r3
 800334e:	d80d      	bhi.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d009      	beq.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0bc      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1a0      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x11c>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d19b      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x11c>
 8003380:	e082      	b.n	8003488 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x1f4>
 800338a:	8afb      	ldrh	r3, [r7, #22]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d171      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b6:	e05d      	b.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d11c      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x264>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x264>
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d114      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d119      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x2a6>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d014      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800343e:	2301      	movs	r3, #1
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003442:	f7fe fcb9 	bl	8001db8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344e:	429a      	cmp	r2, r3
 8003450:	d803      	bhi.n	800345a <HAL_SPI_TransmitReceive+0x2be>
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d102      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x2c4>
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e038      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d19c      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d197      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f91d 	bl	80036cc <SPI_EndRxTxTransaction>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01d      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	@ 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003500:	f7fe fc5a 	bl	8001db8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4413      	add	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003510:	f7fe fc52 	bl	8001db8 <HAL_GetTick>
 8003514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003516:	4b39      	ldr	r3, [pc, #228]	@ (80035fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	015b      	lsls	r3, r3, #5
 800351c:	0d1b      	lsrs	r3, r3, #20
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003526:	e054      	b.n	80035d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d050      	beq.n	80035d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003530:	f7fe fc42 	bl	8001db8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d902      	bls.n	8003546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d13d      	bne.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800355e:	d111      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003568:	d004      	beq.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d107      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358c:	d10f      	bne.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e017      	b.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4013      	ands	r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	429a      	cmp	r2, r3
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d19b      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000008 	.word	0x20000008

08003600 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003614:	d111      	bne.n	800363a <SPI_EndRxTransaction+0x3a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361e:	d004      	beq.n	800362a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003628:	d107      	bne.n	800363a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003638:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003642:	d12a      	bne.n	800369a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364c:	d012      	beq.n	8003674 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff49 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02d      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e026      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	2101      	movs	r1, #1
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff ff36 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01a      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e013      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ff23 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e000      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2201      	movs	r2, #1
 80036e0:	2102      	movs	r1, #2
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff04 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e032      	b.n	8003764 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <SPI_EndRxTxTransaction+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	@ (8003770 <SPI_EndRxTxTransaction+0xa4>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0d5b      	lsrs	r3, r3, #21
 800370a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371c:	d112      	bne.n	8003744 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	@ 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fee1 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d016      	beq.n	8003762 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e00f      	b.n	8003764 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3b01      	subs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d0f2      	beq.n	8003744 <SPI_EndRxTxTransaction+0x78>
 800375e:	e000      	b.n	8003762 <SPI_EndRxTxTransaction+0x96>
        break;
 8003760:	bf00      	nop
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000008 	.word	0x20000008
 8003770:	165e9f81 	.word	0x165e9f81

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e042      	b.n	800380c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f92c 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f973 	bl	8003aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	@ 0x28
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b20      	cmp	r3, #32
 8003832:	d175      	bne.n	8003920 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Transmit+0x2c>
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e06e      	b.n	8003922 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	@ 0x21
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003852:	f7fe fab1 	bl	8001db8 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386c:	d108      	bne.n	8003880 <HAL_UART_Transmit+0x6c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e003      	b.n	8003888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003888:	e02e      	b.n	80038e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	@ 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f848 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e03a      	b.n	8003922 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3302      	adds	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e007      	b.n	80038da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cb      	bne.n	800388a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	@ 0x40
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f814 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e006      	b.n	8003922 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	e03b      	b.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d037      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fa38 	bl	8001db8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <UART_WaitOnFlagUntilTimeout+0x30>
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e03a      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d023      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d020      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d01d      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d116      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f81d 	bl	80039dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e00f      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d0b4      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b095      	sub	sp, #84	@ 0x54
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a04:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d119      	bne.n	8003a88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a74:	61ba      	str	r2, [r7, #24]
 8003a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	613b      	str	r3, [r7, #16]
   return(result);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a96:	bf00      	nop
 8003a98:	3754      	adds	r7, #84	@ 0x54
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b0c0      	sub	sp, #256	@ 0x100
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	ea40 0301 	orr.w	r3, r0, r1
 8003acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003afc:	f021 010c 	bic.w	r1, r1, #12
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	6999      	ldr	r1, [r3, #24]
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	ea40 0301 	orr.w	r3, r0, r1
 8003b2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b8f      	ldr	r3, [pc, #572]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d005      	beq.n	8003b44 <UART_SetConfig+0xa0>
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d74 <UART_SetConfig+0x2d0>)
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d104      	bne.n	8003b4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7ff f830 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003b48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b4c:	e003      	b.n	8003b56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b4e:	f7ff f817 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003b52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b60:	f040 810c 	bne.w	8003d7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b86:	4621      	mov	r1, r4
 8003b88:	eb12 0801 	adds.w	r8, r2, r1
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	eb43 0901 	adc.w	r9, r3, r1
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	4699      	mov	r9, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	eb18 0303 	adds.w	r3, r8, r3
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	eb49 0303 	adc.w	r3, r9, r3
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	18db      	adds	r3, r3, r3
 8003bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd8:	4613      	mov	r3, r2
 8003bda:	eb42 0303 	adc.w	r3, r2, r3
 8003bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003be8:	f7fd f836 	bl	8000c58 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4b61      	ldr	r3, [pc, #388]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	011c      	lsls	r4, r3, #4
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	1891      	adds	r1, r2, r2
 8003c12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c14:	415b      	adcs	r3, r3
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb43 0b01 	adc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	4692      	mov	sl, r2
 8003c3e:	469b      	mov	fp, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	eb1a 0303 	adds.w	r3, sl, r3
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	18db      	adds	r3, r3, r3
 8003c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6e:	4613      	mov	r3, r2
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c7e:	f7fc ffeb 	bl	8000c58 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2264      	movs	r2, #100	@ 0x64
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	1acb      	subs	r3, r1, r3
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c9e:	4b36      	ldr	r3, [pc, #216]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cac:	441c      	add	r4, r3
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d24:	460b      	mov	r3, r1
 8003d26:	18db      	adds	r3, r3, r3
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	eb42 0303 	adc.w	r3, r2, r3
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d3a:	f7fc ff8d 	bl	8000c58 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	@ 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	3332      	adds	r3, #50	@ 0x32
 8003d56:	4a08      	ldr	r2, [pc, #32]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4422      	add	r2, r4
 8003d6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d6c:	e106      	b.n	8003f7c <UART_SetConfig+0x4d8>
 8003d6e:	bf00      	nop
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40011400 	.word	0x40011400
 8003d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6239      	str	r1, [r7, #32]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1854      	adds	r4, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb43 0501 	adc.w	r5, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	00eb      	lsls	r3, r5, #3
 8003db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db6:	00e2      	lsls	r2, r4, #3
 8003db8:	4614      	mov	r4, r2
 8003dba:	461d      	mov	r5, r3
 8003dbc:	4643      	mov	r3, r8
 8003dbe:	18e3      	adds	r3, r4, r3
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	eb45 0303 	adc.w	r3, r5, r3
 8003dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dea:	4629      	mov	r1, r5
 8003dec:	008b      	lsls	r3, r1, #2
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df4:	4621      	mov	r1, r4
 8003df6:	008a      	lsls	r2, r1, #2
 8003df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dfc:	f7fc ff2c 	bl	8000c58 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4b60      	ldr	r3, [pc, #384]	@ (8003f88 <UART_SetConfig+0x4e4>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011c      	lsls	r4, r3, #4
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	61b9      	str	r1, [r7, #24]
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e30:	4641      	mov	r1, r8
 8003e32:	1851      	adds	r1, r2, r1
 8003e34:	6139      	str	r1, [r7, #16]
 8003e36:	4649      	mov	r1, r9
 8003e38:	414b      	adcs	r3, r1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e48:	4659      	mov	r1, fp
 8003e4a:	00cb      	lsls	r3, r1, #3
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e52:	4651      	mov	r1, sl
 8003e54:	00ca      	lsls	r2, r1, #3
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e64:	464b      	mov	r3, r9
 8003e66:	460a      	mov	r2, r1
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e9a:	f7fc fedd 	bl	8000c58 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4b38      	ldr	r3, [pc, #224]	@ (8003f88 <UART_SetConfig+0x4e4>)
 8003ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2264      	movs	r2, #100	@ 0x64
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	1acb      	subs	r3, r1, r3
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	3332      	adds	r3, #50	@ 0x32
 8003eb8:	4a33      	ldr	r2, [pc, #204]	@ (8003f88 <UART_SetConfig+0x4e4>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ec4:	441c      	add	r4, r3
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ece:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ed0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	1891      	adds	r1, r2, r2
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	415b      	adcs	r3, r3
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	1851      	adds	r1, r2, r1
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	4649      	mov	r1, r9
 8003eec:	414b      	adcs	r3, r1
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003efc:	4659      	mov	r1, fp
 8003efe:	00cb      	lsls	r3, r1, #3
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f06:	4651      	mov	r1, sl
 8003f08:	00ca      	lsls	r2, r1, #3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4642      	mov	r2, r8
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f16:	464b      	mov	r3, r9
 8003f18:	460a      	mov	r2, r1
 8003f1a:	eb42 0303 	adc.w	r3, r2, r3
 8003f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f38:	4649      	mov	r1, r9
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f42:	4641      	mov	r1, r8
 8003f44:	008a      	lsls	r2, r1, #2
 8003f46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f4a:	f7fc fe85 	bl	8000c58 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <UART_SetConfig+0x4e4>)
 8003f54:	fba3 1302 	umull	r1, r3, r3, r2
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	2164      	movs	r1, #100	@ 0x64
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	3332      	adds	r3, #50	@ 0x32
 8003f66:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <UART_SetConfig+0x4e4>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4422      	add	r2, r4
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f82:	46bd      	mov	sp, r7
 8003f84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f88:	51eb851f 	.word	0x51eb851f

08003f8c <__cvt>:
 8003f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	ec57 6b10 	vmov	r6, r7, d0
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	460c      	mov	r4, r1
 8003f98:	4619      	mov	r1, r3
 8003f9a:	463b      	mov	r3, r7
 8003f9c:	bfbb      	ittet	lt
 8003f9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003fa2:	461f      	movlt	r7, r3
 8003fa4:	2300      	movge	r3, #0
 8003fa6:	232d      	movlt	r3, #45	@ 0x2d
 8003fa8:	700b      	strb	r3, [r1, #0]
 8003faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003fb0:	4691      	mov	r9, r2
 8003fb2:	f023 0820 	bic.w	r8, r3, #32
 8003fb6:	bfbc      	itt	lt
 8003fb8:	4632      	movlt	r2, r6
 8003fba:	4616      	movlt	r6, r2
 8003fbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fc0:	d005      	beq.n	8003fce <__cvt+0x42>
 8003fc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003fc6:	d100      	bne.n	8003fca <__cvt+0x3e>
 8003fc8:	3401      	adds	r4, #1
 8003fca:	2102      	movs	r1, #2
 8003fcc:	e000      	b.n	8003fd0 <__cvt+0x44>
 8003fce:	2103      	movs	r1, #3
 8003fd0:	ab03      	add	r3, sp, #12
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	ab02      	add	r3, sp, #8
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	ec47 6b10 	vmov	d0, r6, r7
 8003fdc:	4653      	mov	r3, sl
 8003fde:	4622      	mov	r2, r4
 8003fe0:	f000 fe5a 	bl	8004c98 <_dtoa_r>
 8003fe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003fe8:	4605      	mov	r5, r0
 8003fea:	d119      	bne.n	8004020 <__cvt+0x94>
 8003fec:	f019 0f01 	tst.w	r9, #1
 8003ff0:	d00e      	beq.n	8004010 <__cvt+0x84>
 8003ff2:	eb00 0904 	add.w	r9, r0, r4
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	f7fc fd6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004002:	b108      	cbz	r0, 8004008 <__cvt+0x7c>
 8004004:	f8cd 900c 	str.w	r9, [sp, #12]
 8004008:	2230      	movs	r2, #48	@ 0x30
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	454b      	cmp	r3, r9
 800400e:	d31e      	bcc.n	800404e <__cvt+0xc2>
 8004010:	9b03      	ldr	r3, [sp, #12]
 8004012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004014:	1b5b      	subs	r3, r3, r5
 8004016:	4628      	mov	r0, r5
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	b004      	add	sp, #16
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004024:	eb00 0904 	add.w	r9, r0, r4
 8004028:	d1e5      	bne.n	8003ff6 <__cvt+0x6a>
 800402a:	7803      	ldrb	r3, [r0, #0]
 800402c:	2b30      	cmp	r3, #48	@ 0x30
 800402e:	d10a      	bne.n	8004046 <__cvt+0xba>
 8004030:	2200      	movs	r2, #0
 8004032:	2300      	movs	r3, #0
 8004034:	4630      	mov	r0, r6
 8004036:	4639      	mov	r1, r7
 8004038:	f7fc fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800403c:	b918      	cbnz	r0, 8004046 <__cvt+0xba>
 800403e:	f1c4 0401 	rsb	r4, r4, #1
 8004042:	f8ca 4000 	str.w	r4, [sl]
 8004046:	f8da 3000 	ldr.w	r3, [sl]
 800404a:	4499      	add	r9, r3
 800404c:	e7d3      	b.n	8003ff6 <__cvt+0x6a>
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	9103      	str	r1, [sp, #12]
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e7d9      	b.n	800400a <__cvt+0x7e>

08004056 <__exponent>:
 8004056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004058:	2900      	cmp	r1, #0
 800405a:	bfba      	itte	lt
 800405c:	4249      	neglt	r1, r1
 800405e:	232d      	movlt	r3, #45	@ 0x2d
 8004060:	232b      	movge	r3, #43	@ 0x2b
 8004062:	2909      	cmp	r1, #9
 8004064:	7002      	strb	r2, [r0, #0]
 8004066:	7043      	strb	r3, [r0, #1]
 8004068:	dd29      	ble.n	80040be <__exponent+0x68>
 800406a:	f10d 0307 	add.w	r3, sp, #7
 800406e:	461d      	mov	r5, r3
 8004070:	270a      	movs	r7, #10
 8004072:	461a      	mov	r2, r3
 8004074:	fbb1 f6f7 	udiv	r6, r1, r7
 8004078:	fb07 1416 	mls	r4, r7, r6, r1
 800407c:	3430      	adds	r4, #48	@ 0x30
 800407e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004082:	460c      	mov	r4, r1
 8004084:	2c63      	cmp	r4, #99	@ 0x63
 8004086:	f103 33ff 	add.w	r3, r3, #4294967295
 800408a:	4631      	mov	r1, r6
 800408c:	dcf1      	bgt.n	8004072 <__exponent+0x1c>
 800408e:	3130      	adds	r1, #48	@ 0x30
 8004090:	1e94      	subs	r4, r2, #2
 8004092:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004096:	1c41      	adds	r1, r0, #1
 8004098:	4623      	mov	r3, r4
 800409a:	42ab      	cmp	r3, r5
 800409c:	d30a      	bcc.n	80040b4 <__exponent+0x5e>
 800409e:	f10d 0309 	add.w	r3, sp, #9
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	42ac      	cmp	r4, r5
 80040a6:	bf88      	it	hi
 80040a8:	2300      	movhi	r3, #0
 80040aa:	3302      	adds	r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	1a18      	subs	r0, r3, r0
 80040b0:	b003      	add	sp, #12
 80040b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80040b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80040bc:	e7ed      	b.n	800409a <__exponent+0x44>
 80040be:	2330      	movs	r3, #48	@ 0x30
 80040c0:	3130      	adds	r1, #48	@ 0x30
 80040c2:	7083      	strb	r3, [r0, #2]
 80040c4:	70c1      	strb	r1, [r0, #3]
 80040c6:	1d03      	adds	r3, r0, #4
 80040c8:	e7f1      	b.n	80040ae <__exponent+0x58>
	...

080040cc <_printf_float>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	b08d      	sub	sp, #52	@ 0x34
 80040d2:	460c      	mov	r4, r1
 80040d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80040d8:	4616      	mov	r6, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	4605      	mov	r5, r0
 80040de:	f000 fcdb 	bl	8004a98 <_localeconv_r>
 80040e2:	6803      	ldr	r3, [r0, #0]
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc f8ca 	bl	8000280 <strlen>
 80040ec:	2300      	movs	r3, #0
 80040ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80040f0:	f8d8 3000 	ldr.w	r3, [r8]
 80040f4:	9005      	str	r0, [sp, #20]
 80040f6:	3307      	adds	r3, #7
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	f103 0208 	add.w	r2, r3, #8
 8004100:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004104:	f8d4 b000 	ldr.w	fp, [r4]
 8004108:	f8c8 2000 	str.w	r2, [r8]
 800410c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004114:	9307      	str	r3, [sp, #28]
 8004116:	f8cd 8018 	str.w	r8, [sp, #24]
 800411a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800411e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004122:	4b9c      	ldr	r3, [pc, #624]	@ (8004394 <_printf_float+0x2c8>)
 8004124:	f04f 32ff 	mov.w	r2, #4294967295
 8004128:	f7fc fd08 	bl	8000b3c <__aeabi_dcmpun>
 800412c:	bb70      	cbnz	r0, 800418c <_printf_float+0xc0>
 800412e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004132:	4b98      	ldr	r3, [pc, #608]	@ (8004394 <_printf_float+0x2c8>)
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	f7fc fce2 	bl	8000b00 <__aeabi_dcmple>
 800413c:	bb30      	cbnz	r0, 800418c <_printf_float+0xc0>
 800413e:	2200      	movs	r2, #0
 8004140:	2300      	movs	r3, #0
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f7fc fcd1 	bl	8000aec <__aeabi_dcmplt>
 800414a:	b110      	cbz	r0, 8004152 <_printf_float+0x86>
 800414c:	232d      	movs	r3, #45	@ 0x2d
 800414e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004152:	4a91      	ldr	r2, [pc, #580]	@ (8004398 <_printf_float+0x2cc>)
 8004154:	4b91      	ldr	r3, [pc, #580]	@ (800439c <_printf_float+0x2d0>)
 8004156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800415a:	bf94      	ite	ls
 800415c:	4690      	movls	r8, r2
 800415e:	4698      	movhi	r8, r3
 8004160:	2303      	movs	r3, #3
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	f02b 0304 	bic.w	r3, fp, #4
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	f04f 0900 	mov.w	r9, #0
 800416e:	9700      	str	r7, [sp, #0]
 8004170:	4633      	mov	r3, r6
 8004172:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004174:	4621      	mov	r1, r4
 8004176:	4628      	mov	r0, r5
 8004178:	f000 f9d2 	bl	8004520 <_printf_common>
 800417c:	3001      	adds	r0, #1
 800417e:	f040 808d 	bne.w	800429c <_printf_float+0x1d0>
 8004182:	f04f 30ff 	mov.w	r0, #4294967295
 8004186:	b00d      	add	sp, #52	@ 0x34
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fc fcd2 	bl	8000b3c <__aeabi_dcmpun>
 8004198:	b140      	cbz	r0, 80041ac <_printf_float+0xe0>
 800419a:	464b      	mov	r3, r9
 800419c:	2b00      	cmp	r3, #0
 800419e:	bfbc      	itt	lt
 80041a0:	232d      	movlt	r3, #45	@ 0x2d
 80041a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041a6:	4a7e      	ldr	r2, [pc, #504]	@ (80043a0 <_printf_float+0x2d4>)
 80041a8:	4b7e      	ldr	r3, [pc, #504]	@ (80043a4 <_printf_float+0x2d8>)
 80041aa:	e7d4      	b.n	8004156 <_printf_float+0x8a>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80041b2:	9206      	str	r2, [sp, #24]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	d13b      	bne.n	8004230 <_printf_float+0x164>
 80041b8:	2306      	movs	r3, #6
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80041c0:	2300      	movs	r3, #0
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	9303      	str	r3, [sp, #12]
 80041c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80041c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80041cc:	ab09      	add	r3, sp, #36	@ 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6861      	ldr	r1, [r4, #4]
 80041d2:	ec49 8b10 	vmov	d0, r8, r9
 80041d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80041da:	4628      	mov	r0, r5
 80041dc:	f7ff fed6 	bl	8003f8c <__cvt>
 80041e0:	9b06      	ldr	r3, [sp, #24]
 80041e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80041e4:	2b47      	cmp	r3, #71	@ 0x47
 80041e6:	4680      	mov	r8, r0
 80041e8:	d129      	bne.n	800423e <_printf_float+0x172>
 80041ea:	1cc8      	adds	r0, r1, #3
 80041ec:	db02      	blt.n	80041f4 <_printf_float+0x128>
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	4299      	cmp	r1, r3
 80041f2:	dd41      	ble.n	8004278 <_printf_float+0x1ac>
 80041f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80041f8:	fa5f fa8a 	uxtb.w	sl, sl
 80041fc:	3901      	subs	r1, #1
 80041fe:	4652      	mov	r2, sl
 8004200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004204:	9109      	str	r1, [sp, #36]	@ 0x24
 8004206:	f7ff ff26 	bl	8004056 <__exponent>
 800420a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800420c:	1813      	adds	r3, r2, r0
 800420e:	2a01      	cmp	r2, #1
 8004210:	4681      	mov	r9, r0
 8004212:	6123      	str	r3, [r4, #16]
 8004214:	dc02      	bgt.n	800421c <_printf_float+0x150>
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	07d2      	lsls	r2, r2, #31
 800421a:	d501      	bpl.n	8004220 <_printf_float+0x154>
 800421c:	3301      	adds	r3, #1
 800421e:	6123      	str	r3, [r4, #16]
 8004220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0a2      	beq.n	800416e <_printf_float+0xa2>
 8004228:	232d      	movs	r3, #45	@ 0x2d
 800422a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800422e:	e79e      	b.n	800416e <_printf_float+0xa2>
 8004230:	9a06      	ldr	r2, [sp, #24]
 8004232:	2a47      	cmp	r2, #71	@ 0x47
 8004234:	d1c2      	bne.n	80041bc <_printf_float+0xf0>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1c0      	bne.n	80041bc <_printf_float+0xf0>
 800423a:	2301      	movs	r3, #1
 800423c:	e7bd      	b.n	80041ba <_printf_float+0xee>
 800423e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004242:	d9db      	bls.n	80041fc <_printf_float+0x130>
 8004244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004248:	d118      	bne.n	800427c <_printf_float+0x1b0>
 800424a:	2900      	cmp	r1, #0
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	dd0b      	ble.n	8004268 <_printf_float+0x19c>
 8004250:	6121      	str	r1, [r4, #16]
 8004252:	b913      	cbnz	r3, 800425a <_printf_float+0x18e>
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	07d0      	lsls	r0, r2, #31
 8004258:	d502      	bpl.n	8004260 <_printf_float+0x194>
 800425a:	3301      	adds	r3, #1
 800425c:	440b      	add	r3, r1
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004262:	f04f 0900 	mov.w	r9, #0
 8004266:	e7db      	b.n	8004220 <_printf_float+0x154>
 8004268:	b913      	cbnz	r3, 8004270 <_printf_float+0x1a4>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	07d2      	lsls	r2, r2, #31
 800426e:	d501      	bpl.n	8004274 <_printf_float+0x1a8>
 8004270:	3302      	adds	r3, #2
 8004272:	e7f4      	b.n	800425e <_printf_float+0x192>
 8004274:	2301      	movs	r3, #1
 8004276:	e7f2      	b.n	800425e <_printf_float+0x192>
 8004278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800427c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800427e:	4299      	cmp	r1, r3
 8004280:	db05      	blt.n	800428e <_printf_float+0x1c2>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6121      	str	r1, [r4, #16]
 8004286:	07d8      	lsls	r0, r3, #31
 8004288:	d5ea      	bpl.n	8004260 <_printf_float+0x194>
 800428a:	1c4b      	adds	r3, r1, #1
 800428c:	e7e7      	b.n	800425e <_printf_float+0x192>
 800428e:	2900      	cmp	r1, #0
 8004290:	bfd4      	ite	le
 8004292:	f1c1 0202 	rsble	r2, r1, #2
 8004296:	2201      	movgt	r2, #1
 8004298:	4413      	add	r3, r2
 800429a:	e7e0      	b.n	800425e <_printf_float+0x192>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	055a      	lsls	r2, r3, #21
 80042a0:	d407      	bmi.n	80042b2 <_printf_float+0x1e6>
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	4642      	mov	r2, r8
 80042a6:	4631      	mov	r1, r6
 80042a8:	4628      	mov	r0, r5
 80042aa:	47b8      	blx	r7
 80042ac:	3001      	adds	r0, #1
 80042ae:	d12b      	bne.n	8004308 <_printf_float+0x23c>
 80042b0:	e767      	b.n	8004182 <_printf_float+0xb6>
 80042b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042b6:	f240 80dd 	bls.w	8004474 <_printf_float+0x3a8>
 80042ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042be:	2200      	movs	r2, #0
 80042c0:	2300      	movs	r3, #0
 80042c2:	f7fc fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d033      	beq.n	8004332 <_printf_float+0x266>
 80042ca:	4a37      	ldr	r2, [pc, #220]	@ (80043a8 <_printf_float+0x2dc>)
 80042cc:	2301      	movs	r3, #1
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f af54 	beq.w	8004182 <_printf_float+0xb6>
 80042da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80042de:	4543      	cmp	r3, r8
 80042e0:	db02      	blt.n	80042e8 <_printf_float+0x21c>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	07d8      	lsls	r0, r3, #31
 80042e6:	d50f      	bpl.n	8004308 <_printf_float+0x23c>
 80042e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ec:	4631      	mov	r1, r6
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	f43f af45 	beq.w	8004182 <_printf_float+0xb6>
 80042f8:	f04f 0900 	mov.w	r9, #0
 80042fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004300:	f104 0a1a 	add.w	sl, r4, #26
 8004304:	45c8      	cmp	r8, r9
 8004306:	dc09      	bgt.n	800431c <_printf_float+0x250>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	079b      	lsls	r3, r3, #30
 800430c:	f100 8103 	bmi.w	8004516 <_printf_float+0x44a>
 8004310:	68e0      	ldr	r0, [r4, #12]
 8004312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004314:	4298      	cmp	r0, r3
 8004316:	bfb8      	it	lt
 8004318:	4618      	movlt	r0, r3
 800431a:	e734      	b.n	8004186 <_printf_float+0xba>
 800431c:	2301      	movs	r3, #1
 800431e:	4652      	mov	r2, sl
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f af2b 	beq.w	8004182 <_printf_float+0xb6>
 800432c:	f109 0901 	add.w	r9, r9, #1
 8004330:	e7e8      	b.n	8004304 <_printf_float+0x238>
 8004332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	dc39      	bgt.n	80043ac <_printf_float+0x2e0>
 8004338:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <_printf_float+0x2dc>)
 800433a:	2301      	movs	r3, #1
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	47b8      	blx	r7
 8004342:	3001      	adds	r0, #1
 8004344:	f43f af1d 	beq.w	8004182 <_printf_float+0xb6>
 8004348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800434c:	ea59 0303 	orrs.w	r3, r9, r3
 8004350:	d102      	bne.n	8004358 <_printf_float+0x28c>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	07d9      	lsls	r1, r3, #31
 8004356:	d5d7      	bpl.n	8004308 <_printf_float+0x23c>
 8004358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f af0d 	beq.w	8004182 <_printf_float+0xb6>
 8004368:	f04f 0a00 	mov.w	sl, #0
 800436c:	f104 0b1a 	add.w	fp, r4, #26
 8004370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004372:	425b      	negs	r3, r3
 8004374:	4553      	cmp	r3, sl
 8004376:	dc01      	bgt.n	800437c <_printf_float+0x2b0>
 8004378:	464b      	mov	r3, r9
 800437a:	e793      	b.n	80042a4 <_printf_float+0x1d8>
 800437c:	2301      	movs	r3, #1
 800437e:	465a      	mov	r2, fp
 8004380:	4631      	mov	r1, r6
 8004382:	4628      	mov	r0, r5
 8004384:	47b8      	blx	r7
 8004386:	3001      	adds	r0, #1
 8004388:	f43f aefb 	beq.w	8004182 <_printf_float+0xb6>
 800438c:	f10a 0a01 	add.w	sl, sl, #1
 8004390:	e7ee      	b.n	8004370 <_printf_float+0x2a4>
 8004392:	bf00      	nop
 8004394:	7fefffff 	.word	0x7fefffff
 8004398:	0800716c 	.word	0x0800716c
 800439c:	08007170 	.word	0x08007170
 80043a0:	08007174 	.word	0x08007174
 80043a4:	08007178 	.word	0x08007178
 80043a8:	0800717c 	.word	0x0800717c
 80043ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043b2:	4553      	cmp	r3, sl
 80043b4:	bfa8      	it	ge
 80043b6:	4653      	movge	r3, sl
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	4699      	mov	r9, r3
 80043bc:	dc36      	bgt.n	800442c <_printf_float+0x360>
 80043be:	f04f 0b00 	mov.w	fp, #0
 80043c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043c6:	f104 021a 	add.w	r2, r4, #26
 80043ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043cc:	9306      	str	r3, [sp, #24]
 80043ce:	eba3 0309 	sub.w	r3, r3, r9
 80043d2:	455b      	cmp	r3, fp
 80043d4:	dc31      	bgt.n	800443a <_printf_float+0x36e>
 80043d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d8:	459a      	cmp	sl, r3
 80043da:	dc3a      	bgt.n	8004452 <_printf_float+0x386>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	07da      	lsls	r2, r3, #31
 80043e0:	d437      	bmi.n	8004452 <_printf_float+0x386>
 80043e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043e4:	ebaa 0903 	sub.w	r9, sl, r3
 80043e8:	9b06      	ldr	r3, [sp, #24]
 80043ea:	ebaa 0303 	sub.w	r3, sl, r3
 80043ee:	4599      	cmp	r9, r3
 80043f0:	bfa8      	it	ge
 80043f2:	4699      	movge	r9, r3
 80043f4:	f1b9 0f00 	cmp.w	r9, #0
 80043f8:	dc33      	bgt.n	8004462 <_printf_float+0x396>
 80043fa:	f04f 0800 	mov.w	r8, #0
 80043fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004402:	f104 0b1a 	add.w	fp, r4, #26
 8004406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004408:	ebaa 0303 	sub.w	r3, sl, r3
 800440c:	eba3 0309 	sub.w	r3, r3, r9
 8004410:	4543      	cmp	r3, r8
 8004412:	f77f af79 	ble.w	8004308 <_printf_float+0x23c>
 8004416:	2301      	movs	r3, #1
 8004418:	465a      	mov	r2, fp
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	f43f aeae 	beq.w	8004182 <_printf_float+0xb6>
 8004426:	f108 0801 	add.w	r8, r8, #1
 800442a:	e7ec      	b.n	8004406 <_printf_float+0x33a>
 800442c:	4642      	mov	r2, r8
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	d1c2      	bne.n	80043be <_printf_float+0x2f2>
 8004438:	e6a3      	b.n	8004182 <_printf_float+0xb6>
 800443a:	2301      	movs	r3, #1
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	9206      	str	r2, [sp, #24]
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	f43f ae9c 	beq.w	8004182 <_printf_float+0xb6>
 800444a:	9a06      	ldr	r2, [sp, #24]
 800444c:	f10b 0b01 	add.w	fp, fp, #1
 8004450:	e7bb      	b.n	80043ca <_printf_float+0x2fe>
 8004452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	d1c0      	bne.n	80043e2 <_printf_float+0x316>
 8004460:	e68f      	b.n	8004182 <_printf_float+0xb6>
 8004462:	9a06      	ldr	r2, [sp, #24]
 8004464:	464b      	mov	r3, r9
 8004466:	4442      	add	r2, r8
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	d1c3      	bne.n	80043fa <_printf_float+0x32e>
 8004472:	e686      	b.n	8004182 <_printf_float+0xb6>
 8004474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004478:	f1ba 0f01 	cmp.w	sl, #1
 800447c:	dc01      	bgt.n	8004482 <_printf_float+0x3b6>
 800447e:	07db      	lsls	r3, r3, #31
 8004480:	d536      	bpl.n	80044f0 <_printf_float+0x424>
 8004482:	2301      	movs	r3, #1
 8004484:	4642      	mov	r2, r8
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f ae78 	beq.w	8004182 <_printf_float+0xb6>
 8004492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f ae70 	beq.w	8004182 <_printf_float+0xb6>
 80044a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044a6:	2200      	movs	r2, #0
 80044a8:	2300      	movs	r3, #0
 80044aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ae:	f7fc fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80044b2:	b9c0      	cbnz	r0, 80044e6 <_printf_float+0x41a>
 80044b4:	4653      	mov	r3, sl
 80044b6:	f108 0201 	add.w	r2, r8, #1
 80044ba:	4631      	mov	r1, r6
 80044bc:	4628      	mov	r0, r5
 80044be:	47b8      	blx	r7
 80044c0:	3001      	adds	r0, #1
 80044c2:	d10c      	bne.n	80044de <_printf_float+0x412>
 80044c4:	e65d      	b.n	8004182 <_printf_float+0xb6>
 80044c6:	2301      	movs	r3, #1
 80044c8:	465a      	mov	r2, fp
 80044ca:	4631      	mov	r1, r6
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	f43f ae56 	beq.w	8004182 <_printf_float+0xb6>
 80044d6:	f108 0801 	add.w	r8, r8, #1
 80044da:	45d0      	cmp	r8, sl
 80044dc:	dbf3      	blt.n	80044c6 <_printf_float+0x3fa>
 80044de:	464b      	mov	r3, r9
 80044e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80044e4:	e6df      	b.n	80042a6 <_printf_float+0x1da>
 80044e6:	f04f 0800 	mov.w	r8, #0
 80044ea:	f104 0b1a 	add.w	fp, r4, #26
 80044ee:	e7f4      	b.n	80044da <_printf_float+0x40e>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4642      	mov	r2, r8
 80044f4:	e7e1      	b.n	80044ba <_printf_float+0x3ee>
 80044f6:	2301      	movs	r3, #1
 80044f8:	464a      	mov	r2, r9
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b8      	blx	r7
 8004500:	3001      	adds	r0, #1
 8004502:	f43f ae3e 	beq.w	8004182 <_printf_float+0xb6>
 8004506:	f108 0801 	add.w	r8, r8, #1
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800450e:	1a5b      	subs	r3, r3, r1
 8004510:	4543      	cmp	r3, r8
 8004512:	dcf0      	bgt.n	80044f6 <_printf_float+0x42a>
 8004514:	e6fc      	b.n	8004310 <_printf_float+0x244>
 8004516:	f04f 0800 	mov.w	r8, #0
 800451a:	f104 0919 	add.w	r9, r4, #25
 800451e:	e7f4      	b.n	800450a <_printf_float+0x43e>

08004520 <_printf_common>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	4616      	mov	r6, r2
 8004526:	4698      	mov	r8, r3
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004530:	4293      	cmp	r3, r2
 8004532:	bfb8      	it	lt
 8004534:	4613      	movlt	r3, r2
 8004536:	6033      	str	r3, [r6, #0]
 8004538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800453c:	4607      	mov	r7, r0
 800453e:	460c      	mov	r4, r1
 8004540:	b10a      	cbz	r2, 8004546 <_printf_common+0x26>
 8004542:	3301      	adds	r3, #1
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	0699      	lsls	r1, r3, #26
 800454a:	bf42      	ittt	mi
 800454c:	6833      	ldrmi	r3, [r6, #0]
 800454e:	3302      	addmi	r3, #2
 8004550:	6033      	strmi	r3, [r6, #0]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	f015 0506 	ands.w	r5, r5, #6
 8004558:	d106      	bne.n	8004568 <_printf_common+0x48>
 800455a:	f104 0a19 	add.w	sl, r4, #25
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	6832      	ldr	r2, [r6, #0]
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	42ab      	cmp	r3, r5
 8004566:	dc26      	bgt.n	80045b6 <_printf_common+0x96>
 8004568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	3b00      	subs	r3, #0
 8004570:	bf18      	it	ne
 8004572:	2301      	movne	r3, #1
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d42b      	bmi.n	80045d0 <_printf_common+0xb0>
 8004578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800457c:	4641      	mov	r1, r8
 800457e:	4638      	mov	r0, r7
 8004580:	47c8      	blx	r9
 8004582:	3001      	adds	r0, #1
 8004584:	d01e      	beq.n	80045c4 <_printf_common+0xa4>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	2b04      	cmp	r3, #4
 8004590:	bf02      	ittt	eq
 8004592:	68e5      	ldreq	r5, [r4, #12]
 8004594:	6833      	ldreq	r3, [r6, #0]
 8004596:	1aed      	subeq	r5, r5, r3
 8004598:	68a3      	ldr	r3, [r4, #8]
 800459a:	bf0c      	ite	eq
 800459c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a0:	2500      	movne	r5, #0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bfc4      	itt	gt
 80045a6:	1a9b      	subgt	r3, r3, r2
 80045a8:	18ed      	addgt	r5, r5, r3
 80045aa:	2600      	movs	r6, #0
 80045ac:	341a      	adds	r4, #26
 80045ae:	42b5      	cmp	r5, r6
 80045b0:	d11a      	bne.n	80045e8 <_printf_common+0xc8>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e008      	b.n	80045c8 <_printf_common+0xa8>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4641      	mov	r1, r8
 80045bc:	4638      	mov	r0, r7
 80045be:	47c8      	blx	r9
 80045c0:	3001      	adds	r0, #1
 80045c2:	d103      	bne.n	80045cc <_printf_common+0xac>
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7c6      	b.n	800455e <_printf_common+0x3e>
 80045d0:	18e1      	adds	r1, r4, r3
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	2030      	movs	r0, #48	@ 0x30
 80045d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045da:	4422      	add	r2, r4
 80045dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045e4:	3302      	adds	r3, #2
 80045e6:	e7c7      	b.n	8004578 <_printf_common+0x58>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4622      	mov	r2, r4
 80045ec:	4641      	mov	r1, r8
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c8      	blx	r9
 80045f2:	3001      	adds	r0, #1
 80045f4:	d0e6      	beq.n	80045c4 <_printf_common+0xa4>
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7d9      	b.n	80045ae <_printf_common+0x8e>
	...

080045fc <_printf_i>:
 80045fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	7e0f      	ldrb	r7, [r1, #24]
 8004602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004604:	2f78      	cmp	r7, #120	@ 0x78
 8004606:	4691      	mov	r9, r2
 8004608:	4680      	mov	r8, r0
 800460a:	460c      	mov	r4, r1
 800460c:	469a      	mov	sl, r3
 800460e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004612:	d807      	bhi.n	8004624 <_printf_i+0x28>
 8004614:	2f62      	cmp	r7, #98	@ 0x62
 8004616:	d80a      	bhi.n	800462e <_printf_i+0x32>
 8004618:	2f00      	cmp	r7, #0
 800461a:	f000 80d2 	beq.w	80047c2 <_printf_i+0x1c6>
 800461e:	2f58      	cmp	r7, #88	@ 0x58
 8004620:	f000 80b9 	beq.w	8004796 <_printf_i+0x19a>
 8004624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800462c:	e03a      	b.n	80046a4 <_printf_i+0xa8>
 800462e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004632:	2b15      	cmp	r3, #21
 8004634:	d8f6      	bhi.n	8004624 <_printf_i+0x28>
 8004636:	a101      	add	r1, pc, #4	@ (adr r1, 800463c <_printf_i+0x40>)
 8004638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800463c:	08004695 	.word	0x08004695
 8004640:	080046a9 	.word	0x080046a9
 8004644:	08004625 	.word	0x08004625
 8004648:	08004625 	.word	0x08004625
 800464c:	08004625 	.word	0x08004625
 8004650:	08004625 	.word	0x08004625
 8004654:	080046a9 	.word	0x080046a9
 8004658:	08004625 	.word	0x08004625
 800465c:	08004625 	.word	0x08004625
 8004660:	08004625 	.word	0x08004625
 8004664:	08004625 	.word	0x08004625
 8004668:	080047a9 	.word	0x080047a9
 800466c:	080046d3 	.word	0x080046d3
 8004670:	08004763 	.word	0x08004763
 8004674:	08004625 	.word	0x08004625
 8004678:	08004625 	.word	0x08004625
 800467c:	080047cb 	.word	0x080047cb
 8004680:	08004625 	.word	0x08004625
 8004684:	080046d3 	.word	0x080046d3
 8004688:	08004625 	.word	0x08004625
 800468c:	08004625 	.word	0x08004625
 8004690:	0800476b 	.word	0x0800476b
 8004694:	6833      	ldr	r3, [r6, #0]
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6032      	str	r2, [r6, #0]
 800469c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046a4:	2301      	movs	r3, #1
 80046a6:	e09d      	b.n	80047e4 <_printf_i+0x1e8>
 80046a8:	6833      	ldr	r3, [r6, #0]
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	1d19      	adds	r1, r3, #4
 80046ae:	6031      	str	r1, [r6, #0]
 80046b0:	0606      	lsls	r6, r0, #24
 80046b2:	d501      	bpl.n	80046b8 <_printf_i+0xbc>
 80046b4:	681d      	ldr	r5, [r3, #0]
 80046b6:	e003      	b.n	80046c0 <_printf_i+0xc4>
 80046b8:	0645      	lsls	r5, r0, #25
 80046ba:	d5fb      	bpl.n	80046b4 <_printf_i+0xb8>
 80046bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	da03      	bge.n	80046cc <_printf_i+0xd0>
 80046c4:	232d      	movs	r3, #45	@ 0x2d
 80046c6:	426d      	negs	r5, r5
 80046c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046cc:	4859      	ldr	r0, [pc, #356]	@ (8004834 <_printf_i+0x238>)
 80046ce:	230a      	movs	r3, #10
 80046d0:	e011      	b.n	80046f6 <_printf_i+0xfa>
 80046d2:	6821      	ldr	r1, [r4, #0]
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	0608      	lsls	r0, r1, #24
 80046d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80046dc:	d402      	bmi.n	80046e4 <_printf_i+0xe8>
 80046de:	0649      	lsls	r1, r1, #25
 80046e0:	bf48      	it	mi
 80046e2:	b2ad      	uxthmi	r5, r5
 80046e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80046e6:	4853      	ldr	r0, [pc, #332]	@ (8004834 <_printf_i+0x238>)
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	bf14      	ite	ne
 80046ec:	230a      	movne	r3, #10
 80046ee:	2308      	moveq	r3, #8
 80046f0:	2100      	movs	r1, #0
 80046f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046f6:	6866      	ldr	r6, [r4, #4]
 80046f8:	60a6      	str	r6, [r4, #8]
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	bfa2      	ittt	ge
 80046fe:	6821      	ldrge	r1, [r4, #0]
 8004700:	f021 0104 	bicge.w	r1, r1, #4
 8004704:	6021      	strge	r1, [r4, #0]
 8004706:	b90d      	cbnz	r5, 800470c <_printf_i+0x110>
 8004708:	2e00      	cmp	r6, #0
 800470a:	d04b      	beq.n	80047a4 <_printf_i+0x1a8>
 800470c:	4616      	mov	r6, r2
 800470e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004712:	fb03 5711 	mls	r7, r3, r1, r5
 8004716:	5dc7      	ldrb	r7, [r0, r7]
 8004718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800471c:	462f      	mov	r7, r5
 800471e:	42bb      	cmp	r3, r7
 8004720:	460d      	mov	r5, r1
 8004722:	d9f4      	bls.n	800470e <_printf_i+0x112>
 8004724:	2b08      	cmp	r3, #8
 8004726:	d10b      	bne.n	8004740 <_printf_i+0x144>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	07df      	lsls	r7, r3, #31
 800472c:	d508      	bpl.n	8004740 <_printf_i+0x144>
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	6861      	ldr	r1, [r4, #4]
 8004732:	4299      	cmp	r1, r3
 8004734:	bfde      	ittt	le
 8004736:	2330      	movle	r3, #48	@ 0x30
 8004738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800473c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004740:	1b92      	subs	r2, r2, r6
 8004742:	6122      	str	r2, [r4, #16]
 8004744:	f8cd a000 	str.w	sl, [sp]
 8004748:	464b      	mov	r3, r9
 800474a:	aa03      	add	r2, sp, #12
 800474c:	4621      	mov	r1, r4
 800474e:	4640      	mov	r0, r8
 8004750:	f7ff fee6 	bl	8004520 <_printf_common>
 8004754:	3001      	adds	r0, #1
 8004756:	d14a      	bne.n	80047ee <_printf_i+0x1f2>
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	b004      	add	sp, #16
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	4833      	ldr	r0, [pc, #204]	@ (8004838 <_printf_i+0x23c>)
 800476c:	2778      	movs	r7, #120	@ 0x78
 800476e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	6831      	ldr	r1, [r6, #0]
 8004776:	061f      	lsls	r7, r3, #24
 8004778:	f851 5b04 	ldr.w	r5, [r1], #4
 800477c:	d402      	bmi.n	8004784 <_printf_i+0x188>
 800477e:	065f      	lsls	r7, r3, #25
 8004780:	bf48      	it	mi
 8004782:	b2ad      	uxthmi	r5, r5
 8004784:	6031      	str	r1, [r6, #0]
 8004786:	07d9      	lsls	r1, r3, #31
 8004788:	bf44      	itt	mi
 800478a:	f043 0320 	orrmi.w	r3, r3, #32
 800478e:	6023      	strmi	r3, [r4, #0]
 8004790:	b11d      	cbz	r5, 800479a <_printf_i+0x19e>
 8004792:	2310      	movs	r3, #16
 8004794:	e7ac      	b.n	80046f0 <_printf_i+0xf4>
 8004796:	4827      	ldr	r0, [pc, #156]	@ (8004834 <_printf_i+0x238>)
 8004798:	e7e9      	b.n	800476e <_printf_i+0x172>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	f023 0320 	bic.w	r3, r3, #32
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	e7f6      	b.n	8004792 <_printf_i+0x196>
 80047a4:	4616      	mov	r6, r2
 80047a6:	e7bd      	b.n	8004724 <_printf_i+0x128>
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	6825      	ldr	r5, [r4, #0]
 80047ac:	6961      	ldr	r1, [r4, #20]
 80047ae:	1d18      	adds	r0, r3, #4
 80047b0:	6030      	str	r0, [r6, #0]
 80047b2:	062e      	lsls	r6, r5, #24
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	d501      	bpl.n	80047bc <_printf_i+0x1c0>
 80047b8:	6019      	str	r1, [r3, #0]
 80047ba:	e002      	b.n	80047c2 <_printf_i+0x1c6>
 80047bc:	0668      	lsls	r0, r5, #25
 80047be:	d5fb      	bpl.n	80047b8 <_printf_i+0x1bc>
 80047c0:	8019      	strh	r1, [r3, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	6123      	str	r3, [r4, #16]
 80047c6:	4616      	mov	r6, r2
 80047c8:	e7bc      	b.n	8004744 <_printf_i+0x148>
 80047ca:	6833      	ldr	r3, [r6, #0]
 80047cc:	1d1a      	adds	r2, r3, #4
 80047ce:	6032      	str	r2, [r6, #0]
 80047d0:	681e      	ldr	r6, [r3, #0]
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	2100      	movs	r1, #0
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7fb fd02 	bl	80001e0 <memchr>
 80047dc:	b108      	cbz	r0, 80047e2 <_printf_i+0x1e6>
 80047de:	1b80      	subs	r0, r0, r6
 80047e0:	6060      	str	r0, [r4, #4]
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	2300      	movs	r3, #0
 80047e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ec:	e7aa      	b.n	8004744 <_printf_i+0x148>
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	4632      	mov	r2, r6
 80047f2:	4649      	mov	r1, r9
 80047f4:	4640      	mov	r0, r8
 80047f6:	47d0      	blx	sl
 80047f8:	3001      	adds	r0, #1
 80047fa:	d0ad      	beq.n	8004758 <_printf_i+0x15c>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	079b      	lsls	r3, r3, #30
 8004800:	d413      	bmi.n	800482a <_printf_i+0x22e>
 8004802:	68e0      	ldr	r0, [r4, #12]
 8004804:	9b03      	ldr	r3, [sp, #12]
 8004806:	4298      	cmp	r0, r3
 8004808:	bfb8      	it	lt
 800480a:	4618      	movlt	r0, r3
 800480c:	e7a6      	b.n	800475c <_printf_i+0x160>
 800480e:	2301      	movs	r3, #1
 8004810:	4632      	mov	r2, r6
 8004812:	4649      	mov	r1, r9
 8004814:	4640      	mov	r0, r8
 8004816:	47d0      	blx	sl
 8004818:	3001      	adds	r0, #1
 800481a:	d09d      	beq.n	8004758 <_printf_i+0x15c>
 800481c:	3501      	adds	r5, #1
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	9903      	ldr	r1, [sp, #12]
 8004822:	1a5b      	subs	r3, r3, r1
 8004824:	42ab      	cmp	r3, r5
 8004826:	dcf2      	bgt.n	800480e <_printf_i+0x212>
 8004828:	e7eb      	b.n	8004802 <_printf_i+0x206>
 800482a:	2500      	movs	r5, #0
 800482c:	f104 0619 	add.w	r6, r4, #25
 8004830:	e7f5      	b.n	800481e <_printf_i+0x222>
 8004832:	bf00      	nop
 8004834:	0800717e 	.word	0x0800717e
 8004838:	0800718f 	.word	0x0800718f

0800483c <std>:
 800483c:	2300      	movs	r3, #0
 800483e:	b510      	push	{r4, lr}
 8004840:	4604      	mov	r4, r0
 8004842:	e9c0 3300 	strd	r3, r3, [r0]
 8004846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800484a:	6083      	str	r3, [r0, #8]
 800484c:	8181      	strh	r1, [r0, #12]
 800484e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004850:	81c2      	strh	r2, [r0, #14]
 8004852:	6183      	str	r3, [r0, #24]
 8004854:	4619      	mov	r1, r3
 8004856:	2208      	movs	r2, #8
 8004858:	305c      	adds	r0, #92	@ 0x5c
 800485a:	f000 f914 	bl	8004a86 <memset>
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <std+0x58>)
 8004860:	6263      	str	r3, [r4, #36]	@ 0x24
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <std+0x5c>)
 8004864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <std+0x60>)
 8004868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <std+0x64>)
 800486c:	6323      	str	r3, [r4, #48]	@ 0x30
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <std+0x68>)
 8004870:	6224      	str	r4, [r4, #32]
 8004872:	429c      	cmp	r4, r3
 8004874:	d006      	beq.n	8004884 <std+0x48>
 8004876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800487a:	4294      	cmp	r4, r2
 800487c:	d002      	beq.n	8004884 <std+0x48>
 800487e:	33d0      	adds	r3, #208	@ 0xd0
 8004880:	429c      	cmp	r4, r3
 8004882:	d105      	bne.n	8004890 <std+0x54>
 8004884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488c:	f000 b978 	b.w	8004b80 <__retarget_lock_init_recursive>
 8004890:	bd10      	pop	{r4, pc}
 8004892:	bf00      	nop
 8004894:	08004a01 	.word	0x08004a01
 8004898:	08004a23 	.word	0x08004a23
 800489c:	08004a5b 	.word	0x08004a5b
 80048a0:	08004a7f 	.word	0x08004a7f
 80048a4:	20000354 	.word	0x20000354

080048a8 <stdio_exit_handler>:
 80048a8:	4a02      	ldr	r2, [pc, #8]	@ (80048b4 <stdio_exit_handler+0xc>)
 80048aa:	4903      	ldr	r1, [pc, #12]	@ (80048b8 <stdio_exit_handler+0x10>)
 80048ac:	4803      	ldr	r0, [pc, #12]	@ (80048bc <stdio_exit_handler+0x14>)
 80048ae:	f000 b869 	b.w	8004984 <_fwalk_sglue>
 80048b2:	bf00      	nop
 80048b4:	20000014 	.word	0x20000014
 80048b8:	080064dd 	.word	0x080064dd
 80048bc:	20000024 	.word	0x20000024

080048c0 <cleanup_stdio>:
 80048c0:	6841      	ldr	r1, [r0, #4]
 80048c2:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <cleanup_stdio+0x34>)
 80048c4:	4299      	cmp	r1, r3
 80048c6:	b510      	push	{r4, lr}
 80048c8:	4604      	mov	r4, r0
 80048ca:	d001      	beq.n	80048d0 <cleanup_stdio+0x10>
 80048cc:	f001 fe06 	bl	80064dc <_fflush_r>
 80048d0:	68a1      	ldr	r1, [r4, #8]
 80048d2:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <cleanup_stdio+0x38>)
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d002      	beq.n	80048de <cleanup_stdio+0x1e>
 80048d8:	4620      	mov	r0, r4
 80048da:	f001 fdff 	bl	80064dc <_fflush_r>
 80048de:	68e1      	ldr	r1, [r4, #12]
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <cleanup_stdio+0x3c>)
 80048e2:	4299      	cmp	r1, r3
 80048e4:	d004      	beq.n	80048f0 <cleanup_stdio+0x30>
 80048e6:	4620      	mov	r0, r4
 80048e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ec:	f001 bdf6 	b.w	80064dc <_fflush_r>
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop
 80048f4:	20000354 	.word	0x20000354
 80048f8:	200003bc 	.word	0x200003bc
 80048fc:	20000424 	.word	0x20000424

08004900 <global_stdio_init.part.0>:
 8004900:	b510      	push	{r4, lr}
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <global_stdio_init.part.0+0x30>)
 8004904:	4c0b      	ldr	r4, [pc, #44]	@ (8004934 <global_stdio_init.part.0+0x34>)
 8004906:	4a0c      	ldr	r2, [pc, #48]	@ (8004938 <global_stdio_init.part.0+0x38>)
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	4620      	mov	r0, r4
 800490c:	2200      	movs	r2, #0
 800490e:	2104      	movs	r1, #4
 8004910:	f7ff ff94 	bl	800483c <std>
 8004914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004918:	2201      	movs	r2, #1
 800491a:	2109      	movs	r1, #9
 800491c:	f7ff ff8e 	bl	800483c <std>
 8004920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004924:	2202      	movs	r2, #2
 8004926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492a:	2112      	movs	r1, #18
 800492c:	f7ff bf86 	b.w	800483c <std>
 8004930:	2000048c 	.word	0x2000048c
 8004934:	20000354 	.word	0x20000354
 8004938:	080048a9 	.word	0x080048a9

0800493c <__sfp_lock_acquire>:
 800493c:	4801      	ldr	r0, [pc, #4]	@ (8004944 <__sfp_lock_acquire+0x8>)
 800493e:	f000 b920 	b.w	8004b82 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	20000495 	.word	0x20000495

08004948 <__sfp_lock_release>:
 8004948:	4801      	ldr	r0, [pc, #4]	@ (8004950 <__sfp_lock_release+0x8>)
 800494a:	f000 b91b 	b.w	8004b84 <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	20000495 	.word	0x20000495

08004954 <__sinit>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	f7ff fff0 	bl	800493c <__sfp_lock_acquire>
 800495c:	6a23      	ldr	r3, [r4, #32]
 800495e:	b11b      	cbz	r3, 8004968 <__sinit+0x14>
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f7ff bff0 	b.w	8004948 <__sfp_lock_release>
 8004968:	4b04      	ldr	r3, [pc, #16]	@ (800497c <__sinit+0x28>)
 800496a:	6223      	str	r3, [r4, #32]
 800496c:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <__sinit+0x2c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f5      	bne.n	8004960 <__sinit+0xc>
 8004974:	f7ff ffc4 	bl	8004900 <global_stdio_init.part.0>
 8004978:	e7f2      	b.n	8004960 <__sinit+0xc>
 800497a:	bf00      	nop
 800497c:	080048c1 	.word	0x080048c1
 8004980:	2000048c 	.word	0x2000048c

08004984 <_fwalk_sglue>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	4607      	mov	r7, r0
 800498a:	4688      	mov	r8, r1
 800498c:	4614      	mov	r4, r2
 800498e:	2600      	movs	r6, #0
 8004990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004994:	f1b9 0901 	subs.w	r9, r9, #1
 8004998:	d505      	bpl.n	80049a6 <_fwalk_sglue+0x22>
 800499a:	6824      	ldr	r4, [r4, #0]
 800499c:	2c00      	cmp	r4, #0
 800499e:	d1f7      	bne.n	8004990 <_fwalk_sglue+0xc>
 80049a0:	4630      	mov	r0, r6
 80049a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a6:	89ab      	ldrh	r3, [r5, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d907      	bls.n	80049bc <_fwalk_sglue+0x38>
 80049ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b0:	3301      	adds	r3, #1
 80049b2:	d003      	beq.n	80049bc <_fwalk_sglue+0x38>
 80049b4:	4629      	mov	r1, r5
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c0      	blx	r8
 80049ba:	4306      	orrs	r6, r0
 80049bc:	3568      	adds	r5, #104	@ 0x68
 80049be:	e7e9      	b.n	8004994 <_fwalk_sglue+0x10>

080049c0 <siprintf>:
 80049c0:	b40e      	push	{r1, r2, r3}
 80049c2:	b500      	push	{lr}
 80049c4:	b09c      	sub	sp, #112	@ 0x70
 80049c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80049c8:	9002      	str	r0, [sp, #8]
 80049ca:	9006      	str	r0, [sp, #24]
 80049cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049d0:	4809      	ldr	r0, [pc, #36]	@ (80049f8 <siprintf+0x38>)
 80049d2:	9107      	str	r1, [sp, #28]
 80049d4:	9104      	str	r1, [sp, #16]
 80049d6:	4909      	ldr	r1, [pc, #36]	@ (80049fc <siprintf+0x3c>)
 80049d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049dc:	9105      	str	r1, [sp, #20]
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	a902      	add	r1, sp, #8
 80049e4:	f001 fbfa 	bl	80061dc <_svfiprintf_r>
 80049e8:	9b02      	ldr	r3, [sp, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	b01c      	add	sp, #112	@ 0x70
 80049f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f4:	b003      	add	sp, #12
 80049f6:	4770      	bx	lr
 80049f8:	20000020 	.word	0x20000020
 80049fc:	ffff0208 	.word	0xffff0208

08004a00 <__sread>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	460c      	mov	r4, r1
 8004a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a08:	f000 f86c 	bl	8004ae4 <_read_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	bfab      	itete	ge
 8004a10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a12:	89a3      	ldrhlt	r3, [r4, #12]
 8004a14:	181b      	addge	r3, r3, r0
 8004a16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a1a:	bfac      	ite	ge
 8004a1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a1e:	81a3      	strhlt	r3, [r4, #12]
 8004a20:	bd10      	pop	{r4, pc}

08004a22 <__swrite>:
 8004a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a26:	461f      	mov	r7, r3
 8004a28:	898b      	ldrh	r3, [r1, #12]
 8004a2a:	05db      	lsls	r3, r3, #23
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	4616      	mov	r6, r2
 8004a32:	d505      	bpl.n	8004a40 <__swrite+0x1e>
 8004a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a38:	2302      	movs	r3, #2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f000 f840 	bl	8004ac0 <_lseek_r>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	463b      	mov	r3, r7
 8004a50:	4628      	mov	r0, r5
 8004a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a56:	f000 b857 	b.w	8004b08 <_write_r>

08004a5a <__sseek>:
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a62:	f000 f82d 	bl	8004ac0 <_lseek_r>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	bf15      	itete	ne
 8004a6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a76:	81a3      	strheq	r3, [r4, #12]
 8004a78:	bf18      	it	ne
 8004a7a:	81a3      	strhne	r3, [r4, #12]
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <__sclose>:
 8004a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a82:	f000 b80d 	b.w	8004aa0 <_close_r>

08004a86 <memset>:
 8004a86:	4402      	add	r2, r0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d100      	bne.n	8004a90 <memset+0xa>
 8004a8e:	4770      	bx	lr
 8004a90:	f803 1b01 	strb.w	r1, [r3], #1
 8004a94:	e7f9      	b.n	8004a8a <memset+0x4>
	...

08004a98 <_localeconv_r>:
 8004a98:	4800      	ldr	r0, [pc, #0]	@ (8004a9c <_localeconv_r+0x4>)
 8004a9a:	4770      	bx	lr
 8004a9c:	20000160 	.word	0x20000160

08004aa0 <_close_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d06      	ldr	r5, [pc, #24]	@ (8004abc <_close_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fd f877 	bl	8001b9e <_close>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_close_r+0x1a>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_close_r+0x1a>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	20000490 	.word	0x20000490

08004ac0 <_lseek_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d07      	ldr	r5, [pc, #28]	@ (8004ae0 <_lseek_r+0x20>)
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fd f88c 	bl	8001bec <_lseek>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_lseek_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_lseek_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000490 	.word	0x20000490

08004ae4 <_read_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	@ (8004b04 <_read_r+0x20>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fd f81a 	bl	8001b2c <_read>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_read_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_read_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	20000490 	.word	0x20000490

08004b08 <_write_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	@ (8004b28 <_write_r+0x20>)
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4608      	mov	r0, r1
 8004b10:	4611      	mov	r1, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f7fd f825 	bl	8001b66 <_write>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_write_r+0x1e>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_write_r+0x1e>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	20000490 	.word	0x20000490

08004b2c <__errno>:
 8004b2c:	4b01      	ldr	r3, [pc, #4]	@ (8004b34 <__errno+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000020 	.word	0x20000020

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	@ (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f002 fad0 	bl	80070f0 <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08007558 	.word	0x08007558
 8004b74:	08007558 	.word	0x08007558
 8004b78:	08007558 	.word	0x08007558
 8004b7c:	0800755c 	.word	0x0800755c

08004b80 <__retarget_lock_init_recursive>:
 8004b80:	4770      	bx	lr

08004b82 <__retarget_lock_acquire_recursive>:
 8004b82:	4770      	bx	lr

08004b84 <__retarget_lock_release_recursive>:
 8004b84:	4770      	bx	lr

08004b86 <quorem>:
 8004b86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	6903      	ldr	r3, [r0, #16]
 8004b8c:	690c      	ldr	r4, [r1, #16]
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	4607      	mov	r7, r0
 8004b92:	db7e      	blt.n	8004c92 <quorem+0x10c>
 8004b94:	3c01      	subs	r4, #1
 8004b96:	f101 0814 	add.w	r8, r1, #20
 8004b9a:	00a3      	lsls	r3, r4, #2
 8004b9c:	f100 0514 	add.w	r5, r0, #20
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bbc:	d32e      	bcc.n	8004c1c <quorem+0x96>
 8004bbe:	f04f 0a00 	mov.w	sl, #0
 8004bc2:	46c4      	mov	ip, r8
 8004bc4:	46ae      	mov	lr, r5
 8004bc6:	46d3      	mov	fp, sl
 8004bc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bcc:	b298      	uxth	r0, r3
 8004bce:	fb06 a000 	mla	r0, r6, r0, sl
 8004bd2:	0c02      	lsrs	r2, r0, #16
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	fb06 2303 	mla	r3, r6, r3, r2
 8004bda:	f8de 2000 	ldr.w	r2, [lr]
 8004bde:	b280      	uxth	r0, r0
 8004be0:	b292      	uxth	r2, r2
 8004be2:	1a12      	subs	r2, r2, r0
 8004be4:	445a      	add	r2, fp
 8004be6:	f8de 0000 	ldr.w	r0, [lr]
 8004bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bfe:	45e1      	cmp	r9, ip
 8004c00:	f84e 2b04 	str.w	r2, [lr], #4
 8004c04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c08:	d2de      	bcs.n	8004bc8 <quorem+0x42>
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	58eb      	ldr	r3, [r5, r3]
 8004c0e:	b92b      	cbnz	r3, 8004c1c <quorem+0x96>
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	3b04      	subs	r3, #4
 8004c14:	429d      	cmp	r5, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	d32f      	bcc.n	8004c7a <quorem+0xf4>
 8004c1a:	613c      	str	r4, [r7, #16]
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f001 f979 	bl	8005f14 <__mcmp>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	db25      	blt.n	8004c72 <quorem+0xec>
 8004c26:	4629      	mov	r1, r5
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c2e:	f8d1 c000 	ldr.w	ip, [r1]
 8004c32:	fa1f fe82 	uxth.w	lr, r2
 8004c36:	fa1f f38c 	uxth.w	r3, ip
 8004c3a:	eba3 030e 	sub.w	r3, r3, lr
 8004c3e:	4403      	add	r3, r0
 8004c40:	0c12      	lsrs	r2, r2, #16
 8004c42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c50:	45c1      	cmp	r9, r8
 8004c52:	f841 3b04 	str.w	r3, [r1], #4
 8004c56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c5a:	d2e6      	bcs.n	8004c2a <quorem+0xa4>
 8004c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c64:	b922      	cbnz	r2, 8004c70 <quorem+0xea>
 8004c66:	3b04      	subs	r3, #4
 8004c68:	429d      	cmp	r5, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	d30b      	bcc.n	8004c86 <quorem+0x100>
 8004c6e:	613c      	str	r4, [r7, #16]
 8004c70:	3601      	adds	r6, #1
 8004c72:	4630      	mov	r0, r6
 8004c74:	b003      	add	sp, #12
 8004c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d1cb      	bne.n	8004c1a <quorem+0x94>
 8004c82:	3c01      	subs	r4, #1
 8004c84:	e7c6      	b.n	8004c14 <quorem+0x8e>
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	d1ef      	bne.n	8004c6e <quorem+0xe8>
 8004c8e:	3c01      	subs	r4, #1
 8004c90:	e7ea      	b.n	8004c68 <quorem+0xe2>
 8004c92:	2000      	movs	r0, #0
 8004c94:	e7ee      	b.n	8004c74 <quorem+0xee>
	...

08004c98 <_dtoa_r>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	69c7      	ldr	r7, [r0, #28]
 8004c9e:	b099      	sub	sp, #100	@ 0x64
 8004ca0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ca4:	ec55 4b10 	vmov	r4, r5, d0
 8004ca8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004caa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cac:	4683      	mov	fp, r0
 8004cae:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004cb2:	b97f      	cbnz	r7, 8004cd4 <_dtoa_r+0x3c>
 8004cb4:	2010      	movs	r0, #16
 8004cb6:	f000 fdfd 	bl	80058b4 <malloc>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8004cc0:	b920      	cbnz	r0, 8004ccc <_dtoa_r+0x34>
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f60 <_dtoa_r+0x2c8>)
 8004cc4:	21ef      	movs	r1, #239	@ 0xef
 8004cc6:	48a7      	ldr	r0, [pc, #668]	@ (8004f64 <_dtoa_r+0x2cc>)
 8004cc8:	f001 fc68 	bl	800659c <__assert_func>
 8004ccc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004cd0:	6007      	str	r7, [r0, #0]
 8004cd2:	60c7      	str	r7, [r0, #12]
 8004cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	b159      	cbz	r1, 8004cf4 <_dtoa_r+0x5c>
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	604a      	str	r2, [r1, #4]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4093      	lsls	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	f000 feda 	bl	8005aa0 <_Bfree>
 8004cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	1e2b      	subs	r3, r5, #0
 8004cf6:	bfb9      	ittee	lt
 8004cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004cfc:	9303      	strlt	r3, [sp, #12]
 8004cfe:	2300      	movge	r3, #0
 8004d00:	6033      	strge	r3, [r6, #0]
 8004d02:	9f03      	ldr	r7, [sp, #12]
 8004d04:	4b98      	ldr	r3, [pc, #608]	@ (8004f68 <_dtoa_r+0x2d0>)
 8004d06:	bfbc      	itt	lt
 8004d08:	2201      	movlt	r2, #1
 8004d0a:	6032      	strlt	r2, [r6, #0]
 8004d0c:	43bb      	bics	r3, r7
 8004d0e:	d112      	bne.n	8004d36 <_dtoa_r+0x9e>
 8004d10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004d12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d1c:	4323      	orrs	r3, r4
 8004d1e:	f000 854d 	beq.w	80057bc <_dtoa_r+0xb24>
 8004d22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004f7c <_dtoa_r+0x2e4>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 854f 	beq.w	80057cc <_dtoa_r+0xb34>
 8004d2e:	f10a 0303 	add.w	r3, sl, #3
 8004d32:	f000 bd49 	b.w	80057c8 <_dtoa_r+0xb30>
 8004d36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	ec51 0b17 	vmov	r0, r1, d7
 8004d40:	2300      	movs	r3, #0
 8004d42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004d46:	f7fb fec7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	b158      	cbz	r0, 8004d66 <_dtoa_r+0xce>
 8004d4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004d50:	2301      	movs	r3, #1
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d56:	b113      	cbz	r3, 8004d5e <_dtoa_r+0xc6>
 8004d58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004d5a:	4b84      	ldr	r3, [pc, #528]	@ (8004f6c <_dtoa_r+0x2d4>)
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004f80 <_dtoa_r+0x2e8>
 8004d62:	f000 bd33 	b.w	80057cc <_dtoa_r+0xb34>
 8004d66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004d6a:	aa16      	add	r2, sp, #88	@ 0x58
 8004d6c:	a917      	add	r1, sp, #92	@ 0x5c
 8004d6e:	4658      	mov	r0, fp
 8004d70:	f001 f980 	bl	8006074 <__d2b>
 8004d74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004d78:	4681      	mov	r9, r0
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d077      	beq.n	8004e6e <_dtoa_r+0x1d6>
 8004d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d98:	4619      	mov	r1, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b74      	ldr	r3, [pc, #464]	@ (8004f70 <_dtoa_r+0x2d8>)
 8004d9e:	f7fb fa7b 	bl	8000298 <__aeabi_dsub>
 8004da2:	a369      	add	r3, pc, #420	@ (adr r3, 8004f48 <_dtoa_r+0x2b0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fc2e 	bl	8000608 <__aeabi_dmul>
 8004dac:	a368      	add	r3, pc, #416	@ (adr r3, 8004f50 <_dtoa_r+0x2b8>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa73 	bl	800029c <__adddf3>
 8004db6:	4604      	mov	r4, r0
 8004db8:	4630      	mov	r0, r6
 8004dba:	460d      	mov	r5, r1
 8004dbc:	f7fb fbba 	bl	8000534 <__aeabi_i2d>
 8004dc0:	a365      	add	r3, pc, #404	@ (adr r3, 8004f58 <_dtoa_r+0x2c0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fc1f 	bl	8000608 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fa63 	bl	800029c <__adddf3>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	460d      	mov	r5, r1
 8004dda:	f7fb fec5 	bl	8000b68 <__aeabi_d2iz>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4607      	mov	r7, r0
 8004de2:	2300      	movs	r3, #0
 8004de4:	4620      	mov	r0, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb fe80 	bl	8000aec <__aeabi_dcmplt>
 8004dec:	b140      	cbz	r0, 8004e00 <_dtoa_r+0x168>
 8004dee:	4638      	mov	r0, r7
 8004df0:	f7fb fba0 	bl	8000534 <__aeabi_i2d>
 8004df4:	4622      	mov	r2, r4
 8004df6:	462b      	mov	r3, r5
 8004df8:	f7fb fe6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dfc:	b900      	cbnz	r0, 8004e00 <_dtoa_r+0x168>
 8004dfe:	3f01      	subs	r7, #1
 8004e00:	2f16      	cmp	r7, #22
 8004e02:	d851      	bhi.n	8004ea8 <_dtoa_r+0x210>
 8004e04:	4b5b      	ldr	r3, [pc, #364]	@ (8004f74 <_dtoa_r+0x2dc>)
 8004e06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e12:	f7fb fe6b 	bl	8000aec <__aeabi_dcmplt>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d048      	beq.n	8004eac <_dtoa_r+0x214>
 8004e1a:	3f01      	subs	r7, #1
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004e20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e22:	1b9b      	subs	r3, r3, r6
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	bf44      	itt	mi
 8004e28:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e2c:	2300      	movmi	r3, #0
 8004e2e:	9208      	str	r2, [sp, #32]
 8004e30:	bf54      	ite	pl
 8004e32:	f04f 0800 	movpl.w	r8, #0
 8004e36:	9308      	strmi	r3, [sp, #32]
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	db39      	blt.n	8004eb0 <_dtoa_r+0x218>
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004e40:	443b      	add	r3, r7
 8004e42:	9308      	str	r3, [sp, #32]
 8004e44:	2300      	movs	r3, #0
 8004e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d864      	bhi.n	8004f18 <_dtoa_r+0x280>
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	bfc4      	itt	gt
 8004e52:	3b04      	subgt	r3, #4
 8004e54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e58:	f1a3 0302 	sub.w	r3, r3, #2
 8004e5c:	bfcc      	ite	gt
 8004e5e:	2400      	movgt	r4, #0
 8004e60:	2401      	movle	r4, #1
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d863      	bhi.n	8004f2e <_dtoa_r+0x296>
 8004e66:	e8df f003 	tbb	[pc, r3]
 8004e6a:	372a      	.short	0x372a
 8004e6c:	5535      	.short	0x5535
 8004e6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004e72:	441e      	add	r6, r3
 8004e74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	bfc1      	itttt	gt
 8004e7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e80:	409f      	lslgt	r7, r3
 8004e82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e8a:	bfd6      	itet	le
 8004e8c:	f1c3 0320 	rsble	r3, r3, #32
 8004e90:	ea47 0003 	orrgt.w	r0, r7, r3
 8004e94:	fa04 f003 	lslle.w	r0, r4, r3
 8004e98:	f7fb fb3c 	bl	8000514 <__aeabi_ui2d>
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ea2:	3e01      	subs	r6, #1
 8004ea4:	9214      	str	r2, [sp, #80]	@ 0x50
 8004ea6:	e777      	b.n	8004d98 <_dtoa_r+0x100>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7b8      	b.n	8004e1e <_dtoa_r+0x186>
 8004eac:	9012      	str	r0, [sp, #72]	@ 0x48
 8004eae:	e7b7      	b.n	8004e20 <_dtoa_r+0x188>
 8004eb0:	427b      	negs	r3, r7
 8004eb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	eba8 0807 	sub.w	r8, r8, r7
 8004eba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ebc:	e7c4      	b.n	8004e48 <_dtoa_r+0x1b0>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc35      	bgt.n	8004f34 <_dtoa_r+0x29c>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	9307      	str	r3, [sp, #28]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ed2:	e00b      	b.n	8004eec <_dtoa_r+0x254>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e7f3      	b.n	8004ec0 <_dtoa_r+0x228>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	9307      	str	r3, [sp, #28]
 8004ee8:	bfb8      	it	lt
 8004eea:	2301      	movlt	r3, #1
 8004eec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f102 0514 	add.w	r5, r2, #20
 8004ef8:	429d      	cmp	r5, r3
 8004efa:	d91f      	bls.n	8004f3c <_dtoa_r+0x2a4>
 8004efc:	6041      	str	r1, [r0, #4]
 8004efe:	4658      	mov	r0, fp
 8004f00:	f000 fd8e 	bl	8005a20 <_Balloc>
 8004f04:	4682      	mov	sl, r0
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d13c      	bne.n	8004f84 <_dtoa_r+0x2ec>
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <_dtoa_r+0x2e0>)
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f12:	e6d8      	b.n	8004cc6 <_dtoa_r+0x2e>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7e0      	b.n	8004eda <_dtoa_r+0x242>
 8004f18:	2401      	movs	r4, #1
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2312      	movs	r3, #18
 8004f2c:	e7d0      	b.n	8004ed0 <_dtoa_r+0x238>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f32:	e7f5      	b.n	8004f20 <_dtoa_r+0x288>
 8004f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	9307      	str	r3, [sp, #28]
 8004f3a:	e7d7      	b.n	8004eec <_dtoa_r+0x254>
 8004f3c:	3101      	adds	r1, #1
 8004f3e:	0052      	lsls	r2, r2, #1
 8004f40:	e7d8      	b.n	8004ef4 <_dtoa_r+0x25c>
 8004f42:	bf00      	nop
 8004f44:	f3af 8000 	nop.w
 8004f48:	636f4361 	.word	0x636f4361
 8004f4c:	3fd287a7 	.word	0x3fd287a7
 8004f50:	8b60c8b3 	.word	0x8b60c8b3
 8004f54:	3fc68a28 	.word	0x3fc68a28
 8004f58:	509f79fb 	.word	0x509f79fb
 8004f5c:	3fd34413 	.word	0x3fd34413
 8004f60:	080071ad 	.word	0x080071ad
 8004f64:	080071c4 	.word	0x080071c4
 8004f68:	7ff00000 	.word	0x7ff00000
 8004f6c:	0800717d 	.word	0x0800717d
 8004f70:	3ff80000 	.word	0x3ff80000
 8004f74:	080072c0 	.word	0x080072c0
 8004f78:	0800721c 	.word	0x0800721c
 8004f7c:	080071a9 	.word	0x080071a9
 8004f80:	0800717c 	.word	0x0800717c
 8004f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f88:	6018      	str	r0, [r3, #0]
 8004f8a:	9b07      	ldr	r3, [sp, #28]
 8004f8c:	2b0e      	cmp	r3, #14
 8004f8e:	f200 80a4 	bhi.w	80050da <_dtoa_r+0x442>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	f000 80a1 	beq.w	80050da <_dtoa_r+0x442>
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	dd33      	ble.n	8005004 <_dtoa_r+0x36c>
 8004f9c:	4bad      	ldr	r3, [pc, #692]	@ (8005254 <_dtoa_r+0x5bc>)
 8004f9e:	f007 020f 	and.w	r2, r7, #15
 8004fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fa6:	ed93 7b00 	vldr	d7, [r3]
 8004faa:	05f8      	lsls	r0, r7, #23
 8004fac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004fb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004fb4:	d516      	bpl.n	8004fe4 <_dtoa_r+0x34c>
 8004fb6:	4ba8      	ldr	r3, [pc, #672]	@ (8005258 <_dtoa_r+0x5c0>)
 8004fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fc0:	f7fb fc4c 	bl	800085c <__aeabi_ddiv>
 8004fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc8:	f004 040f 	and.w	r4, r4, #15
 8004fcc:	2603      	movs	r6, #3
 8004fce:	4da2      	ldr	r5, [pc, #648]	@ (8005258 <_dtoa_r+0x5c0>)
 8004fd0:	b954      	cbnz	r4, 8004fe8 <_dtoa_r+0x350>
 8004fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fda:	f7fb fc3f 	bl	800085c <__aeabi_ddiv>
 8004fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe2:	e028      	b.n	8005036 <_dtoa_r+0x39e>
 8004fe4:	2602      	movs	r6, #2
 8004fe6:	e7f2      	b.n	8004fce <_dtoa_r+0x336>
 8004fe8:	07e1      	lsls	r1, r4, #31
 8004fea:	d508      	bpl.n	8004ffe <_dtoa_r+0x366>
 8004fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ff4:	f7fb fb08 	bl	8000608 <__aeabi_dmul>
 8004ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	1064      	asrs	r4, r4, #1
 8005000:	3508      	adds	r5, #8
 8005002:	e7e5      	b.n	8004fd0 <_dtoa_r+0x338>
 8005004:	f000 80d2 	beq.w	80051ac <_dtoa_r+0x514>
 8005008:	427c      	negs	r4, r7
 800500a:	4b92      	ldr	r3, [pc, #584]	@ (8005254 <_dtoa_r+0x5bc>)
 800500c:	4d92      	ldr	r5, [pc, #584]	@ (8005258 <_dtoa_r+0x5c0>)
 800500e:	f004 020f 	and.w	r2, r4, #15
 8005012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800501e:	f7fb faf3 	bl	8000608 <__aeabi_dmul>
 8005022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005026:	1124      	asrs	r4, r4, #4
 8005028:	2300      	movs	r3, #0
 800502a:	2602      	movs	r6, #2
 800502c:	2c00      	cmp	r4, #0
 800502e:	f040 80b2 	bne.w	8005196 <_dtoa_r+0x4fe>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1d3      	bne.n	8004fde <_dtoa_r+0x346>
 8005036:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005038:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80b7 	beq.w	80051b0 <_dtoa_r+0x518>
 8005042:	4b86      	ldr	r3, [pc, #536]	@ (800525c <_dtoa_r+0x5c4>)
 8005044:	2200      	movs	r2, #0
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb fd4f 	bl	8000aec <__aeabi_dcmplt>
 800504e:	2800      	cmp	r0, #0
 8005050:	f000 80ae 	beq.w	80051b0 <_dtoa_r+0x518>
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80aa 	beq.w	80051b0 <_dtoa_r+0x518>
 800505c:	9b00      	ldr	r3, [sp, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dd37      	ble.n	80050d2 <_dtoa_r+0x43a>
 8005062:	1e7b      	subs	r3, r7, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	4620      	mov	r0, r4
 8005068:	4b7d      	ldr	r3, [pc, #500]	@ (8005260 <_dtoa_r+0x5c8>)
 800506a:	2200      	movs	r2, #0
 800506c:	4629      	mov	r1, r5
 800506e:	f7fb facb 	bl	8000608 <__aeabi_dmul>
 8005072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005076:	9c00      	ldr	r4, [sp, #0]
 8005078:	3601      	adds	r6, #1
 800507a:	4630      	mov	r0, r6
 800507c:	f7fb fa5a 	bl	8000534 <__aeabi_i2d>
 8005080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005084:	f7fb fac0 	bl	8000608 <__aeabi_dmul>
 8005088:	4b76      	ldr	r3, [pc, #472]	@ (8005264 <_dtoa_r+0x5cc>)
 800508a:	2200      	movs	r2, #0
 800508c:	f7fb f906 	bl	800029c <__adddf3>
 8005090:	4605      	mov	r5, r0
 8005092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005096:	2c00      	cmp	r4, #0
 8005098:	f040 808d 	bne.w	80051b6 <_dtoa_r+0x51e>
 800509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a0:	4b71      	ldr	r3, [pc, #452]	@ (8005268 <_dtoa_r+0x5d0>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	f7fb f8f8 	bl	8000298 <__aeabi_dsub>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050b0:	462a      	mov	r2, r5
 80050b2:	4633      	mov	r3, r6
 80050b4:	f7fb fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 828b 	bne.w	80055d4 <_dtoa_r+0x93c>
 80050be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c2:	462a      	mov	r2, r5
 80050c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050c8:	f7fb fd10 	bl	8000aec <__aeabi_dcmplt>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f040 8128 	bne.w	8005322 <_dtoa_r+0x68a>
 80050d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80050d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80050da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f2c0 815a 	blt.w	8005396 <_dtoa_r+0x6fe>
 80050e2:	2f0e      	cmp	r7, #14
 80050e4:	f300 8157 	bgt.w	8005396 <_dtoa_r+0x6fe>
 80050e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005254 <_dtoa_r+0x5bc>)
 80050ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050ee:	ed93 7b00 	vldr	d7, [r3]
 80050f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	ed8d 7b00 	vstr	d7, [sp]
 80050fa:	da03      	bge.n	8005104 <_dtoa_r+0x46c>
 80050fc:	9b07      	ldr	r3, [sp, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f340 8101 	ble.w	8005306 <_dtoa_r+0x66e>
 8005104:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005108:	4656      	mov	r6, sl
 800510a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb fba3 	bl	800085c <__aeabi_ddiv>
 8005116:	f7fb fd27 	bl	8000b68 <__aeabi_d2iz>
 800511a:	4680      	mov	r8, r0
 800511c:	f7fb fa0a 	bl	8000534 <__aeabi_i2d>
 8005120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005134:	f7fb f8b0 	bl	8000298 <__aeabi_dsub>
 8005138:	f806 4b01 	strb.w	r4, [r6], #1
 800513c:	9d07      	ldr	r5, [sp, #28]
 800513e:	eba6 040a 	sub.w	r4, r6, sl
 8005142:	42a5      	cmp	r5, r4
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	f040 8117 	bne.w	800537a <_dtoa_r+0x6e2>
 800514c:	f7fb f8a6 	bl	800029c <__adddf3>
 8005150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005154:	4604      	mov	r4, r0
 8005156:	460d      	mov	r5, r1
 8005158:	f7fb fce6 	bl	8000b28 <__aeabi_dcmpgt>
 800515c:	2800      	cmp	r0, #0
 800515e:	f040 80f9 	bne.w	8005354 <_dtoa_r+0x6bc>
 8005162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800516e:	b118      	cbz	r0, 8005178 <_dtoa_r+0x4e0>
 8005170:	f018 0f01 	tst.w	r8, #1
 8005174:	f040 80ee 	bne.w	8005354 <_dtoa_r+0x6bc>
 8005178:	4649      	mov	r1, r9
 800517a:	4658      	mov	r0, fp
 800517c:	f000 fc90 	bl	8005aa0 <_Bfree>
 8005180:	2300      	movs	r3, #0
 8005182:	7033      	strb	r3, [r6, #0]
 8005184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005186:	3701      	adds	r7, #1
 8005188:	601f      	str	r7, [r3, #0]
 800518a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 831d 	beq.w	80057cc <_dtoa_r+0xb34>
 8005192:	601e      	str	r6, [r3, #0]
 8005194:	e31a      	b.n	80057cc <_dtoa_r+0xb34>
 8005196:	07e2      	lsls	r2, r4, #31
 8005198:	d505      	bpl.n	80051a6 <_dtoa_r+0x50e>
 800519a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800519e:	f7fb fa33 	bl	8000608 <__aeabi_dmul>
 80051a2:	3601      	adds	r6, #1
 80051a4:	2301      	movs	r3, #1
 80051a6:	1064      	asrs	r4, r4, #1
 80051a8:	3508      	adds	r5, #8
 80051aa:	e73f      	b.n	800502c <_dtoa_r+0x394>
 80051ac:	2602      	movs	r6, #2
 80051ae:	e742      	b.n	8005036 <_dtoa_r+0x39e>
 80051b0:	9c07      	ldr	r4, [sp, #28]
 80051b2:	9704      	str	r7, [sp, #16]
 80051b4:	e761      	b.n	800507a <_dtoa_r+0x3e2>
 80051b6:	4b27      	ldr	r3, [pc, #156]	@ (8005254 <_dtoa_r+0x5bc>)
 80051b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051c2:	4454      	add	r4, sl
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d053      	beq.n	8005270 <_dtoa_r+0x5d8>
 80051c8:	4928      	ldr	r1, [pc, #160]	@ (800526c <_dtoa_r+0x5d4>)
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fb fb46 	bl	800085c <__aeabi_ddiv>
 80051d0:	4633      	mov	r3, r6
 80051d2:	462a      	mov	r2, r5
 80051d4:	f7fb f860 	bl	8000298 <__aeabi_dsub>
 80051d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051dc:	4656      	mov	r6, sl
 80051de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e2:	f7fb fcc1 	bl	8000b68 <__aeabi_d2iz>
 80051e6:	4605      	mov	r5, r0
 80051e8:	f7fb f9a4 	bl	8000534 <__aeabi_i2d>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f4:	f7fb f850 	bl	8000298 <__aeabi_dsub>
 80051f8:	3530      	adds	r5, #48	@ 0x30
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005202:	f806 5b01 	strb.w	r5, [r6], #1
 8005206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800520a:	f7fb fc6f 	bl	8000aec <__aeabi_dcmplt>
 800520e:	2800      	cmp	r0, #0
 8005210:	d171      	bne.n	80052f6 <_dtoa_r+0x65e>
 8005212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005216:	4911      	ldr	r1, [pc, #68]	@ (800525c <_dtoa_r+0x5c4>)
 8005218:	2000      	movs	r0, #0
 800521a:	f7fb f83d 	bl	8000298 <__aeabi_dsub>
 800521e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005222:	f7fb fc63 	bl	8000aec <__aeabi_dcmplt>
 8005226:	2800      	cmp	r0, #0
 8005228:	f040 8095 	bne.w	8005356 <_dtoa_r+0x6be>
 800522c:	42a6      	cmp	r6, r4
 800522e:	f43f af50 	beq.w	80050d2 <_dtoa_r+0x43a>
 8005232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <_dtoa_r+0x5c8>)
 8005238:	2200      	movs	r2, #0
 800523a:	f7fb f9e5 	bl	8000608 <__aeabi_dmul>
 800523e:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <_dtoa_r+0x5c8>)
 8005240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005244:	2200      	movs	r2, #0
 8005246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800524a:	f7fb f9dd 	bl	8000608 <__aeabi_dmul>
 800524e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005252:	e7c4      	b.n	80051de <_dtoa_r+0x546>
 8005254:	080072c0 	.word	0x080072c0
 8005258:	08007298 	.word	0x08007298
 800525c:	3ff00000 	.word	0x3ff00000
 8005260:	40240000 	.word	0x40240000
 8005264:	401c0000 	.word	0x401c0000
 8005268:	40140000 	.word	0x40140000
 800526c:	3fe00000 	.word	0x3fe00000
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	f7fb f9c8 	bl	8000608 <__aeabi_dmul>
 8005278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800527c:	9415      	str	r4, [sp, #84]	@ 0x54
 800527e:	4656      	mov	r6, sl
 8005280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005284:	f7fb fc70 	bl	8000b68 <__aeabi_d2iz>
 8005288:	4605      	mov	r5, r0
 800528a:	f7fb f953 	bl	8000534 <__aeabi_i2d>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005296:	f7fa ffff 	bl	8000298 <__aeabi_dsub>
 800529a:	3530      	adds	r5, #48	@ 0x30
 800529c:	f806 5b01 	strb.w	r5, [r6], #1
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	d124      	bne.n	80052fa <_dtoa_r+0x662>
 80052b0:	4bac      	ldr	r3, [pc, #688]	@ (8005564 <_dtoa_r+0x8cc>)
 80052b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052b6:	f7fa fff1 	bl	800029c <__adddf3>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c2:	f7fb fc31 	bl	8000b28 <__aeabi_dcmpgt>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d145      	bne.n	8005356 <_dtoa_r+0x6be>
 80052ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052ce:	49a5      	ldr	r1, [pc, #660]	@ (8005564 <_dtoa_r+0x8cc>)
 80052d0:	2000      	movs	r0, #0
 80052d2:	f7fa ffe1 	bl	8000298 <__aeabi_dsub>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052de:	f7fb fc05 	bl	8000aec <__aeabi_dcmplt>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f43f aef5 	beq.w	80050d2 <_dtoa_r+0x43a>
 80052e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80052ea:	1e73      	subs	r3, r6, #1
 80052ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80052ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052f2:	2b30      	cmp	r3, #48	@ 0x30
 80052f4:	d0f8      	beq.n	80052e8 <_dtoa_r+0x650>
 80052f6:	9f04      	ldr	r7, [sp, #16]
 80052f8:	e73e      	b.n	8005178 <_dtoa_r+0x4e0>
 80052fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005568 <_dtoa_r+0x8d0>)
 80052fc:	f7fb f984 	bl	8000608 <__aeabi_dmul>
 8005300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005304:	e7bc      	b.n	8005280 <_dtoa_r+0x5e8>
 8005306:	d10c      	bne.n	8005322 <_dtoa_r+0x68a>
 8005308:	4b98      	ldr	r3, [pc, #608]	@ (800556c <_dtoa_r+0x8d4>)
 800530a:	2200      	movs	r2, #0
 800530c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005310:	f7fb f97a 	bl	8000608 <__aeabi_dmul>
 8005314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005318:	f7fb fbfc 	bl	8000b14 <__aeabi_dcmpge>
 800531c:	2800      	cmp	r0, #0
 800531e:	f000 8157 	beq.w	80055d0 <_dtoa_r+0x938>
 8005322:	2400      	movs	r4, #0
 8005324:	4625      	mov	r5, r4
 8005326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005328:	43db      	mvns	r3, r3
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	4656      	mov	r6, sl
 800532e:	2700      	movs	r7, #0
 8005330:	4621      	mov	r1, r4
 8005332:	4658      	mov	r0, fp
 8005334:	f000 fbb4 	bl	8005aa0 <_Bfree>
 8005338:	2d00      	cmp	r5, #0
 800533a:	d0dc      	beq.n	80052f6 <_dtoa_r+0x65e>
 800533c:	b12f      	cbz	r7, 800534a <_dtoa_r+0x6b2>
 800533e:	42af      	cmp	r7, r5
 8005340:	d003      	beq.n	800534a <_dtoa_r+0x6b2>
 8005342:	4639      	mov	r1, r7
 8005344:	4658      	mov	r0, fp
 8005346:	f000 fbab 	bl	8005aa0 <_Bfree>
 800534a:	4629      	mov	r1, r5
 800534c:	4658      	mov	r0, fp
 800534e:	f000 fba7 	bl	8005aa0 <_Bfree>
 8005352:	e7d0      	b.n	80052f6 <_dtoa_r+0x65e>
 8005354:	9704      	str	r7, [sp, #16]
 8005356:	4633      	mov	r3, r6
 8005358:	461e      	mov	r6, r3
 800535a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800535e:	2a39      	cmp	r2, #57	@ 0x39
 8005360:	d107      	bne.n	8005372 <_dtoa_r+0x6da>
 8005362:	459a      	cmp	sl, r3
 8005364:	d1f8      	bne.n	8005358 <_dtoa_r+0x6c0>
 8005366:	9a04      	ldr	r2, [sp, #16]
 8005368:	3201      	adds	r2, #1
 800536a:	9204      	str	r2, [sp, #16]
 800536c:	2230      	movs	r2, #48	@ 0x30
 800536e:	f88a 2000 	strb.w	r2, [sl]
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	3201      	adds	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e7bd      	b.n	80052f6 <_dtoa_r+0x65e>
 800537a:	4b7b      	ldr	r3, [pc, #492]	@ (8005568 <_dtoa_r+0x8d0>)
 800537c:	2200      	movs	r2, #0
 800537e:	f7fb f943 	bl	8000608 <__aeabi_dmul>
 8005382:	2200      	movs	r2, #0
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	460d      	mov	r5, r1
 800538a:	f7fb fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800538e:	2800      	cmp	r0, #0
 8005390:	f43f aebb 	beq.w	800510a <_dtoa_r+0x472>
 8005394:	e6f0      	b.n	8005178 <_dtoa_r+0x4e0>
 8005396:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005398:	2a00      	cmp	r2, #0
 800539a:	f000 80db 	beq.w	8005554 <_dtoa_r+0x8bc>
 800539e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a0:	2a01      	cmp	r2, #1
 80053a2:	f300 80bf 	bgt.w	8005524 <_dtoa_r+0x88c>
 80053a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	f000 80b7 	beq.w	800551c <_dtoa_r+0x884>
 80053ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80053b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053b4:	4646      	mov	r6, r8
 80053b6:	9a08      	ldr	r2, [sp, #32]
 80053b8:	2101      	movs	r1, #1
 80053ba:	441a      	add	r2, r3
 80053bc:	4658      	mov	r0, fp
 80053be:	4498      	add	r8, r3
 80053c0:	9208      	str	r2, [sp, #32]
 80053c2:	f000 fc21 	bl	8005c08 <__i2b>
 80053c6:	4605      	mov	r5, r0
 80053c8:	b15e      	cbz	r6, 80053e2 <_dtoa_r+0x74a>
 80053ca:	9b08      	ldr	r3, [sp, #32]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dd08      	ble.n	80053e2 <_dtoa_r+0x74a>
 80053d0:	42b3      	cmp	r3, r6
 80053d2:	9a08      	ldr	r2, [sp, #32]
 80053d4:	bfa8      	it	ge
 80053d6:	4633      	movge	r3, r6
 80053d8:	eba8 0803 	sub.w	r8, r8, r3
 80053dc:	1af6      	subs	r6, r6, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	9308      	str	r3, [sp, #32]
 80053e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e4:	b1f3      	cbz	r3, 8005424 <_dtoa_r+0x78c>
 80053e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80b7 	beq.w	800555c <_dtoa_r+0x8c4>
 80053ee:	b18c      	cbz	r4, 8005414 <_dtoa_r+0x77c>
 80053f0:	4629      	mov	r1, r5
 80053f2:	4622      	mov	r2, r4
 80053f4:	4658      	mov	r0, fp
 80053f6:	f000 fcc7 	bl	8005d88 <__pow5mult>
 80053fa:	464a      	mov	r2, r9
 80053fc:	4601      	mov	r1, r0
 80053fe:	4605      	mov	r5, r0
 8005400:	4658      	mov	r0, fp
 8005402:	f000 fc17 	bl	8005c34 <__multiply>
 8005406:	4649      	mov	r1, r9
 8005408:	9004      	str	r0, [sp, #16]
 800540a:	4658      	mov	r0, fp
 800540c:	f000 fb48 	bl	8005aa0 <_Bfree>
 8005410:	9b04      	ldr	r3, [sp, #16]
 8005412:	4699      	mov	r9, r3
 8005414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005416:	1b1a      	subs	r2, r3, r4
 8005418:	d004      	beq.n	8005424 <_dtoa_r+0x78c>
 800541a:	4649      	mov	r1, r9
 800541c:	4658      	mov	r0, fp
 800541e:	f000 fcb3 	bl	8005d88 <__pow5mult>
 8005422:	4681      	mov	r9, r0
 8005424:	2101      	movs	r1, #1
 8005426:	4658      	mov	r0, fp
 8005428:	f000 fbee 	bl	8005c08 <__i2b>
 800542c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800542e:	4604      	mov	r4, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 81cf 	beq.w	80057d4 <_dtoa_r+0xb3c>
 8005436:	461a      	mov	r2, r3
 8005438:	4601      	mov	r1, r0
 800543a:	4658      	mov	r0, fp
 800543c:	f000 fca4 	bl	8005d88 <__pow5mult>
 8005440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005442:	2b01      	cmp	r3, #1
 8005444:	4604      	mov	r4, r0
 8005446:	f300 8095 	bgt.w	8005574 <_dtoa_r+0x8dc>
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 8087 	bne.w	8005560 <_dtoa_r+0x8c8>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 8089 	bne.w	8005570 <_dtoa_r+0x8d8>
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005464:	0d1b      	lsrs	r3, r3, #20
 8005466:	051b      	lsls	r3, r3, #20
 8005468:	b12b      	cbz	r3, 8005476 <_dtoa_r+0x7de>
 800546a:	9b08      	ldr	r3, [sp, #32]
 800546c:	3301      	adds	r3, #1
 800546e:	9308      	str	r3, [sp, #32]
 8005470:	f108 0801 	add.w	r8, r8, #1
 8005474:	2301      	movs	r3, #1
 8005476:	930a      	str	r3, [sp, #40]	@ 0x28
 8005478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 81b0 	beq.w	80057e0 <_dtoa_r+0xb48>
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005486:	6918      	ldr	r0, [r3, #16]
 8005488:	f000 fb72 	bl	8005b70 <__hi0bits>
 800548c:	f1c0 0020 	rsb	r0, r0, #32
 8005490:	9b08      	ldr	r3, [sp, #32]
 8005492:	4418      	add	r0, r3
 8005494:	f010 001f 	ands.w	r0, r0, #31
 8005498:	d077      	beq.n	800558a <_dtoa_r+0x8f2>
 800549a:	f1c0 0320 	rsb	r3, r0, #32
 800549e:	2b04      	cmp	r3, #4
 80054a0:	dd6b      	ble.n	800557a <_dtoa_r+0x8e2>
 80054a2:	9b08      	ldr	r3, [sp, #32]
 80054a4:	f1c0 001c 	rsb	r0, r0, #28
 80054a8:	4403      	add	r3, r0
 80054aa:	4480      	add	r8, r0
 80054ac:	4406      	add	r6, r0
 80054ae:	9308      	str	r3, [sp, #32]
 80054b0:	f1b8 0f00 	cmp.w	r8, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x82a>
 80054b6:	4649      	mov	r1, r9
 80054b8:	4642      	mov	r2, r8
 80054ba:	4658      	mov	r0, fp
 80054bc:	f000 fcbe 	bl	8005e3c <__lshift>
 80054c0:	4681      	mov	r9, r0
 80054c2:	9b08      	ldr	r3, [sp, #32]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dd05      	ble.n	80054d4 <_dtoa_r+0x83c>
 80054c8:	4621      	mov	r1, r4
 80054ca:	461a      	mov	r2, r3
 80054cc:	4658      	mov	r0, fp
 80054ce:	f000 fcb5 	bl	8005e3c <__lshift>
 80054d2:	4604      	mov	r4, r0
 80054d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d059      	beq.n	800558e <_dtoa_r+0x8f6>
 80054da:	4621      	mov	r1, r4
 80054dc:	4648      	mov	r0, r9
 80054de:	f000 fd19 	bl	8005f14 <__mcmp>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	da53      	bge.n	800558e <_dtoa_r+0x8f6>
 80054e6:	1e7b      	subs	r3, r7, #1
 80054e8:	9304      	str	r3, [sp, #16]
 80054ea:	4649      	mov	r1, r9
 80054ec:	2300      	movs	r3, #0
 80054ee:	220a      	movs	r2, #10
 80054f0:	4658      	mov	r0, fp
 80054f2:	f000 faf7 	bl	8005ae4 <__multadd>
 80054f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054f8:	4681      	mov	r9, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8172 	beq.w	80057e4 <_dtoa_r+0xb4c>
 8005500:	2300      	movs	r3, #0
 8005502:	4629      	mov	r1, r5
 8005504:	220a      	movs	r2, #10
 8005506:	4658      	mov	r0, fp
 8005508:	f000 faec 	bl	8005ae4 <__multadd>
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	4605      	mov	r5, r0
 8005512:	dc67      	bgt.n	80055e4 <_dtoa_r+0x94c>
 8005514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005516:	2b02      	cmp	r3, #2
 8005518:	dc41      	bgt.n	800559e <_dtoa_r+0x906>
 800551a:	e063      	b.n	80055e4 <_dtoa_r+0x94c>
 800551c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800551e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005522:	e746      	b.n	80053b2 <_dtoa_r+0x71a>
 8005524:	9b07      	ldr	r3, [sp, #28]
 8005526:	1e5c      	subs	r4, r3, #1
 8005528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800552a:	42a3      	cmp	r3, r4
 800552c:	bfbf      	itttt	lt
 800552e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005530:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005532:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005534:	1ae3      	sublt	r3, r4, r3
 8005536:	bfb4      	ite	lt
 8005538:	18d2      	addlt	r2, r2, r3
 800553a:	1b1c      	subge	r4, r3, r4
 800553c:	9b07      	ldr	r3, [sp, #28]
 800553e:	bfbc      	itt	lt
 8005540:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005542:	2400      	movlt	r4, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	bfb5      	itete	lt
 8005548:	eba8 0603 	sublt.w	r6, r8, r3
 800554c:	9b07      	ldrge	r3, [sp, #28]
 800554e:	2300      	movlt	r3, #0
 8005550:	4646      	movge	r6, r8
 8005552:	e730      	b.n	80053b6 <_dtoa_r+0x71e>
 8005554:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005556:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005558:	4646      	mov	r6, r8
 800555a:	e735      	b.n	80053c8 <_dtoa_r+0x730>
 800555c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800555e:	e75c      	b.n	800541a <_dtoa_r+0x782>
 8005560:	2300      	movs	r3, #0
 8005562:	e788      	b.n	8005476 <_dtoa_r+0x7de>
 8005564:	3fe00000 	.word	0x3fe00000
 8005568:	40240000 	.word	0x40240000
 800556c:	40140000 	.word	0x40140000
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	e780      	b.n	8005476 <_dtoa_r+0x7de>
 8005574:	2300      	movs	r3, #0
 8005576:	930a      	str	r3, [sp, #40]	@ 0x28
 8005578:	e782      	b.n	8005480 <_dtoa_r+0x7e8>
 800557a:	d099      	beq.n	80054b0 <_dtoa_r+0x818>
 800557c:	9a08      	ldr	r2, [sp, #32]
 800557e:	331c      	adds	r3, #28
 8005580:	441a      	add	r2, r3
 8005582:	4498      	add	r8, r3
 8005584:	441e      	add	r6, r3
 8005586:	9208      	str	r2, [sp, #32]
 8005588:	e792      	b.n	80054b0 <_dtoa_r+0x818>
 800558a:	4603      	mov	r3, r0
 800558c:	e7f6      	b.n	800557c <_dtoa_r+0x8e4>
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	9704      	str	r7, [sp, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dc20      	bgt.n	80055d8 <_dtoa_r+0x940>
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559a:	2b02      	cmp	r3, #2
 800559c:	dd1e      	ble.n	80055dc <_dtoa_r+0x944>
 800559e:	9b00      	ldr	r3, [sp, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f aec0 	bne.w	8005326 <_dtoa_r+0x68e>
 80055a6:	4621      	mov	r1, r4
 80055a8:	2205      	movs	r2, #5
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fa9a 	bl	8005ae4 <__multadd>
 80055b0:	4601      	mov	r1, r0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4648      	mov	r0, r9
 80055b6:	f000 fcad 	bl	8005f14 <__mcmp>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f77f aeb3 	ble.w	8005326 <_dtoa_r+0x68e>
 80055c0:	4656      	mov	r6, sl
 80055c2:	2331      	movs	r3, #49	@ 0x31
 80055c4:	f806 3b01 	strb.w	r3, [r6], #1
 80055c8:	9b04      	ldr	r3, [sp, #16]
 80055ca:	3301      	adds	r3, #1
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	e6ae      	b.n	800532e <_dtoa_r+0x696>
 80055d0:	9c07      	ldr	r4, [sp, #28]
 80055d2:	9704      	str	r7, [sp, #16]
 80055d4:	4625      	mov	r5, r4
 80055d6:	e7f3      	b.n	80055c0 <_dtoa_r+0x928>
 80055d8:	9b07      	ldr	r3, [sp, #28]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8104 	beq.w	80057ec <_dtoa_r+0xb54>
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	dd05      	ble.n	80055f4 <_dtoa_r+0x95c>
 80055e8:	4629      	mov	r1, r5
 80055ea:	4632      	mov	r2, r6
 80055ec:	4658      	mov	r0, fp
 80055ee:	f000 fc25 	bl	8005e3c <__lshift>
 80055f2:	4605      	mov	r5, r0
 80055f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d05a      	beq.n	80056b0 <_dtoa_r+0xa18>
 80055fa:	6869      	ldr	r1, [r5, #4]
 80055fc:	4658      	mov	r0, fp
 80055fe:	f000 fa0f 	bl	8005a20 <_Balloc>
 8005602:	4606      	mov	r6, r0
 8005604:	b928      	cbnz	r0, 8005612 <_dtoa_r+0x97a>
 8005606:	4b84      	ldr	r3, [pc, #528]	@ (8005818 <_dtoa_r+0xb80>)
 8005608:	4602      	mov	r2, r0
 800560a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800560e:	f7ff bb5a 	b.w	8004cc6 <_dtoa_r+0x2e>
 8005612:	692a      	ldr	r2, [r5, #16]
 8005614:	3202      	adds	r2, #2
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	f105 010c 	add.w	r1, r5, #12
 800561c:	300c      	adds	r0, #12
 800561e:	f000 ffaf 	bl	8006580 <memcpy>
 8005622:	2201      	movs	r2, #1
 8005624:	4631      	mov	r1, r6
 8005626:	4658      	mov	r0, fp
 8005628:	f000 fc08 	bl	8005e3c <__lshift>
 800562c:	f10a 0301 	add.w	r3, sl, #1
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	9b00      	ldr	r3, [sp, #0]
 8005634:	4453      	add	r3, sl
 8005636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	462f      	mov	r7, r5
 8005640:	930a      	str	r3, [sp, #40]	@ 0x28
 8005642:	4605      	mov	r5, r0
 8005644:	9b07      	ldr	r3, [sp, #28]
 8005646:	4621      	mov	r1, r4
 8005648:	3b01      	subs	r3, #1
 800564a:	4648      	mov	r0, r9
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	f7ff fa9a 	bl	8004b86 <quorem>
 8005652:	4639      	mov	r1, r7
 8005654:	9002      	str	r0, [sp, #8]
 8005656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800565a:	4648      	mov	r0, r9
 800565c:	f000 fc5a 	bl	8005f14 <__mcmp>
 8005660:	462a      	mov	r2, r5
 8005662:	9008      	str	r0, [sp, #32]
 8005664:	4621      	mov	r1, r4
 8005666:	4658      	mov	r0, fp
 8005668:	f000 fc70 	bl	8005f4c <__mdiff>
 800566c:	68c2      	ldr	r2, [r0, #12]
 800566e:	4606      	mov	r6, r0
 8005670:	bb02      	cbnz	r2, 80056b4 <_dtoa_r+0xa1c>
 8005672:	4601      	mov	r1, r0
 8005674:	4648      	mov	r0, r9
 8005676:	f000 fc4d 	bl	8005f14 <__mcmp>
 800567a:	4602      	mov	r2, r0
 800567c:	4631      	mov	r1, r6
 800567e:	4658      	mov	r0, fp
 8005680:	920e      	str	r2, [sp, #56]	@ 0x38
 8005682:	f000 fa0d 	bl	8005aa0 <_Bfree>
 8005686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005688:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800568a:	9e07      	ldr	r6, [sp, #28]
 800568c:	ea43 0102 	orr.w	r1, r3, r2
 8005690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005692:	4319      	orrs	r1, r3
 8005694:	d110      	bne.n	80056b8 <_dtoa_r+0xa20>
 8005696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800569a:	d029      	beq.n	80056f0 <_dtoa_r+0xa58>
 800569c:	9b08      	ldr	r3, [sp, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dd02      	ble.n	80056a8 <_dtoa_r+0xa10>
 80056a2:	9b02      	ldr	r3, [sp, #8]
 80056a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80056a8:	9b00      	ldr	r3, [sp, #0]
 80056aa:	f883 8000 	strb.w	r8, [r3]
 80056ae:	e63f      	b.n	8005330 <_dtoa_r+0x698>
 80056b0:	4628      	mov	r0, r5
 80056b2:	e7bb      	b.n	800562c <_dtoa_r+0x994>
 80056b4:	2201      	movs	r2, #1
 80056b6:	e7e1      	b.n	800567c <_dtoa_r+0x9e4>
 80056b8:	9b08      	ldr	r3, [sp, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	db04      	blt.n	80056c8 <_dtoa_r+0xa30>
 80056be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056c0:	430b      	orrs	r3, r1
 80056c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056c4:	430b      	orrs	r3, r1
 80056c6:	d120      	bne.n	800570a <_dtoa_r+0xa72>
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	dded      	ble.n	80056a8 <_dtoa_r+0xa10>
 80056cc:	4649      	mov	r1, r9
 80056ce:	2201      	movs	r2, #1
 80056d0:	4658      	mov	r0, fp
 80056d2:	f000 fbb3 	bl	8005e3c <__lshift>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4681      	mov	r9, r0
 80056da:	f000 fc1b 	bl	8005f14 <__mcmp>
 80056de:	2800      	cmp	r0, #0
 80056e0:	dc03      	bgt.n	80056ea <_dtoa_r+0xa52>
 80056e2:	d1e1      	bne.n	80056a8 <_dtoa_r+0xa10>
 80056e4:	f018 0f01 	tst.w	r8, #1
 80056e8:	d0de      	beq.n	80056a8 <_dtoa_r+0xa10>
 80056ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056ee:	d1d8      	bne.n	80056a2 <_dtoa_r+0xa0a>
 80056f0:	9a00      	ldr	r2, [sp, #0]
 80056f2:	2339      	movs	r3, #57	@ 0x39
 80056f4:	7013      	strb	r3, [r2, #0]
 80056f6:	4633      	mov	r3, r6
 80056f8:	461e      	mov	r6, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005700:	2a39      	cmp	r2, #57	@ 0x39
 8005702:	d052      	beq.n	80057aa <_dtoa_r+0xb12>
 8005704:	3201      	adds	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e612      	b.n	8005330 <_dtoa_r+0x698>
 800570a:	2a00      	cmp	r2, #0
 800570c:	dd07      	ble.n	800571e <_dtoa_r+0xa86>
 800570e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005712:	d0ed      	beq.n	80056f0 <_dtoa_r+0xa58>
 8005714:	9a00      	ldr	r2, [sp, #0]
 8005716:	f108 0301 	add.w	r3, r8, #1
 800571a:	7013      	strb	r3, [r2, #0]
 800571c:	e608      	b.n	8005330 <_dtoa_r+0x698>
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	9a07      	ldr	r2, [sp, #28]
 8005722:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005728:	4293      	cmp	r3, r2
 800572a:	d028      	beq.n	800577e <_dtoa_r+0xae6>
 800572c:	4649      	mov	r1, r9
 800572e:	2300      	movs	r3, #0
 8005730:	220a      	movs	r2, #10
 8005732:	4658      	mov	r0, fp
 8005734:	f000 f9d6 	bl	8005ae4 <__multadd>
 8005738:	42af      	cmp	r7, r5
 800573a:	4681      	mov	r9, r0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	f04f 020a 	mov.w	r2, #10
 8005744:	4639      	mov	r1, r7
 8005746:	4658      	mov	r0, fp
 8005748:	d107      	bne.n	800575a <_dtoa_r+0xac2>
 800574a:	f000 f9cb 	bl	8005ae4 <__multadd>
 800574e:	4607      	mov	r7, r0
 8005750:	4605      	mov	r5, r0
 8005752:	9b07      	ldr	r3, [sp, #28]
 8005754:	3301      	adds	r3, #1
 8005756:	9307      	str	r3, [sp, #28]
 8005758:	e774      	b.n	8005644 <_dtoa_r+0x9ac>
 800575a:	f000 f9c3 	bl	8005ae4 <__multadd>
 800575e:	4629      	mov	r1, r5
 8005760:	4607      	mov	r7, r0
 8005762:	2300      	movs	r3, #0
 8005764:	220a      	movs	r2, #10
 8005766:	4658      	mov	r0, fp
 8005768:	f000 f9bc 	bl	8005ae4 <__multadd>
 800576c:	4605      	mov	r5, r0
 800576e:	e7f0      	b.n	8005752 <_dtoa_r+0xaba>
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfcc      	ite	gt
 8005776:	461e      	movgt	r6, r3
 8005778:	2601      	movle	r6, #1
 800577a:	4456      	add	r6, sl
 800577c:	2700      	movs	r7, #0
 800577e:	4649      	mov	r1, r9
 8005780:	2201      	movs	r2, #1
 8005782:	4658      	mov	r0, fp
 8005784:	f000 fb5a 	bl	8005e3c <__lshift>
 8005788:	4621      	mov	r1, r4
 800578a:	4681      	mov	r9, r0
 800578c:	f000 fbc2 	bl	8005f14 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	dcb0      	bgt.n	80056f6 <_dtoa_r+0xa5e>
 8005794:	d102      	bne.n	800579c <_dtoa_r+0xb04>
 8005796:	f018 0f01 	tst.w	r8, #1
 800579a:	d1ac      	bne.n	80056f6 <_dtoa_r+0xa5e>
 800579c:	4633      	mov	r3, r6
 800579e:	461e      	mov	r6, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a30      	cmp	r2, #48	@ 0x30
 80057a6:	d0fa      	beq.n	800579e <_dtoa_r+0xb06>
 80057a8:	e5c2      	b.n	8005330 <_dtoa_r+0x698>
 80057aa:	459a      	cmp	sl, r3
 80057ac:	d1a4      	bne.n	80056f8 <_dtoa_r+0xa60>
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	3301      	adds	r3, #1
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	2331      	movs	r3, #49	@ 0x31
 80057b6:	f88a 3000 	strb.w	r3, [sl]
 80057ba:	e5b9      	b.n	8005330 <_dtoa_r+0x698>
 80057bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800581c <_dtoa_r+0xb84>
 80057c2:	b11b      	cbz	r3, 80057cc <_dtoa_r+0xb34>
 80057c4:	f10a 0308 	add.w	r3, sl, #8
 80057c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4650      	mov	r0, sl
 80057ce:	b019      	add	sp, #100	@ 0x64
 80057d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	f77f ae37 	ble.w	800544a <_dtoa_r+0x7b2>
 80057dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057de:	930a      	str	r3, [sp, #40]	@ 0x28
 80057e0:	2001      	movs	r0, #1
 80057e2:	e655      	b.n	8005490 <_dtoa_r+0x7f8>
 80057e4:	9b00      	ldr	r3, [sp, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f77f aed6 	ble.w	8005598 <_dtoa_r+0x900>
 80057ec:	4656      	mov	r6, sl
 80057ee:	4621      	mov	r1, r4
 80057f0:	4648      	mov	r0, r9
 80057f2:	f7ff f9c8 	bl	8004b86 <quorem>
 80057f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057fa:	f806 8b01 	strb.w	r8, [r6], #1
 80057fe:	9b00      	ldr	r3, [sp, #0]
 8005800:	eba6 020a 	sub.w	r2, r6, sl
 8005804:	4293      	cmp	r3, r2
 8005806:	ddb3      	ble.n	8005770 <_dtoa_r+0xad8>
 8005808:	4649      	mov	r1, r9
 800580a:	2300      	movs	r3, #0
 800580c:	220a      	movs	r2, #10
 800580e:	4658      	mov	r0, fp
 8005810:	f000 f968 	bl	8005ae4 <__multadd>
 8005814:	4681      	mov	r9, r0
 8005816:	e7ea      	b.n	80057ee <_dtoa_r+0xb56>
 8005818:	0800721c 	.word	0x0800721c
 800581c:	080071a0 	.word	0x080071a0

08005820 <_free_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	d041      	beq.n	80058ac <_free_r+0x8c>
 8005828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582c:	1f0c      	subs	r4, r1, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	18e4      	addlt	r4, r4, r3
 8005834:	f000 f8e8 	bl	8005a08 <__malloc_lock>
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <_free_r+0x90>)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	b933      	cbnz	r3, 800584c <_free_r+0x2c>
 800583e:	6063      	str	r3, [r4, #4]
 8005840:	6014      	str	r4, [r2, #0]
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f000 b8e4 	b.w	8005a14 <__malloc_unlock>
 800584c:	42a3      	cmp	r3, r4
 800584e:	d908      	bls.n	8005862 <_free_r+0x42>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf01      	itttt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	e7ed      	b.n	800583e <_free_r+0x1e>
 8005862:	461a      	mov	r2, r3
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b10b      	cbz	r3, 800586c <_free_r+0x4c>
 8005868:	42a3      	cmp	r3, r4
 800586a:	d9fa      	bls.n	8005862 <_free_r+0x42>
 800586c:	6811      	ldr	r1, [r2, #0]
 800586e:	1850      	adds	r0, r2, r1
 8005870:	42a0      	cmp	r0, r4
 8005872:	d10b      	bne.n	800588c <_free_r+0x6c>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	4401      	add	r1, r0
 8005878:	1850      	adds	r0, r2, r1
 800587a:	4283      	cmp	r3, r0
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	d1e0      	bne.n	8005842 <_free_r+0x22>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	6053      	str	r3, [r2, #4]
 8005886:	4408      	add	r0, r1
 8005888:	6010      	str	r0, [r2, #0]
 800588a:	e7da      	b.n	8005842 <_free_r+0x22>
 800588c:	d902      	bls.n	8005894 <_free_r+0x74>
 800588e:	230c      	movs	r3, #12
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	e7d6      	b.n	8005842 <_free_r+0x22>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf04      	itt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	bf04      	itt	eq
 80058a4:	1809      	addeq	r1, r1, r0
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	6054      	str	r4, [r2, #4]
 80058aa:	e7ca      	b.n	8005842 <_free_r+0x22>
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	2000049c 	.word	0x2000049c

080058b4 <malloc>:
 80058b4:	4b02      	ldr	r3, [pc, #8]	@ (80058c0 <malloc+0xc>)
 80058b6:	4601      	mov	r1, r0
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f000 b825 	b.w	8005908 <_malloc_r>
 80058be:	bf00      	nop
 80058c0:	20000020 	.word	0x20000020

080058c4 <sbrk_aligned>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005904 <sbrk_aligned+0x40>)
 80058c8:	460c      	mov	r4, r1
 80058ca:	6831      	ldr	r1, [r6, #0]
 80058cc:	4605      	mov	r5, r0
 80058ce:	b911      	cbnz	r1, 80058d6 <sbrk_aligned+0x12>
 80058d0:	f000 fe46 	bl	8006560 <_sbrk_r>
 80058d4:	6030      	str	r0, [r6, #0]
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 fe41 	bl	8006560 <_sbrk_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	d103      	bne.n	80058ea <sbrk_aligned+0x26>
 80058e2:	f04f 34ff 	mov.w	r4, #4294967295
 80058e6:	4620      	mov	r0, r4
 80058e8:	bd70      	pop	{r4, r5, r6, pc}
 80058ea:	1cc4      	adds	r4, r0, #3
 80058ec:	f024 0403 	bic.w	r4, r4, #3
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d0f8      	beq.n	80058e6 <sbrk_aligned+0x22>
 80058f4:	1a21      	subs	r1, r4, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 fe32 	bl	8006560 <_sbrk_r>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d1f2      	bne.n	80058e6 <sbrk_aligned+0x22>
 8005900:	e7ef      	b.n	80058e2 <sbrk_aligned+0x1e>
 8005902:	bf00      	nop
 8005904:	20000498 	.word	0x20000498

08005908 <_malloc_r>:
 8005908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800590c:	1ccd      	adds	r5, r1, #3
 800590e:	f025 0503 	bic.w	r5, r5, #3
 8005912:	3508      	adds	r5, #8
 8005914:	2d0c      	cmp	r5, #12
 8005916:	bf38      	it	cc
 8005918:	250c      	movcc	r5, #12
 800591a:	2d00      	cmp	r5, #0
 800591c:	4606      	mov	r6, r0
 800591e:	db01      	blt.n	8005924 <_malloc_r+0x1c>
 8005920:	42a9      	cmp	r1, r5
 8005922:	d904      	bls.n	800592e <_malloc_r+0x26>
 8005924:	230c      	movs	r3, #12
 8005926:	6033      	str	r3, [r6, #0]
 8005928:	2000      	movs	r0, #0
 800592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a04 <_malloc_r+0xfc>
 8005932:	f000 f869 	bl	8005a08 <__malloc_lock>
 8005936:	f8d8 3000 	ldr.w	r3, [r8]
 800593a:	461c      	mov	r4, r3
 800593c:	bb44      	cbnz	r4, 8005990 <_malloc_r+0x88>
 800593e:	4629      	mov	r1, r5
 8005940:	4630      	mov	r0, r6
 8005942:	f7ff ffbf 	bl	80058c4 <sbrk_aligned>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	4604      	mov	r4, r0
 800594a:	d158      	bne.n	80059fe <_malloc_r+0xf6>
 800594c:	f8d8 4000 	ldr.w	r4, [r8]
 8005950:	4627      	mov	r7, r4
 8005952:	2f00      	cmp	r7, #0
 8005954:	d143      	bne.n	80059de <_malloc_r+0xd6>
 8005956:	2c00      	cmp	r4, #0
 8005958:	d04b      	beq.n	80059f2 <_malloc_r+0xea>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	4639      	mov	r1, r7
 800595e:	4630      	mov	r0, r6
 8005960:	eb04 0903 	add.w	r9, r4, r3
 8005964:	f000 fdfc 	bl	8006560 <_sbrk_r>
 8005968:	4581      	cmp	r9, r0
 800596a:	d142      	bne.n	80059f2 <_malloc_r+0xea>
 800596c:	6821      	ldr	r1, [r4, #0]
 800596e:	1a6d      	subs	r5, r5, r1
 8005970:	4629      	mov	r1, r5
 8005972:	4630      	mov	r0, r6
 8005974:	f7ff ffa6 	bl	80058c4 <sbrk_aligned>
 8005978:	3001      	adds	r0, #1
 800597a:	d03a      	beq.n	80059f2 <_malloc_r+0xea>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	442b      	add	r3, r5
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	f8d8 3000 	ldr.w	r3, [r8]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	bb62      	cbnz	r2, 80059e4 <_malloc_r+0xdc>
 800598a:	f8c8 7000 	str.w	r7, [r8]
 800598e:	e00f      	b.n	80059b0 <_malloc_r+0xa8>
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	1b52      	subs	r2, r2, r5
 8005994:	d420      	bmi.n	80059d8 <_malloc_r+0xd0>
 8005996:	2a0b      	cmp	r2, #11
 8005998:	d917      	bls.n	80059ca <_malloc_r+0xc2>
 800599a:	1961      	adds	r1, r4, r5
 800599c:	42a3      	cmp	r3, r4
 800599e:	6025      	str	r5, [r4, #0]
 80059a0:	bf18      	it	ne
 80059a2:	6059      	strne	r1, [r3, #4]
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	bf08      	it	eq
 80059a8:	f8c8 1000 	streq.w	r1, [r8]
 80059ac:	5162      	str	r2, [r4, r5]
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f82f 	bl	8005a14 <__malloc_unlock>
 80059b6:	f104 000b 	add.w	r0, r4, #11
 80059ba:	1d23      	adds	r3, r4, #4
 80059bc:	f020 0007 	bic.w	r0, r0, #7
 80059c0:	1ac2      	subs	r2, r0, r3
 80059c2:	bf1c      	itt	ne
 80059c4:	1a1b      	subne	r3, r3, r0
 80059c6:	50a3      	strne	r3, [r4, r2]
 80059c8:	e7af      	b.n	800592a <_malloc_r+0x22>
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	bf0c      	ite	eq
 80059d0:	f8c8 2000 	streq.w	r2, [r8]
 80059d4:	605a      	strne	r2, [r3, #4]
 80059d6:	e7eb      	b.n	80059b0 <_malloc_r+0xa8>
 80059d8:	4623      	mov	r3, r4
 80059da:	6864      	ldr	r4, [r4, #4]
 80059dc:	e7ae      	b.n	800593c <_malloc_r+0x34>
 80059de:	463c      	mov	r4, r7
 80059e0:	687f      	ldr	r7, [r7, #4]
 80059e2:	e7b6      	b.n	8005952 <_malloc_r+0x4a>
 80059e4:	461a      	mov	r2, r3
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d1fb      	bne.n	80059e4 <_malloc_r+0xdc>
 80059ec:	2300      	movs	r3, #0
 80059ee:	6053      	str	r3, [r2, #4]
 80059f0:	e7de      	b.n	80059b0 <_malloc_r+0xa8>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	4630      	mov	r0, r6
 80059f8:	f000 f80c 	bl	8005a14 <__malloc_unlock>
 80059fc:	e794      	b.n	8005928 <_malloc_r+0x20>
 80059fe:	6005      	str	r5, [r0, #0]
 8005a00:	e7d6      	b.n	80059b0 <_malloc_r+0xa8>
 8005a02:	bf00      	nop
 8005a04:	2000049c 	.word	0x2000049c

08005a08 <__malloc_lock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	@ (8005a10 <__malloc_lock+0x8>)
 8005a0a:	f7ff b8ba 	b.w	8004b82 <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20000494 	.word	0x20000494

08005a14 <__malloc_unlock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	@ (8005a1c <__malloc_unlock+0x8>)
 8005a16:	f7ff b8b5 	b.w	8004b84 <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20000494 	.word	0x20000494

08005a20 <_Balloc>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	69c6      	ldr	r6, [r0, #28]
 8005a24:	4604      	mov	r4, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	b976      	cbnz	r6, 8005a48 <_Balloc+0x28>
 8005a2a:	2010      	movs	r0, #16
 8005a2c:	f7ff ff42 	bl	80058b4 <malloc>
 8005a30:	4602      	mov	r2, r0
 8005a32:	61e0      	str	r0, [r4, #28]
 8005a34:	b920      	cbnz	r0, 8005a40 <_Balloc+0x20>
 8005a36:	4b18      	ldr	r3, [pc, #96]	@ (8005a98 <_Balloc+0x78>)
 8005a38:	4818      	ldr	r0, [pc, #96]	@ (8005a9c <_Balloc+0x7c>)
 8005a3a:	216b      	movs	r1, #107	@ 0x6b
 8005a3c:	f000 fdae 	bl	800659c <__assert_func>
 8005a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a44:	6006      	str	r6, [r0, #0]
 8005a46:	60c6      	str	r6, [r0, #12]
 8005a48:	69e6      	ldr	r6, [r4, #28]
 8005a4a:	68f3      	ldr	r3, [r6, #12]
 8005a4c:	b183      	cbz	r3, 8005a70 <_Balloc+0x50>
 8005a4e:	69e3      	ldr	r3, [r4, #28]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a56:	b9b8      	cbnz	r0, 8005a88 <_Balloc+0x68>
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f605 	lsl.w	r6, r1, r5
 8005a5e:	1d72      	adds	r2, r6, #5
 8005a60:	0092      	lsls	r2, r2, #2
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 fdb8 	bl	80065d8 <_calloc_r>
 8005a68:	b160      	cbz	r0, 8005a84 <_Balloc+0x64>
 8005a6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a6e:	e00e      	b.n	8005a8e <_Balloc+0x6e>
 8005a70:	2221      	movs	r2, #33	@ 0x21
 8005a72:	2104      	movs	r1, #4
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fdaf 	bl	80065d8 <_calloc_r>
 8005a7a:	69e3      	ldr	r3, [r4, #28]
 8005a7c:	60f0      	str	r0, [r6, #12]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e4      	bne.n	8005a4e <_Balloc+0x2e>
 8005a84:	2000      	movs	r0, #0
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	6802      	ldr	r2, [r0, #0]
 8005a8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a94:	e7f7      	b.n	8005a86 <_Balloc+0x66>
 8005a96:	bf00      	nop
 8005a98:	080071ad 	.word	0x080071ad
 8005a9c:	0800722d 	.word	0x0800722d

08005aa0 <_Bfree>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	69c6      	ldr	r6, [r0, #28]
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	b976      	cbnz	r6, 8005ac8 <_Bfree+0x28>
 8005aaa:	2010      	movs	r0, #16
 8005aac:	f7ff ff02 	bl	80058b4 <malloc>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	61e8      	str	r0, [r5, #28]
 8005ab4:	b920      	cbnz	r0, 8005ac0 <_Bfree+0x20>
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <_Bfree+0x3c>)
 8005ab8:	4809      	ldr	r0, [pc, #36]	@ (8005ae0 <_Bfree+0x40>)
 8005aba:	218f      	movs	r1, #143	@ 0x8f
 8005abc:	f000 fd6e 	bl	800659c <__assert_func>
 8005ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ac4:	6006      	str	r6, [r0, #0]
 8005ac6:	60c6      	str	r6, [r0, #12]
 8005ac8:	b13c      	cbz	r4, 8005ada <_Bfree+0x3a>
 8005aca:	69eb      	ldr	r3, [r5, #28]
 8005acc:	6862      	ldr	r2, [r4, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ad4:	6021      	str	r1, [r4, #0]
 8005ad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	080071ad 	.word	0x080071ad
 8005ae0:	0800722d 	.word	0x0800722d

08005ae4 <__multadd>:
 8005ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae8:	690d      	ldr	r5, [r1, #16]
 8005aea:	4607      	mov	r7, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	461e      	mov	r6, r3
 8005af0:	f101 0c14 	add.w	ip, r1, #20
 8005af4:	2000      	movs	r0, #0
 8005af6:	f8dc 3000 	ldr.w	r3, [ip]
 8005afa:	b299      	uxth	r1, r3
 8005afc:	fb02 6101 	mla	r1, r2, r1, r6
 8005b00:	0c1e      	lsrs	r6, r3, #16
 8005b02:	0c0b      	lsrs	r3, r1, #16
 8005b04:	fb02 3306 	mla	r3, r2, r6, r3
 8005b08:	b289      	uxth	r1, r1
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b10:	4285      	cmp	r5, r0
 8005b12:	f84c 1b04 	str.w	r1, [ip], #4
 8005b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b1a:	dcec      	bgt.n	8005af6 <__multadd+0x12>
 8005b1c:	b30e      	cbz	r6, 8005b62 <__multadd+0x7e>
 8005b1e:	68a3      	ldr	r3, [r4, #8]
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc19      	bgt.n	8005b58 <__multadd+0x74>
 8005b24:	6861      	ldr	r1, [r4, #4]
 8005b26:	4638      	mov	r0, r7
 8005b28:	3101      	adds	r1, #1
 8005b2a:	f7ff ff79 	bl	8005a20 <_Balloc>
 8005b2e:	4680      	mov	r8, r0
 8005b30:	b928      	cbnz	r0, 8005b3e <__multadd+0x5a>
 8005b32:	4602      	mov	r2, r0
 8005b34:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <__multadd+0x84>)
 8005b36:	480d      	ldr	r0, [pc, #52]	@ (8005b6c <__multadd+0x88>)
 8005b38:	21ba      	movs	r1, #186	@ 0xba
 8005b3a:	f000 fd2f 	bl	800659c <__assert_func>
 8005b3e:	6922      	ldr	r2, [r4, #16]
 8005b40:	3202      	adds	r2, #2
 8005b42:	f104 010c 	add.w	r1, r4, #12
 8005b46:	0092      	lsls	r2, r2, #2
 8005b48:	300c      	adds	r0, #12
 8005b4a:	f000 fd19 	bl	8006580 <memcpy>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff ffa5 	bl	8005aa0 <_Bfree>
 8005b56:	4644      	mov	r4, r8
 8005b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	615e      	str	r6, [r3, #20]
 8005b60:	6125      	str	r5, [r4, #16]
 8005b62:	4620      	mov	r0, r4
 8005b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b68:	0800721c 	.word	0x0800721c
 8005b6c:	0800722d 	.word	0x0800722d

08005b70 <__hi0bits>:
 8005b70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b74:	4603      	mov	r3, r0
 8005b76:	bf36      	itet	cc
 8005b78:	0403      	lslcc	r3, r0, #16
 8005b7a:	2000      	movcs	r0, #0
 8005b7c:	2010      	movcc	r0, #16
 8005b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b82:	bf3c      	itt	cc
 8005b84:	021b      	lslcc	r3, r3, #8
 8005b86:	3008      	addcc	r0, #8
 8005b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b8c:	bf3c      	itt	cc
 8005b8e:	011b      	lslcc	r3, r3, #4
 8005b90:	3004      	addcc	r0, #4
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b96:	bf3c      	itt	cc
 8005b98:	009b      	lslcc	r3, r3, #2
 8005b9a:	3002      	addcc	r0, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db05      	blt.n	8005bac <__hi0bits+0x3c>
 8005ba0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ba4:	f100 0001 	add.w	r0, r0, #1
 8005ba8:	bf08      	it	eq
 8005baa:	2020      	moveq	r0, #32
 8005bac:	4770      	bx	lr

08005bae <__lo0bits>:
 8005bae:	6803      	ldr	r3, [r0, #0]
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	f013 0007 	ands.w	r0, r3, #7
 8005bb6:	d00b      	beq.n	8005bd0 <__lo0bits+0x22>
 8005bb8:	07d9      	lsls	r1, r3, #31
 8005bba:	d421      	bmi.n	8005c00 <__lo0bits+0x52>
 8005bbc:	0798      	lsls	r0, r3, #30
 8005bbe:	bf49      	itett	mi
 8005bc0:	085b      	lsrmi	r3, r3, #1
 8005bc2:	089b      	lsrpl	r3, r3, #2
 8005bc4:	2001      	movmi	r0, #1
 8005bc6:	6013      	strmi	r3, [r2, #0]
 8005bc8:	bf5c      	itt	pl
 8005bca:	6013      	strpl	r3, [r2, #0]
 8005bcc:	2002      	movpl	r0, #2
 8005bce:	4770      	bx	lr
 8005bd0:	b299      	uxth	r1, r3
 8005bd2:	b909      	cbnz	r1, 8005bd8 <__lo0bits+0x2a>
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	b2d9      	uxtb	r1, r3
 8005bda:	b909      	cbnz	r1, 8005be0 <__lo0bits+0x32>
 8005bdc:	3008      	adds	r0, #8
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	0719      	lsls	r1, r3, #28
 8005be2:	bf04      	itt	eq
 8005be4:	091b      	lsreq	r3, r3, #4
 8005be6:	3004      	addeq	r0, #4
 8005be8:	0799      	lsls	r1, r3, #30
 8005bea:	bf04      	itt	eq
 8005bec:	089b      	lsreq	r3, r3, #2
 8005bee:	3002      	addeq	r0, #2
 8005bf0:	07d9      	lsls	r1, r3, #31
 8005bf2:	d403      	bmi.n	8005bfc <__lo0bits+0x4e>
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	f100 0001 	add.w	r0, r0, #1
 8005bfa:	d003      	beq.n	8005c04 <__lo0bits+0x56>
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4770      	bx	lr
 8005c00:	2000      	movs	r0, #0
 8005c02:	4770      	bx	lr
 8005c04:	2020      	movs	r0, #32
 8005c06:	4770      	bx	lr

08005c08 <__i2b>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	f7ff ff07 	bl	8005a20 <_Balloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <__i2b+0x1a>
 8005c16:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <__i2b+0x24>)
 8005c18:	4805      	ldr	r0, [pc, #20]	@ (8005c30 <__i2b+0x28>)
 8005c1a:	f240 1145 	movw	r1, #325	@ 0x145
 8005c1e:	f000 fcbd 	bl	800659c <__assert_func>
 8005c22:	2301      	movs	r3, #1
 8005c24:	6144      	str	r4, [r0, #20]
 8005c26:	6103      	str	r3, [r0, #16]
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	0800721c 	.word	0x0800721c
 8005c30:	0800722d 	.word	0x0800722d

08005c34 <__multiply>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4614      	mov	r4, r2
 8005c3a:	690a      	ldr	r2, [r1, #16]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	bfa8      	it	ge
 8005c42:	4623      	movge	r3, r4
 8005c44:	460f      	mov	r7, r1
 8005c46:	bfa4      	itt	ge
 8005c48:	460c      	movge	r4, r1
 8005c4a:	461f      	movge	r7, r3
 8005c4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c54:	68a3      	ldr	r3, [r4, #8]
 8005c56:	6861      	ldr	r1, [r4, #4]
 8005c58:	eb0a 0609 	add.w	r6, sl, r9
 8005c5c:	42b3      	cmp	r3, r6
 8005c5e:	b085      	sub	sp, #20
 8005c60:	bfb8      	it	lt
 8005c62:	3101      	addlt	r1, #1
 8005c64:	f7ff fedc 	bl	8005a20 <_Balloc>
 8005c68:	b930      	cbnz	r0, 8005c78 <__multiply+0x44>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b44      	ldr	r3, [pc, #272]	@ (8005d80 <__multiply+0x14c>)
 8005c6e:	4845      	ldr	r0, [pc, #276]	@ (8005d84 <__multiply+0x150>)
 8005c70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c74:	f000 fc92 	bl	800659c <__assert_func>
 8005c78:	f100 0514 	add.w	r5, r0, #20
 8005c7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c80:	462b      	mov	r3, r5
 8005c82:	2200      	movs	r2, #0
 8005c84:	4543      	cmp	r3, r8
 8005c86:	d321      	bcc.n	8005ccc <__multiply+0x98>
 8005c88:	f107 0114 	add.w	r1, r7, #20
 8005c8c:	f104 0214 	add.w	r2, r4, #20
 8005c90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005c94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	1b13      	subs	r3, r2, r4
 8005c9c:	3b15      	subs	r3, #21
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	f104 0715 	add.w	r7, r4, #21
 8005ca8:	42ba      	cmp	r2, r7
 8005caa:	bf38      	it	cc
 8005cac:	2304      	movcc	r3, #4
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	9103      	str	r1, [sp, #12]
 8005cb4:	428b      	cmp	r3, r1
 8005cb6:	d80c      	bhi.n	8005cd2 <__multiply+0x9e>
 8005cb8:	2e00      	cmp	r6, #0
 8005cba:	dd03      	ble.n	8005cc4 <__multiply+0x90>
 8005cbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d05b      	beq.n	8005d7c <__multiply+0x148>
 8005cc4:	6106      	str	r6, [r0, #16]
 8005cc6:	b005      	add	sp, #20
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	f843 2b04 	str.w	r2, [r3], #4
 8005cd0:	e7d8      	b.n	8005c84 <__multiply+0x50>
 8005cd2:	f8b1 a000 	ldrh.w	sl, [r1]
 8005cd6:	f1ba 0f00 	cmp.w	sl, #0
 8005cda:	d024      	beq.n	8005d26 <__multiply+0xf2>
 8005cdc:	f104 0e14 	add.w	lr, r4, #20
 8005ce0:	46a9      	mov	r9, r5
 8005ce2:	f04f 0c00 	mov.w	ip, #0
 8005ce6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005cea:	f8d9 3000 	ldr.w	r3, [r9]
 8005cee:	fa1f fb87 	uxth.w	fp, r7
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	fb0a 330b 	mla	r3, sl, fp, r3
 8005cf8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005cfc:	f8d9 7000 	ldr.w	r7, [r9]
 8005d00:	4463      	add	r3, ip
 8005d02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d06:	fb0a c70b 	mla	r7, sl, fp, ip
 8005d0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d14:	4572      	cmp	r2, lr
 8005d16:	f849 3b04 	str.w	r3, [r9], #4
 8005d1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d1e:	d8e2      	bhi.n	8005ce6 <__multiply+0xb2>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	f845 c003 	str.w	ip, [r5, r3]
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d2c:	3104      	adds	r1, #4
 8005d2e:	f1b9 0f00 	cmp.w	r9, #0
 8005d32:	d021      	beq.n	8005d78 <__multiply+0x144>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	f104 0c14 	add.w	ip, r4, #20
 8005d3a:	46ae      	mov	lr, r5
 8005d3c:	f04f 0a00 	mov.w	sl, #0
 8005d40:	f8bc b000 	ldrh.w	fp, [ip]
 8005d44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d48:	fb09 770b 	mla	r7, r9, fp, r7
 8005d4c:	4457      	add	r7, sl
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d54:	f84e 3b04 	str.w	r3, [lr], #4
 8005d58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d60:	f8be 3000 	ldrh.w	r3, [lr]
 8005d64:	fb09 330a 	mla	r3, r9, sl, r3
 8005d68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005d6c:	4562      	cmp	r2, ip
 8005d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d72:	d8e5      	bhi.n	8005d40 <__multiply+0x10c>
 8005d74:	9f01      	ldr	r7, [sp, #4]
 8005d76:	51eb      	str	r3, [r5, r7]
 8005d78:	3504      	adds	r5, #4
 8005d7a:	e799      	b.n	8005cb0 <__multiply+0x7c>
 8005d7c:	3e01      	subs	r6, #1
 8005d7e:	e79b      	b.n	8005cb8 <__multiply+0x84>
 8005d80:	0800721c 	.word	0x0800721c
 8005d84:	0800722d 	.word	0x0800722d

08005d88 <__pow5mult>:
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	4615      	mov	r5, r2
 8005d8e:	f012 0203 	ands.w	r2, r2, #3
 8005d92:	4607      	mov	r7, r0
 8005d94:	460e      	mov	r6, r1
 8005d96:	d007      	beq.n	8005da8 <__pow5mult+0x20>
 8005d98:	4c25      	ldr	r4, [pc, #148]	@ (8005e30 <__pow5mult+0xa8>)
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005da2:	f7ff fe9f 	bl	8005ae4 <__multadd>
 8005da6:	4606      	mov	r6, r0
 8005da8:	10ad      	asrs	r5, r5, #2
 8005daa:	d03d      	beq.n	8005e28 <__pow5mult+0xa0>
 8005dac:	69fc      	ldr	r4, [r7, #28]
 8005dae:	b97c      	cbnz	r4, 8005dd0 <__pow5mult+0x48>
 8005db0:	2010      	movs	r0, #16
 8005db2:	f7ff fd7f 	bl	80058b4 <malloc>
 8005db6:	4602      	mov	r2, r0
 8005db8:	61f8      	str	r0, [r7, #28]
 8005dba:	b928      	cbnz	r0, 8005dc8 <__pow5mult+0x40>
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <__pow5mult+0xac>)
 8005dbe:	481e      	ldr	r0, [pc, #120]	@ (8005e38 <__pow5mult+0xb0>)
 8005dc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005dc4:	f000 fbea 	bl	800659c <__assert_func>
 8005dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dcc:	6004      	str	r4, [r0, #0]
 8005dce:	60c4      	str	r4, [r0, #12]
 8005dd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dd8:	b94c      	cbnz	r4, 8005dee <__pow5mult+0x66>
 8005dda:	f240 2171 	movw	r1, #625	@ 0x271
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff ff12 	bl	8005c08 <__i2b>
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dea:	4604      	mov	r4, r0
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	07eb      	lsls	r3, r5, #31
 8005df4:	d50a      	bpl.n	8005e0c <__pow5mult+0x84>
 8005df6:	4631      	mov	r1, r6
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	f7ff ff1a 	bl	8005c34 <__multiply>
 8005e00:	4631      	mov	r1, r6
 8005e02:	4680      	mov	r8, r0
 8005e04:	4638      	mov	r0, r7
 8005e06:	f7ff fe4b 	bl	8005aa0 <_Bfree>
 8005e0a:	4646      	mov	r6, r8
 8005e0c:	106d      	asrs	r5, r5, #1
 8005e0e:	d00b      	beq.n	8005e28 <__pow5mult+0xa0>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	b938      	cbnz	r0, 8005e24 <__pow5mult+0x9c>
 8005e14:	4622      	mov	r2, r4
 8005e16:	4621      	mov	r1, r4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ff0b 	bl	8005c34 <__multiply>
 8005e1e:	6020      	str	r0, [r4, #0]
 8005e20:	f8c0 9000 	str.w	r9, [r0]
 8005e24:	4604      	mov	r4, r0
 8005e26:	e7e4      	b.n	8005df2 <__pow5mult+0x6a>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2e:	bf00      	nop
 8005e30:	08007288 	.word	0x08007288
 8005e34:	080071ad 	.word	0x080071ad
 8005e38:	0800722d 	.word	0x0800722d

08005e3c <__lshift>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	6849      	ldr	r1, [r1, #4]
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	4691      	mov	r9, r2
 8005e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e54:	f108 0601 	add.w	r6, r8, #1
 8005e58:	42b3      	cmp	r3, r6
 8005e5a:	db0b      	blt.n	8005e74 <__lshift+0x38>
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff fddf 	bl	8005a20 <_Balloc>
 8005e62:	4605      	mov	r5, r0
 8005e64:	b948      	cbnz	r0, 8005e7a <__lshift+0x3e>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b28      	ldr	r3, [pc, #160]	@ (8005f0c <__lshift+0xd0>)
 8005e6a:	4829      	ldr	r0, [pc, #164]	@ (8005f10 <__lshift+0xd4>)
 8005e6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e70:	f000 fb94 	bl	800659c <__assert_func>
 8005e74:	3101      	adds	r1, #1
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	e7ee      	b.n	8005e58 <__lshift+0x1c>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f100 0114 	add.w	r1, r0, #20
 8005e80:	f100 0210 	add.w	r2, r0, #16
 8005e84:	4618      	mov	r0, r3
 8005e86:	4553      	cmp	r3, sl
 8005e88:	db33      	blt.n	8005ef2 <__lshift+0xb6>
 8005e8a:	6920      	ldr	r0, [r4, #16]
 8005e8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e90:	f104 0314 	add.w	r3, r4, #20
 8005e94:	f019 091f 	ands.w	r9, r9, #31
 8005e98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ea0:	d02b      	beq.n	8005efa <__lshift+0xbe>
 8005ea2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ea6:	468a      	mov	sl, r1
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	fa00 f009 	lsl.w	r0, r0, r9
 8005eb0:	4310      	orrs	r0, r2
 8005eb2:	f84a 0b04 	str.w	r0, [sl], #4
 8005eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eba:	459c      	cmp	ip, r3
 8005ebc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ec0:	d8f3      	bhi.n	8005eaa <__lshift+0x6e>
 8005ec2:	ebac 0304 	sub.w	r3, ip, r4
 8005ec6:	3b15      	subs	r3, #21
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
 8005ecc:	3304      	adds	r3, #4
 8005ece:	f104 0015 	add.w	r0, r4, #21
 8005ed2:	4584      	cmp	ip, r0
 8005ed4:	bf38      	it	cc
 8005ed6:	2304      	movcc	r3, #4
 8005ed8:	50ca      	str	r2, [r1, r3]
 8005eda:	b10a      	cbz	r2, 8005ee0 <__lshift+0xa4>
 8005edc:	f108 0602 	add.w	r6, r8, #2
 8005ee0:	3e01      	subs	r6, #1
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	612e      	str	r6, [r5, #16]
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f7ff fdda 	bl	8005aa0 <_Bfree>
 8005eec:	4628      	mov	r0, r5
 8005eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	e7c5      	b.n	8005e86 <__lshift+0x4a>
 8005efa:	3904      	subs	r1, #4
 8005efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f00:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f04:	459c      	cmp	ip, r3
 8005f06:	d8f9      	bhi.n	8005efc <__lshift+0xc0>
 8005f08:	e7ea      	b.n	8005ee0 <__lshift+0xa4>
 8005f0a:	bf00      	nop
 8005f0c:	0800721c 	.word	0x0800721c
 8005f10:	0800722d 	.word	0x0800722d

08005f14 <__mcmp>:
 8005f14:	690a      	ldr	r2, [r1, #16]
 8005f16:	4603      	mov	r3, r0
 8005f18:	6900      	ldr	r0, [r0, #16]
 8005f1a:	1a80      	subs	r0, r0, r2
 8005f1c:	b530      	push	{r4, r5, lr}
 8005f1e:	d10e      	bne.n	8005f3e <__mcmp+0x2a>
 8005f20:	3314      	adds	r3, #20
 8005f22:	3114      	adds	r1, #20
 8005f24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f34:	4295      	cmp	r5, r2
 8005f36:	d003      	beq.n	8005f40 <__mcmp+0x2c>
 8005f38:	d205      	bcs.n	8005f46 <__mcmp+0x32>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	bd30      	pop	{r4, r5, pc}
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d3f3      	bcc.n	8005f2c <__mcmp+0x18>
 8005f44:	e7fb      	b.n	8005f3e <__mcmp+0x2a>
 8005f46:	2001      	movs	r0, #1
 8005f48:	e7f9      	b.n	8005f3e <__mcmp+0x2a>
	...

08005f4c <__mdiff>:
 8005f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	4689      	mov	r9, r1
 8005f52:	4606      	mov	r6, r0
 8005f54:	4611      	mov	r1, r2
 8005f56:	4648      	mov	r0, r9
 8005f58:	4614      	mov	r4, r2
 8005f5a:	f7ff ffdb 	bl	8005f14 <__mcmp>
 8005f5e:	1e05      	subs	r5, r0, #0
 8005f60:	d112      	bne.n	8005f88 <__mdiff+0x3c>
 8005f62:	4629      	mov	r1, r5
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fd5b 	bl	8005a20 <_Balloc>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	b928      	cbnz	r0, 8005f7a <__mdiff+0x2e>
 8005f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800606c <__mdiff+0x120>)
 8005f70:	f240 2137 	movw	r1, #567	@ 0x237
 8005f74:	483e      	ldr	r0, [pc, #248]	@ (8006070 <__mdiff+0x124>)
 8005f76:	f000 fb11 	bl	800659c <__assert_func>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f80:	4610      	mov	r0, r2
 8005f82:	b003      	add	sp, #12
 8005f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f88:	bfbc      	itt	lt
 8005f8a:	464b      	movlt	r3, r9
 8005f8c:	46a1      	movlt	r9, r4
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f94:	bfba      	itte	lt
 8005f96:	461c      	movlt	r4, r3
 8005f98:	2501      	movlt	r5, #1
 8005f9a:	2500      	movge	r5, #0
 8005f9c:	f7ff fd40 	bl	8005a20 <_Balloc>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	b918      	cbnz	r0, 8005fac <__mdiff+0x60>
 8005fa4:	4b31      	ldr	r3, [pc, #196]	@ (800606c <__mdiff+0x120>)
 8005fa6:	f240 2145 	movw	r1, #581	@ 0x245
 8005faa:	e7e3      	b.n	8005f74 <__mdiff+0x28>
 8005fac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fb0:	6926      	ldr	r6, [r4, #16]
 8005fb2:	60c5      	str	r5, [r0, #12]
 8005fb4:	f109 0310 	add.w	r3, r9, #16
 8005fb8:	f109 0514 	add.w	r5, r9, #20
 8005fbc:	f104 0e14 	add.w	lr, r4, #20
 8005fc0:	f100 0b14 	add.w	fp, r0, #20
 8005fc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005fc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	46d9      	mov	r9, fp
 8005fd0:	f04f 0c00 	mov.w	ip, #0
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005fda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	fa1f f38a 	uxth.w	r3, sl
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	b283      	uxth	r3, r0
 8005fe8:	1acb      	subs	r3, r1, r3
 8005fea:	0c00      	lsrs	r0, r0, #16
 8005fec:	4463      	add	r3, ip
 8005fee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ff2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ffc:	4576      	cmp	r6, lr
 8005ffe:	f849 3b04 	str.w	r3, [r9], #4
 8006002:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006006:	d8e5      	bhi.n	8005fd4 <__mdiff+0x88>
 8006008:	1b33      	subs	r3, r6, r4
 800600a:	3b15      	subs	r3, #21
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	3415      	adds	r4, #21
 8006012:	3304      	adds	r3, #4
 8006014:	42a6      	cmp	r6, r4
 8006016:	bf38      	it	cc
 8006018:	2304      	movcc	r3, #4
 800601a:	441d      	add	r5, r3
 800601c:	445b      	add	r3, fp
 800601e:	461e      	mov	r6, r3
 8006020:	462c      	mov	r4, r5
 8006022:	4544      	cmp	r4, r8
 8006024:	d30e      	bcc.n	8006044 <__mdiff+0xf8>
 8006026:	f108 0103 	add.w	r1, r8, #3
 800602a:	1b49      	subs	r1, r1, r5
 800602c:	f021 0103 	bic.w	r1, r1, #3
 8006030:	3d03      	subs	r5, #3
 8006032:	45a8      	cmp	r8, r5
 8006034:	bf38      	it	cc
 8006036:	2100      	movcc	r1, #0
 8006038:	440b      	add	r3, r1
 800603a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800603e:	b191      	cbz	r1, 8006066 <__mdiff+0x11a>
 8006040:	6117      	str	r7, [r2, #16]
 8006042:	e79d      	b.n	8005f80 <__mdiff+0x34>
 8006044:	f854 1b04 	ldr.w	r1, [r4], #4
 8006048:	46e6      	mov	lr, ip
 800604a:	0c08      	lsrs	r0, r1, #16
 800604c:	fa1c fc81 	uxtah	ip, ip, r1
 8006050:	4471      	add	r1, lr
 8006052:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006056:	b289      	uxth	r1, r1
 8006058:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800605c:	f846 1b04 	str.w	r1, [r6], #4
 8006060:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006064:	e7dd      	b.n	8006022 <__mdiff+0xd6>
 8006066:	3f01      	subs	r7, #1
 8006068:	e7e7      	b.n	800603a <__mdiff+0xee>
 800606a:	bf00      	nop
 800606c:	0800721c 	.word	0x0800721c
 8006070:	0800722d 	.word	0x0800722d

08006074 <__d2b>:
 8006074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006078:	460f      	mov	r7, r1
 800607a:	2101      	movs	r1, #1
 800607c:	ec59 8b10 	vmov	r8, r9, d0
 8006080:	4616      	mov	r6, r2
 8006082:	f7ff fccd 	bl	8005a20 <_Balloc>
 8006086:	4604      	mov	r4, r0
 8006088:	b930      	cbnz	r0, 8006098 <__d2b+0x24>
 800608a:	4602      	mov	r2, r0
 800608c:	4b23      	ldr	r3, [pc, #140]	@ (800611c <__d2b+0xa8>)
 800608e:	4824      	ldr	r0, [pc, #144]	@ (8006120 <__d2b+0xac>)
 8006090:	f240 310f 	movw	r1, #783	@ 0x30f
 8006094:	f000 fa82 	bl	800659c <__assert_func>
 8006098:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800609c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060a0:	b10d      	cbz	r5, 80060a6 <__d2b+0x32>
 80060a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f1b8 0300 	subs.w	r3, r8, #0
 80060ac:	d023      	beq.n	80060f6 <__d2b+0x82>
 80060ae:	4668      	mov	r0, sp
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	f7ff fd7c 	bl	8005bae <__lo0bits>
 80060b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80060ba:	b1d0      	cbz	r0, 80060f2 <__d2b+0x7e>
 80060bc:	f1c0 0320 	rsb	r3, r0, #32
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	430b      	orrs	r3, r1
 80060c6:	40c2      	lsrs	r2, r0
 80060c8:	6163      	str	r3, [r4, #20]
 80060ca:	9201      	str	r2, [sp, #4]
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2201      	moveq	r2, #1
 80060d6:	2202      	movne	r2, #2
 80060d8:	6122      	str	r2, [r4, #16]
 80060da:	b1a5      	cbz	r5, 8006106 <__d2b+0x92>
 80060dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80060e0:	4405      	add	r5, r0
 80060e2:	603d      	str	r5, [r7, #0]
 80060e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	4620      	mov	r0, r4
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f2:	6161      	str	r1, [r4, #20]
 80060f4:	e7ea      	b.n	80060cc <__d2b+0x58>
 80060f6:	a801      	add	r0, sp, #4
 80060f8:	f7ff fd59 	bl	8005bae <__lo0bits>
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	6163      	str	r3, [r4, #20]
 8006100:	3020      	adds	r0, #32
 8006102:	2201      	movs	r2, #1
 8006104:	e7e8      	b.n	80060d8 <__d2b+0x64>
 8006106:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800610a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800610e:	6038      	str	r0, [r7, #0]
 8006110:	6918      	ldr	r0, [r3, #16]
 8006112:	f7ff fd2d 	bl	8005b70 <__hi0bits>
 8006116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800611a:	e7e5      	b.n	80060e8 <__d2b+0x74>
 800611c:	0800721c 	.word	0x0800721c
 8006120:	0800722d 	.word	0x0800722d

08006124 <__ssputs_r>:
 8006124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	688e      	ldr	r6, [r1, #8]
 800612a:	461f      	mov	r7, r3
 800612c:	42be      	cmp	r6, r7
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	4682      	mov	sl, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4690      	mov	r8, r2
 8006136:	d82d      	bhi.n	8006194 <__ssputs_r+0x70>
 8006138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800613c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006140:	d026      	beq.n	8006190 <__ssputs_r+0x6c>
 8006142:	6965      	ldr	r5, [r4, #20]
 8006144:	6909      	ldr	r1, [r1, #16]
 8006146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800614a:	eba3 0901 	sub.w	r9, r3, r1
 800614e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006152:	1c7b      	adds	r3, r7, #1
 8006154:	444b      	add	r3, r9
 8006156:	106d      	asrs	r5, r5, #1
 8006158:	429d      	cmp	r5, r3
 800615a:	bf38      	it	cc
 800615c:	461d      	movcc	r5, r3
 800615e:	0553      	lsls	r3, r2, #21
 8006160:	d527      	bpl.n	80061b2 <__ssputs_r+0x8e>
 8006162:	4629      	mov	r1, r5
 8006164:	f7ff fbd0 	bl	8005908 <_malloc_r>
 8006168:	4606      	mov	r6, r0
 800616a:	b360      	cbz	r0, 80061c6 <__ssputs_r+0xa2>
 800616c:	6921      	ldr	r1, [r4, #16]
 800616e:	464a      	mov	r2, r9
 8006170:	f000 fa06 	bl	8006580 <memcpy>
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800617a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	6126      	str	r6, [r4, #16]
 8006182:	6165      	str	r5, [r4, #20]
 8006184:	444e      	add	r6, r9
 8006186:	eba5 0509 	sub.w	r5, r5, r9
 800618a:	6026      	str	r6, [r4, #0]
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	463e      	mov	r6, r7
 8006190:	42be      	cmp	r6, r7
 8006192:	d900      	bls.n	8006196 <__ssputs_r+0x72>
 8006194:	463e      	mov	r6, r7
 8006196:	6820      	ldr	r0, [r4, #0]
 8006198:	4632      	mov	r2, r6
 800619a:	4641      	mov	r1, r8
 800619c:	f000 f9c6 	bl	800652c <memmove>
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	1b9b      	subs	r3, r3, r6
 80061a4:	60a3      	str	r3, [r4, #8]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	4433      	add	r3, r6
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	2000      	movs	r0, #0
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	462a      	mov	r2, r5
 80061b4:	f000 fa36 	bl	8006624 <_realloc_r>
 80061b8:	4606      	mov	r6, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d1e0      	bne.n	8006180 <__ssputs_r+0x5c>
 80061be:	6921      	ldr	r1, [r4, #16]
 80061c0:	4650      	mov	r0, sl
 80061c2:	f7ff fb2d 	bl	8005820 <_free_r>
 80061c6:	230c      	movs	r3, #12
 80061c8:	f8ca 3000 	str.w	r3, [sl]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e7e9      	b.n	80061ae <__ssputs_r+0x8a>
	...

080061dc <_svfiprintf_r>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	4698      	mov	r8, r3
 80061e2:	898b      	ldrh	r3, [r1, #12]
 80061e4:	061b      	lsls	r3, r3, #24
 80061e6:	b09d      	sub	sp, #116	@ 0x74
 80061e8:	4607      	mov	r7, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	4614      	mov	r4, r2
 80061ee:	d510      	bpl.n	8006212 <_svfiprintf_r+0x36>
 80061f0:	690b      	ldr	r3, [r1, #16]
 80061f2:	b973      	cbnz	r3, 8006212 <_svfiprintf_r+0x36>
 80061f4:	2140      	movs	r1, #64	@ 0x40
 80061f6:	f7ff fb87 	bl	8005908 <_malloc_r>
 80061fa:	6028      	str	r0, [r5, #0]
 80061fc:	6128      	str	r0, [r5, #16]
 80061fe:	b930      	cbnz	r0, 800620e <_svfiprintf_r+0x32>
 8006200:	230c      	movs	r3, #12
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	b01d      	add	sp, #116	@ 0x74
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	2340      	movs	r3, #64	@ 0x40
 8006210:	616b      	str	r3, [r5, #20]
 8006212:	2300      	movs	r3, #0
 8006214:	9309      	str	r3, [sp, #36]	@ 0x24
 8006216:	2320      	movs	r3, #32
 8006218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800621c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006220:	2330      	movs	r3, #48	@ 0x30
 8006222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063c0 <_svfiprintf_r+0x1e4>
 8006226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800622a:	f04f 0901 	mov.w	r9, #1
 800622e:	4623      	mov	r3, r4
 8006230:	469a      	mov	sl, r3
 8006232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006236:	b10a      	cbz	r2, 800623c <_svfiprintf_r+0x60>
 8006238:	2a25      	cmp	r2, #37	@ 0x25
 800623a:	d1f9      	bne.n	8006230 <_svfiprintf_r+0x54>
 800623c:	ebba 0b04 	subs.w	fp, sl, r4
 8006240:	d00b      	beq.n	800625a <_svfiprintf_r+0x7e>
 8006242:	465b      	mov	r3, fp
 8006244:	4622      	mov	r2, r4
 8006246:	4629      	mov	r1, r5
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ff6b 	bl	8006124 <__ssputs_r>
 800624e:	3001      	adds	r0, #1
 8006250:	f000 80a7 	beq.w	80063a2 <_svfiprintf_r+0x1c6>
 8006254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006256:	445a      	add	r2, fp
 8006258:	9209      	str	r2, [sp, #36]	@ 0x24
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 809f 	beq.w	80063a2 <_svfiprintf_r+0x1c6>
 8006264:	2300      	movs	r3, #0
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800626e:	f10a 0a01 	add.w	sl, sl, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	9307      	str	r3, [sp, #28]
 8006276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800627a:	931a      	str	r3, [sp, #104]	@ 0x68
 800627c:	4654      	mov	r4, sl
 800627e:	2205      	movs	r2, #5
 8006280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006284:	484e      	ldr	r0, [pc, #312]	@ (80063c0 <_svfiprintf_r+0x1e4>)
 8006286:	f7f9 ffab 	bl	80001e0 <memchr>
 800628a:	9a04      	ldr	r2, [sp, #16]
 800628c:	b9d8      	cbnz	r0, 80062c6 <_svfiprintf_r+0xea>
 800628e:	06d0      	lsls	r0, r2, #27
 8006290:	bf44      	itt	mi
 8006292:	2320      	movmi	r3, #32
 8006294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006298:	0711      	lsls	r1, r2, #28
 800629a:	bf44      	itt	mi
 800629c:	232b      	movmi	r3, #43	@ 0x2b
 800629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062a2:	f89a 3000 	ldrb.w	r3, [sl]
 80062a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a8:	d015      	beq.n	80062d6 <_svfiprintf_r+0xfa>
 80062aa:	9a07      	ldr	r2, [sp, #28]
 80062ac:	4654      	mov	r4, sl
 80062ae:	2000      	movs	r0, #0
 80062b0:	f04f 0c0a 	mov.w	ip, #10
 80062b4:	4621      	mov	r1, r4
 80062b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ba:	3b30      	subs	r3, #48	@ 0x30
 80062bc:	2b09      	cmp	r3, #9
 80062be:	d94b      	bls.n	8006358 <_svfiprintf_r+0x17c>
 80062c0:	b1b0      	cbz	r0, 80062f0 <_svfiprintf_r+0x114>
 80062c2:	9207      	str	r2, [sp, #28]
 80062c4:	e014      	b.n	80062f0 <_svfiprintf_r+0x114>
 80062c6:	eba0 0308 	sub.w	r3, r0, r8
 80062ca:	fa09 f303 	lsl.w	r3, r9, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	46a2      	mov	sl, r4
 80062d4:	e7d2      	b.n	800627c <_svfiprintf_r+0xa0>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	9103      	str	r1, [sp, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbb      	ittet	lt
 80062e2:	425b      	neglt	r3, r3
 80062e4:	f042 0202 	orrlt.w	r2, r2, #2
 80062e8:	9307      	strge	r3, [sp, #28]
 80062ea:	9307      	strlt	r3, [sp, #28]
 80062ec:	bfb8      	it	lt
 80062ee:	9204      	strlt	r2, [sp, #16]
 80062f0:	7823      	ldrb	r3, [r4, #0]
 80062f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80062f4:	d10a      	bne.n	800630c <_svfiprintf_r+0x130>
 80062f6:	7863      	ldrb	r3, [r4, #1]
 80062f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062fa:	d132      	bne.n	8006362 <_svfiprintf_r+0x186>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	9203      	str	r2, [sp, #12]
 8006304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006308:	3402      	adds	r4, #2
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063d0 <_svfiprintf_r+0x1f4>
 8006310:	7821      	ldrb	r1, [r4, #0]
 8006312:	2203      	movs	r2, #3
 8006314:	4650      	mov	r0, sl
 8006316:	f7f9 ff63 	bl	80001e0 <memchr>
 800631a:	b138      	cbz	r0, 800632c <_svfiprintf_r+0x150>
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	eba0 000a 	sub.w	r0, r0, sl
 8006322:	2240      	movs	r2, #64	@ 0x40
 8006324:	4082      	lsls	r2, r0
 8006326:	4313      	orrs	r3, r2
 8006328:	3401      	adds	r4, #1
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006330:	4824      	ldr	r0, [pc, #144]	@ (80063c4 <_svfiprintf_r+0x1e8>)
 8006332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006336:	2206      	movs	r2, #6
 8006338:	f7f9 ff52 	bl	80001e0 <memchr>
 800633c:	2800      	cmp	r0, #0
 800633e:	d036      	beq.n	80063ae <_svfiprintf_r+0x1d2>
 8006340:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <_svfiprintf_r+0x1ec>)
 8006342:	bb1b      	cbnz	r3, 800638c <_svfiprintf_r+0x1b0>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	3307      	adds	r3, #7
 8006348:	f023 0307 	bic.w	r3, r3, #7
 800634c:	3308      	adds	r3, #8
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006352:	4433      	add	r3, r6
 8006354:	9309      	str	r3, [sp, #36]	@ 0x24
 8006356:	e76a      	b.n	800622e <_svfiprintf_r+0x52>
 8006358:	fb0c 3202 	mla	r2, ip, r2, r3
 800635c:	460c      	mov	r4, r1
 800635e:	2001      	movs	r0, #1
 8006360:	e7a8      	b.n	80062b4 <_svfiprintf_r+0xd8>
 8006362:	2300      	movs	r3, #0
 8006364:	3401      	adds	r4, #1
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	4619      	mov	r1, r3
 800636a:	f04f 0c0a 	mov.w	ip, #10
 800636e:	4620      	mov	r0, r4
 8006370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006374:	3a30      	subs	r2, #48	@ 0x30
 8006376:	2a09      	cmp	r2, #9
 8006378:	d903      	bls.n	8006382 <_svfiprintf_r+0x1a6>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0c6      	beq.n	800630c <_svfiprintf_r+0x130>
 800637e:	9105      	str	r1, [sp, #20]
 8006380:	e7c4      	b.n	800630c <_svfiprintf_r+0x130>
 8006382:	fb0c 2101 	mla	r1, ip, r1, r2
 8006386:	4604      	mov	r4, r0
 8006388:	2301      	movs	r3, #1
 800638a:	e7f0      	b.n	800636e <_svfiprintf_r+0x192>
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	462a      	mov	r2, r5
 8006392:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <_svfiprintf_r+0x1f0>)
 8006394:	a904      	add	r1, sp, #16
 8006396:	4638      	mov	r0, r7
 8006398:	f7fd fe98 	bl	80040cc <_printf_float>
 800639c:	1c42      	adds	r2, r0, #1
 800639e:	4606      	mov	r6, r0
 80063a0:	d1d6      	bne.n	8006350 <_svfiprintf_r+0x174>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	065b      	lsls	r3, r3, #25
 80063a6:	f53f af2d 	bmi.w	8006204 <_svfiprintf_r+0x28>
 80063aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063ac:	e72c      	b.n	8006208 <_svfiprintf_r+0x2c>
 80063ae:	ab03      	add	r3, sp, #12
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	462a      	mov	r2, r5
 80063b4:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <_svfiprintf_r+0x1f0>)
 80063b6:	a904      	add	r1, sp, #16
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7fe f91f 	bl	80045fc <_printf_i>
 80063be:	e7ed      	b.n	800639c <_svfiprintf_r+0x1c0>
 80063c0:	08007388 	.word	0x08007388
 80063c4:	08007392 	.word	0x08007392
 80063c8:	080040cd 	.word	0x080040cd
 80063cc:	08006125 	.word	0x08006125
 80063d0:	0800738e 	.word	0x0800738e

080063d4 <__sflush_r>:
 80063d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	0716      	lsls	r6, r2, #28
 80063de:	4605      	mov	r5, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	d454      	bmi.n	800648e <__sflush_r+0xba>
 80063e4:	684b      	ldr	r3, [r1, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dc02      	bgt.n	80063f0 <__sflush_r+0x1c>
 80063ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd48      	ble.n	8006482 <__sflush_r+0xae>
 80063f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d045      	beq.n	8006482 <__sflush_r+0xae>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063fc:	682f      	ldr	r7, [r5, #0]
 80063fe:	6a21      	ldr	r1, [r4, #32]
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	d030      	beq.n	8006466 <__sflush_r+0x92>
 8006404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	0759      	lsls	r1, r3, #29
 800640a:	d505      	bpl.n	8006418 <__sflush_r+0x44>
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006412:	b10b      	cbz	r3, 8006418 <__sflush_r+0x44>
 8006414:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800641c:	6a21      	ldr	r1, [r4, #32]
 800641e:	4628      	mov	r0, r5
 8006420:	47b0      	blx	r6
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	d106      	bne.n	8006436 <__sflush_r+0x62>
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	291d      	cmp	r1, #29
 800642c:	d82b      	bhi.n	8006486 <__sflush_r+0xb2>
 800642e:	4a2a      	ldr	r2, [pc, #168]	@ (80064d8 <__sflush_r+0x104>)
 8006430:	410a      	asrs	r2, r1
 8006432:	07d6      	lsls	r6, r2, #31
 8006434:	d427      	bmi.n	8006486 <__sflush_r+0xb2>
 8006436:	2200      	movs	r2, #0
 8006438:	6062      	str	r2, [r4, #4]
 800643a:	04d9      	lsls	r1, r3, #19
 800643c:	6922      	ldr	r2, [r4, #16]
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	d504      	bpl.n	800644c <__sflush_r+0x78>
 8006442:	1c42      	adds	r2, r0, #1
 8006444:	d101      	bne.n	800644a <__sflush_r+0x76>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b903      	cbnz	r3, 800644c <__sflush_r+0x78>
 800644a:	6560      	str	r0, [r4, #84]	@ 0x54
 800644c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800644e:	602f      	str	r7, [r5, #0]
 8006450:	b1b9      	cbz	r1, 8006482 <__sflush_r+0xae>
 8006452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006456:	4299      	cmp	r1, r3
 8006458:	d002      	beq.n	8006460 <__sflush_r+0x8c>
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff f9e0 	bl	8005820 <_free_r>
 8006460:	2300      	movs	r3, #0
 8006462:	6363      	str	r3, [r4, #52]	@ 0x34
 8006464:	e00d      	b.n	8006482 <__sflush_r+0xae>
 8006466:	2301      	movs	r3, #1
 8006468:	4628      	mov	r0, r5
 800646a:	47b0      	blx	r6
 800646c:	4602      	mov	r2, r0
 800646e:	1c50      	adds	r0, r2, #1
 8006470:	d1c9      	bne.n	8006406 <__sflush_r+0x32>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0c6      	beq.n	8006406 <__sflush_r+0x32>
 8006478:	2b1d      	cmp	r3, #29
 800647a:	d001      	beq.n	8006480 <__sflush_r+0xac>
 800647c:	2b16      	cmp	r3, #22
 800647e:	d11e      	bne.n	80064be <__sflush_r+0xea>
 8006480:	602f      	str	r7, [r5, #0]
 8006482:	2000      	movs	r0, #0
 8006484:	e022      	b.n	80064cc <__sflush_r+0xf8>
 8006486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648a:	b21b      	sxth	r3, r3
 800648c:	e01b      	b.n	80064c6 <__sflush_r+0xf2>
 800648e:	690f      	ldr	r7, [r1, #16]
 8006490:	2f00      	cmp	r7, #0
 8006492:	d0f6      	beq.n	8006482 <__sflush_r+0xae>
 8006494:	0793      	lsls	r3, r2, #30
 8006496:	680e      	ldr	r6, [r1, #0]
 8006498:	bf08      	it	eq
 800649a:	694b      	ldreq	r3, [r1, #20]
 800649c:	600f      	str	r7, [r1, #0]
 800649e:	bf18      	it	ne
 80064a0:	2300      	movne	r3, #0
 80064a2:	eba6 0807 	sub.w	r8, r6, r7
 80064a6:	608b      	str	r3, [r1, #8]
 80064a8:	f1b8 0f00 	cmp.w	r8, #0
 80064ac:	dde9      	ble.n	8006482 <__sflush_r+0xae>
 80064ae:	6a21      	ldr	r1, [r4, #32]
 80064b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064b2:	4643      	mov	r3, r8
 80064b4:	463a      	mov	r2, r7
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b0      	blx	r6
 80064ba:	2800      	cmp	r0, #0
 80064bc:	dc08      	bgt.n	80064d0 <__sflush_r+0xfc>
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	4407      	add	r7, r0
 80064d2:	eba8 0800 	sub.w	r8, r8, r0
 80064d6:	e7e7      	b.n	80064a8 <__sflush_r+0xd4>
 80064d8:	dfbffffe 	.word	0xdfbffffe

080064dc <_fflush_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b913      	cbnz	r3, 80064ec <_fflush_r+0x10>
 80064e6:	2500      	movs	r5, #0
 80064e8:	4628      	mov	r0, r5
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	b118      	cbz	r0, 80064f6 <_fflush_r+0x1a>
 80064ee:	6a03      	ldr	r3, [r0, #32]
 80064f0:	b90b      	cbnz	r3, 80064f6 <_fflush_r+0x1a>
 80064f2:	f7fe fa2f 	bl	8004954 <__sinit>
 80064f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f3      	beq.n	80064e6 <_fflush_r+0xa>
 80064fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006500:	07d0      	lsls	r0, r2, #31
 8006502:	d404      	bmi.n	800650e <_fflush_r+0x32>
 8006504:	0599      	lsls	r1, r3, #22
 8006506:	d402      	bmi.n	800650e <_fflush_r+0x32>
 8006508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800650a:	f7fe fb3a 	bl	8004b82 <__retarget_lock_acquire_recursive>
 800650e:	4628      	mov	r0, r5
 8006510:	4621      	mov	r1, r4
 8006512:	f7ff ff5f 	bl	80063d4 <__sflush_r>
 8006516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006518:	07da      	lsls	r2, r3, #31
 800651a:	4605      	mov	r5, r0
 800651c:	d4e4      	bmi.n	80064e8 <_fflush_r+0xc>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	059b      	lsls	r3, r3, #22
 8006522:	d4e1      	bmi.n	80064e8 <_fflush_r+0xc>
 8006524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006526:	f7fe fb2d 	bl	8004b84 <__retarget_lock_release_recursive>
 800652a:	e7dd      	b.n	80064e8 <_fflush_r+0xc>

0800652c <memmove>:
 800652c:	4288      	cmp	r0, r1
 800652e:	b510      	push	{r4, lr}
 8006530:	eb01 0402 	add.w	r4, r1, r2
 8006534:	d902      	bls.n	800653c <memmove+0x10>
 8006536:	4284      	cmp	r4, r0
 8006538:	4623      	mov	r3, r4
 800653a:	d807      	bhi.n	800654c <memmove+0x20>
 800653c:	1e43      	subs	r3, r0, #1
 800653e:	42a1      	cmp	r1, r4
 8006540:	d008      	beq.n	8006554 <memmove+0x28>
 8006542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800654a:	e7f8      	b.n	800653e <memmove+0x12>
 800654c:	4402      	add	r2, r0
 800654e:	4601      	mov	r1, r0
 8006550:	428a      	cmp	r2, r1
 8006552:	d100      	bne.n	8006556 <memmove+0x2a>
 8006554:	bd10      	pop	{r4, pc}
 8006556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800655a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800655e:	e7f7      	b.n	8006550 <memmove+0x24>

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	@ (800657c <_sbrk_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fb fb4c 	bl	8001c08 <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20000490 	.word	0x20000490

08006580 <memcpy>:
 8006580:	440a      	add	r2, r1
 8006582:	4291      	cmp	r1, r2
 8006584:	f100 33ff 	add.w	r3, r0, #4294967295
 8006588:	d100      	bne.n	800658c <memcpy+0xc>
 800658a:	4770      	bx	lr
 800658c:	b510      	push	{r4, lr}
 800658e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006596:	4291      	cmp	r1, r2
 8006598:	d1f9      	bne.n	800658e <memcpy+0xe>
 800659a:	bd10      	pop	{r4, pc}

0800659c <__assert_func>:
 800659c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800659e:	4614      	mov	r4, r2
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b09      	ldr	r3, [pc, #36]	@ (80065c8 <__assert_func+0x2c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4605      	mov	r5, r0
 80065a8:	68d8      	ldr	r0, [r3, #12]
 80065aa:	b954      	cbnz	r4, 80065c2 <__assert_func+0x26>
 80065ac:	4b07      	ldr	r3, [pc, #28]	@ (80065cc <__assert_func+0x30>)
 80065ae:	461c      	mov	r4, r3
 80065b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065b4:	9100      	str	r1, [sp, #0]
 80065b6:	462b      	mov	r3, r5
 80065b8:	4905      	ldr	r1, [pc, #20]	@ (80065d0 <__assert_func+0x34>)
 80065ba:	f000 f86f 	bl	800669c <fiprintf>
 80065be:	f000 f87f 	bl	80066c0 <abort>
 80065c2:	4b04      	ldr	r3, [pc, #16]	@ (80065d4 <__assert_func+0x38>)
 80065c4:	e7f4      	b.n	80065b0 <__assert_func+0x14>
 80065c6:	bf00      	nop
 80065c8:	20000020 	.word	0x20000020
 80065cc:	080073de 	.word	0x080073de
 80065d0:	080073b0 	.word	0x080073b0
 80065d4:	080073a3 	.word	0x080073a3

080065d8 <_calloc_r>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	fba1 5402 	umull	r5, r4, r1, r2
 80065de:	b93c      	cbnz	r4, 80065f0 <_calloc_r+0x18>
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7ff f991 	bl	8005908 <_malloc_r>
 80065e6:	4606      	mov	r6, r0
 80065e8:	b928      	cbnz	r0, 80065f6 <_calloc_r+0x1e>
 80065ea:	2600      	movs	r6, #0
 80065ec:	4630      	mov	r0, r6
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	220c      	movs	r2, #12
 80065f2:	6002      	str	r2, [r0, #0]
 80065f4:	e7f9      	b.n	80065ea <_calloc_r+0x12>
 80065f6:	462a      	mov	r2, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7fe fa44 	bl	8004a86 <memset>
 80065fe:	e7f5      	b.n	80065ec <_calloc_r+0x14>

08006600 <__ascii_mbtowc>:
 8006600:	b082      	sub	sp, #8
 8006602:	b901      	cbnz	r1, 8006606 <__ascii_mbtowc+0x6>
 8006604:	a901      	add	r1, sp, #4
 8006606:	b142      	cbz	r2, 800661a <__ascii_mbtowc+0x1a>
 8006608:	b14b      	cbz	r3, 800661e <__ascii_mbtowc+0x1e>
 800660a:	7813      	ldrb	r3, [r2, #0]
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	1e10      	subs	r0, r2, #0
 8006612:	bf18      	it	ne
 8006614:	2001      	movne	r0, #1
 8006616:	b002      	add	sp, #8
 8006618:	4770      	bx	lr
 800661a:	4610      	mov	r0, r2
 800661c:	e7fb      	b.n	8006616 <__ascii_mbtowc+0x16>
 800661e:	f06f 0001 	mvn.w	r0, #1
 8006622:	e7f8      	b.n	8006616 <__ascii_mbtowc+0x16>

08006624 <_realloc_r>:
 8006624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006628:	4680      	mov	r8, r0
 800662a:	4615      	mov	r5, r2
 800662c:	460c      	mov	r4, r1
 800662e:	b921      	cbnz	r1, 800663a <_realloc_r+0x16>
 8006630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006634:	4611      	mov	r1, r2
 8006636:	f7ff b967 	b.w	8005908 <_malloc_r>
 800663a:	b92a      	cbnz	r2, 8006648 <_realloc_r+0x24>
 800663c:	f7ff f8f0 	bl	8005820 <_free_r>
 8006640:	2400      	movs	r4, #0
 8006642:	4620      	mov	r0, r4
 8006644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006648:	f000 f841 	bl	80066ce <_malloc_usable_size_r>
 800664c:	4285      	cmp	r5, r0
 800664e:	4606      	mov	r6, r0
 8006650:	d802      	bhi.n	8006658 <_realloc_r+0x34>
 8006652:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006656:	d8f4      	bhi.n	8006642 <_realloc_r+0x1e>
 8006658:	4629      	mov	r1, r5
 800665a:	4640      	mov	r0, r8
 800665c:	f7ff f954 	bl	8005908 <_malloc_r>
 8006660:	4607      	mov	r7, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	d0ec      	beq.n	8006640 <_realloc_r+0x1c>
 8006666:	42b5      	cmp	r5, r6
 8006668:	462a      	mov	r2, r5
 800666a:	4621      	mov	r1, r4
 800666c:	bf28      	it	cs
 800666e:	4632      	movcs	r2, r6
 8006670:	f7ff ff86 	bl	8006580 <memcpy>
 8006674:	4621      	mov	r1, r4
 8006676:	4640      	mov	r0, r8
 8006678:	f7ff f8d2 	bl	8005820 <_free_r>
 800667c:	463c      	mov	r4, r7
 800667e:	e7e0      	b.n	8006642 <_realloc_r+0x1e>

08006680 <__ascii_wctomb>:
 8006680:	4603      	mov	r3, r0
 8006682:	4608      	mov	r0, r1
 8006684:	b141      	cbz	r1, 8006698 <__ascii_wctomb+0x18>
 8006686:	2aff      	cmp	r2, #255	@ 0xff
 8006688:	d904      	bls.n	8006694 <__ascii_wctomb+0x14>
 800668a:	228a      	movs	r2, #138	@ 0x8a
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	f04f 30ff 	mov.w	r0, #4294967295
 8006692:	4770      	bx	lr
 8006694:	700a      	strb	r2, [r1, #0]
 8006696:	2001      	movs	r0, #1
 8006698:	4770      	bx	lr
	...

0800669c <fiprintf>:
 800669c:	b40e      	push	{r1, r2, r3}
 800669e:	b503      	push	{r0, r1, lr}
 80066a0:	4601      	mov	r1, r0
 80066a2:	ab03      	add	r3, sp, #12
 80066a4:	4805      	ldr	r0, [pc, #20]	@ (80066bc <fiprintf+0x20>)
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f000 f83f 	bl	8006730 <_vfiprintf_r>
 80066b2:	b002      	add	sp, #8
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b003      	add	sp, #12
 80066ba:	4770      	bx	lr
 80066bc:	20000020 	.word	0x20000020

080066c0 <abort>:
 80066c0:	b508      	push	{r3, lr}
 80066c2:	2006      	movs	r0, #6
 80066c4:	f000 fa08 	bl	8006ad8 <raise>
 80066c8:	2001      	movs	r0, #1
 80066ca:	f7fb fa24 	bl	8001b16 <_exit>

080066ce <_malloc_usable_size_r>:
 80066ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d2:	1f18      	subs	r0, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bfbc      	itt	lt
 80066d8:	580b      	ldrlt	r3, [r1, r0]
 80066da:	18c0      	addlt	r0, r0, r3
 80066dc:	4770      	bx	lr

080066de <__sfputc_r>:
 80066de:	6893      	ldr	r3, [r2, #8]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	b410      	push	{r4}
 80066e6:	6093      	str	r3, [r2, #8]
 80066e8:	da08      	bge.n	80066fc <__sfputc_r+0x1e>
 80066ea:	6994      	ldr	r4, [r2, #24]
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	db01      	blt.n	80066f4 <__sfputc_r+0x16>
 80066f0:	290a      	cmp	r1, #10
 80066f2:	d103      	bne.n	80066fc <__sfputc_r+0x1e>
 80066f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f8:	f000 b932 	b.w	8006960 <__swbuf_r>
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	1c58      	adds	r0, r3, #1
 8006700:	6010      	str	r0, [r2, #0]
 8006702:	7019      	strb	r1, [r3, #0]
 8006704:	4608      	mov	r0, r1
 8006706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670a:	4770      	bx	lr

0800670c <__sfputs_r>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	4606      	mov	r6, r0
 8006710:	460f      	mov	r7, r1
 8006712:	4614      	mov	r4, r2
 8006714:	18d5      	adds	r5, r2, r3
 8006716:	42ac      	cmp	r4, r5
 8006718:	d101      	bne.n	800671e <__sfputs_r+0x12>
 800671a:	2000      	movs	r0, #0
 800671c:	e007      	b.n	800672e <__sfputs_r+0x22>
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	463a      	mov	r2, r7
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff ffda 	bl	80066de <__sfputc_r>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	d1f3      	bne.n	8006716 <__sfputs_r+0xa>
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006730 <_vfiprintf_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	460d      	mov	r5, r1
 8006736:	b09d      	sub	sp, #116	@ 0x74
 8006738:	4614      	mov	r4, r2
 800673a:	4698      	mov	r8, r3
 800673c:	4606      	mov	r6, r0
 800673e:	b118      	cbz	r0, 8006748 <_vfiprintf_r+0x18>
 8006740:	6a03      	ldr	r3, [r0, #32]
 8006742:	b90b      	cbnz	r3, 8006748 <_vfiprintf_r+0x18>
 8006744:	f7fe f906 	bl	8004954 <__sinit>
 8006748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800674a:	07d9      	lsls	r1, r3, #31
 800674c:	d405      	bmi.n	800675a <_vfiprintf_r+0x2a>
 800674e:	89ab      	ldrh	r3, [r5, #12]
 8006750:	059a      	lsls	r2, r3, #22
 8006752:	d402      	bmi.n	800675a <_vfiprintf_r+0x2a>
 8006754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006756:	f7fe fa14 	bl	8004b82 <__retarget_lock_acquire_recursive>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	071b      	lsls	r3, r3, #28
 800675e:	d501      	bpl.n	8006764 <_vfiprintf_r+0x34>
 8006760:	692b      	ldr	r3, [r5, #16]
 8006762:	b99b      	cbnz	r3, 800678c <_vfiprintf_r+0x5c>
 8006764:	4629      	mov	r1, r5
 8006766:	4630      	mov	r0, r6
 8006768:	f000 f938 	bl	80069dc <__swsetup_r>
 800676c:	b170      	cbz	r0, 800678c <_vfiprintf_r+0x5c>
 800676e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006770:	07dc      	lsls	r4, r3, #31
 8006772:	d504      	bpl.n	800677e <_vfiprintf_r+0x4e>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b01d      	add	sp, #116	@ 0x74
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	0598      	lsls	r0, r3, #22
 8006782:	d4f7      	bmi.n	8006774 <_vfiprintf_r+0x44>
 8006784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006786:	f7fe f9fd 	bl	8004b84 <__retarget_lock_release_recursive>
 800678a:	e7f3      	b.n	8006774 <_vfiprintf_r+0x44>
 800678c:	2300      	movs	r3, #0
 800678e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006790:	2320      	movs	r3, #32
 8006792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006796:	f8cd 800c 	str.w	r8, [sp, #12]
 800679a:	2330      	movs	r3, #48	@ 0x30
 800679c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800694c <_vfiprintf_r+0x21c>
 80067a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067a4:	f04f 0901 	mov.w	r9, #1
 80067a8:	4623      	mov	r3, r4
 80067aa:	469a      	mov	sl, r3
 80067ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b0:	b10a      	cbz	r2, 80067b6 <_vfiprintf_r+0x86>
 80067b2:	2a25      	cmp	r2, #37	@ 0x25
 80067b4:	d1f9      	bne.n	80067aa <_vfiprintf_r+0x7a>
 80067b6:	ebba 0b04 	subs.w	fp, sl, r4
 80067ba:	d00b      	beq.n	80067d4 <_vfiprintf_r+0xa4>
 80067bc:	465b      	mov	r3, fp
 80067be:	4622      	mov	r2, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7ff ffa2 	bl	800670c <__sfputs_r>
 80067c8:	3001      	adds	r0, #1
 80067ca:	f000 80a7 	beq.w	800691c <_vfiprintf_r+0x1ec>
 80067ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d0:	445a      	add	r2, fp
 80067d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d4:	f89a 3000 	ldrb.w	r3, [sl]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 809f 	beq.w	800691c <_vfiprintf_r+0x1ec>
 80067de:	2300      	movs	r3, #0
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e8:	f10a 0a01 	add.w	sl, sl, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80067f6:	4654      	mov	r4, sl
 80067f8:	2205      	movs	r2, #5
 80067fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fe:	4853      	ldr	r0, [pc, #332]	@ (800694c <_vfiprintf_r+0x21c>)
 8006800:	f7f9 fcee 	bl	80001e0 <memchr>
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	b9d8      	cbnz	r0, 8006840 <_vfiprintf_r+0x110>
 8006808:	06d1      	lsls	r1, r2, #27
 800680a:	bf44      	itt	mi
 800680c:	2320      	movmi	r3, #32
 800680e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006812:	0713      	lsls	r3, r2, #28
 8006814:	bf44      	itt	mi
 8006816:	232b      	movmi	r3, #43	@ 0x2b
 8006818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800681c:	f89a 3000 	ldrb.w	r3, [sl]
 8006820:	2b2a      	cmp	r3, #42	@ 0x2a
 8006822:	d015      	beq.n	8006850 <_vfiprintf_r+0x120>
 8006824:	9a07      	ldr	r2, [sp, #28]
 8006826:	4654      	mov	r4, sl
 8006828:	2000      	movs	r0, #0
 800682a:	f04f 0c0a 	mov.w	ip, #10
 800682e:	4621      	mov	r1, r4
 8006830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006834:	3b30      	subs	r3, #48	@ 0x30
 8006836:	2b09      	cmp	r3, #9
 8006838:	d94b      	bls.n	80068d2 <_vfiprintf_r+0x1a2>
 800683a:	b1b0      	cbz	r0, 800686a <_vfiprintf_r+0x13a>
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	e014      	b.n	800686a <_vfiprintf_r+0x13a>
 8006840:	eba0 0308 	sub.w	r3, r0, r8
 8006844:	fa09 f303 	lsl.w	r3, r9, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	9304      	str	r3, [sp, #16]
 800684c:	46a2      	mov	sl, r4
 800684e:	e7d2      	b.n	80067f6 <_vfiprintf_r+0xc6>
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	1d19      	adds	r1, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	9103      	str	r1, [sp, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfbb      	ittet	lt
 800685c:	425b      	neglt	r3, r3
 800685e:	f042 0202 	orrlt.w	r2, r2, #2
 8006862:	9307      	strge	r3, [sp, #28]
 8006864:	9307      	strlt	r3, [sp, #28]
 8006866:	bfb8      	it	lt
 8006868:	9204      	strlt	r2, [sp, #16]
 800686a:	7823      	ldrb	r3, [r4, #0]
 800686c:	2b2e      	cmp	r3, #46	@ 0x2e
 800686e:	d10a      	bne.n	8006886 <_vfiprintf_r+0x156>
 8006870:	7863      	ldrb	r3, [r4, #1]
 8006872:	2b2a      	cmp	r3, #42	@ 0x2a
 8006874:	d132      	bne.n	80068dc <_vfiprintf_r+0x1ac>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	9203      	str	r2, [sp, #12]
 800687e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006882:	3402      	adds	r4, #2
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800695c <_vfiprintf_r+0x22c>
 800688a:	7821      	ldrb	r1, [r4, #0]
 800688c:	2203      	movs	r2, #3
 800688e:	4650      	mov	r0, sl
 8006890:	f7f9 fca6 	bl	80001e0 <memchr>
 8006894:	b138      	cbz	r0, 80068a6 <_vfiprintf_r+0x176>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	eba0 000a 	sub.w	r0, r0, sl
 800689c:	2240      	movs	r2, #64	@ 0x40
 800689e:	4082      	lsls	r2, r0
 80068a0:	4313      	orrs	r3, r2
 80068a2:	3401      	adds	r4, #1
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068aa:	4829      	ldr	r0, [pc, #164]	@ (8006950 <_vfiprintf_r+0x220>)
 80068ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068b0:	2206      	movs	r2, #6
 80068b2:	f7f9 fc95 	bl	80001e0 <memchr>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d03f      	beq.n	800693a <_vfiprintf_r+0x20a>
 80068ba:	4b26      	ldr	r3, [pc, #152]	@ (8006954 <_vfiprintf_r+0x224>)
 80068bc:	bb1b      	cbnz	r3, 8006906 <_vfiprintf_r+0x1d6>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	3308      	adds	r3, #8
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068cc:	443b      	add	r3, r7
 80068ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d0:	e76a      	b.n	80067a8 <_vfiprintf_r+0x78>
 80068d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d6:	460c      	mov	r4, r1
 80068d8:	2001      	movs	r0, #1
 80068da:	e7a8      	b.n	800682e <_vfiprintf_r+0xfe>
 80068dc:	2300      	movs	r3, #0
 80068de:	3401      	adds	r4, #1
 80068e0:	9305      	str	r3, [sp, #20]
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0c0a 	mov.w	ip, #10
 80068e8:	4620      	mov	r0, r4
 80068ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ee:	3a30      	subs	r2, #48	@ 0x30
 80068f0:	2a09      	cmp	r2, #9
 80068f2:	d903      	bls.n	80068fc <_vfiprintf_r+0x1cc>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0c6      	beq.n	8006886 <_vfiprintf_r+0x156>
 80068f8:	9105      	str	r1, [sp, #20]
 80068fa:	e7c4      	b.n	8006886 <_vfiprintf_r+0x156>
 80068fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006900:	4604      	mov	r4, r0
 8006902:	2301      	movs	r3, #1
 8006904:	e7f0      	b.n	80068e8 <_vfiprintf_r+0x1b8>
 8006906:	ab03      	add	r3, sp, #12
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	462a      	mov	r2, r5
 800690c:	4b12      	ldr	r3, [pc, #72]	@ (8006958 <_vfiprintf_r+0x228>)
 800690e:	a904      	add	r1, sp, #16
 8006910:	4630      	mov	r0, r6
 8006912:	f7fd fbdb 	bl	80040cc <_printf_float>
 8006916:	4607      	mov	r7, r0
 8006918:	1c78      	adds	r0, r7, #1
 800691a:	d1d6      	bne.n	80068ca <_vfiprintf_r+0x19a>
 800691c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	d405      	bmi.n	800692e <_vfiprintf_r+0x1fe>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	059a      	lsls	r2, r3, #22
 8006926:	d402      	bmi.n	800692e <_vfiprintf_r+0x1fe>
 8006928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800692a:	f7fe f92b 	bl	8004b84 <__retarget_lock_release_recursive>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	065b      	lsls	r3, r3, #25
 8006932:	f53f af1f 	bmi.w	8006774 <_vfiprintf_r+0x44>
 8006936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006938:	e71e      	b.n	8006778 <_vfiprintf_r+0x48>
 800693a:	ab03      	add	r3, sp, #12
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	462a      	mov	r2, r5
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <_vfiprintf_r+0x228>)
 8006942:	a904      	add	r1, sp, #16
 8006944:	4630      	mov	r0, r6
 8006946:	f7fd fe59 	bl	80045fc <_printf_i>
 800694a:	e7e4      	b.n	8006916 <_vfiprintf_r+0x1e6>
 800694c:	08007388 	.word	0x08007388
 8006950:	08007392 	.word	0x08007392
 8006954:	080040cd 	.word	0x080040cd
 8006958:	0800670d 	.word	0x0800670d
 800695c:	0800738e 	.word	0x0800738e

08006960 <__swbuf_r>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	460e      	mov	r6, r1
 8006964:	4614      	mov	r4, r2
 8006966:	4605      	mov	r5, r0
 8006968:	b118      	cbz	r0, 8006972 <__swbuf_r+0x12>
 800696a:	6a03      	ldr	r3, [r0, #32]
 800696c:	b90b      	cbnz	r3, 8006972 <__swbuf_r+0x12>
 800696e:	f7fd fff1 	bl	8004954 <__sinit>
 8006972:	69a3      	ldr	r3, [r4, #24]
 8006974:	60a3      	str	r3, [r4, #8]
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	071a      	lsls	r2, r3, #28
 800697a:	d501      	bpl.n	8006980 <__swbuf_r+0x20>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	b943      	cbnz	r3, 8006992 <__swbuf_r+0x32>
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f82a 	bl	80069dc <__swsetup_r>
 8006988:	b118      	cbz	r0, 8006992 <__swbuf_r+0x32>
 800698a:	f04f 37ff 	mov.w	r7, #4294967295
 800698e:	4638      	mov	r0, r7
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	1a98      	subs	r0, r3, r2
 8006998:	6963      	ldr	r3, [r4, #20]
 800699a:	b2f6      	uxtb	r6, r6
 800699c:	4283      	cmp	r3, r0
 800699e:	4637      	mov	r7, r6
 80069a0:	dc05      	bgt.n	80069ae <__swbuf_r+0x4e>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7ff fd99 	bl	80064dc <_fflush_r>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d1ed      	bne.n	800698a <__swbuf_r+0x2a>
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	701e      	strb	r6, [r3, #0]
 80069bc:	6962      	ldr	r2, [r4, #20]
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d004      	beq.n	80069ce <__swbuf_r+0x6e>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	07db      	lsls	r3, r3, #31
 80069c8:	d5e1      	bpl.n	800698e <__swbuf_r+0x2e>
 80069ca:	2e0a      	cmp	r6, #10
 80069cc:	d1df      	bne.n	800698e <__swbuf_r+0x2e>
 80069ce:	4621      	mov	r1, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	f7ff fd83 	bl	80064dc <_fflush_r>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d0d9      	beq.n	800698e <__swbuf_r+0x2e>
 80069da:	e7d6      	b.n	800698a <__swbuf_r+0x2a>

080069dc <__swsetup_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4b29      	ldr	r3, [pc, #164]	@ (8006a84 <__swsetup_r+0xa8>)
 80069e0:	4605      	mov	r5, r0
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	460c      	mov	r4, r1
 80069e6:	b118      	cbz	r0, 80069f0 <__swsetup_r+0x14>
 80069e8:	6a03      	ldr	r3, [r0, #32]
 80069ea:	b90b      	cbnz	r3, 80069f0 <__swsetup_r+0x14>
 80069ec:	f7fd ffb2 	bl	8004954 <__sinit>
 80069f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f4:	0719      	lsls	r1, r3, #28
 80069f6:	d422      	bmi.n	8006a3e <__swsetup_r+0x62>
 80069f8:	06da      	lsls	r2, r3, #27
 80069fa:	d407      	bmi.n	8006a0c <__swsetup_r+0x30>
 80069fc:	2209      	movs	r2, #9
 80069fe:	602a      	str	r2, [r5, #0]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0a:	e033      	b.n	8006a74 <__swsetup_r+0x98>
 8006a0c:	0758      	lsls	r0, r3, #29
 8006a0e:	d512      	bpl.n	8006a36 <__swsetup_r+0x5a>
 8006a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a12:	b141      	cbz	r1, 8006a26 <__swsetup_r+0x4a>
 8006a14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	d002      	beq.n	8006a22 <__swsetup_r+0x46>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f7fe feff 	bl	8005820 <_free_r>
 8006a22:	2300      	movs	r3, #0
 8006a24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0308 	orr.w	r3, r3, #8
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	b94b      	cbnz	r3, 8006a56 <__swsetup_r+0x7a>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a4c:	d003      	beq.n	8006a56 <__swsetup_r+0x7a>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 f883 	bl	8006b5c <__smakebuf_r>
 8006a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5a:	f013 0201 	ands.w	r2, r3, #1
 8006a5e:	d00a      	beq.n	8006a76 <__swsetup_r+0x9a>
 8006a60:	2200      	movs	r2, #0
 8006a62:	60a2      	str	r2, [r4, #8]
 8006a64:	6962      	ldr	r2, [r4, #20]
 8006a66:	4252      	negs	r2, r2
 8006a68:	61a2      	str	r2, [r4, #24]
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	b942      	cbnz	r2, 8006a80 <__swsetup_r+0xa4>
 8006a6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a72:	d1c5      	bne.n	8006a00 <__swsetup_r+0x24>
 8006a74:	bd38      	pop	{r3, r4, r5, pc}
 8006a76:	0799      	lsls	r1, r3, #30
 8006a78:	bf58      	it	pl
 8006a7a:	6962      	ldrpl	r2, [r4, #20]
 8006a7c:	60a2      	str	r2, [r4, #8]
 8006a7e:	e7f4      	b.n	8006a6a <__swsetup_r+0x8e>
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7f7      	b.n	8006a74 <__swsetup_r+0x98>
 8006a84:	20000020 	.word	0x20000020

08006a88 <_raise_r>:
 8006a88:	291f      	cmp	r1, #31
 8006a8a:	b538      	push	{r3, r4, r5, lr}
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	d904      	bls.n	8006a9c <_raise_r+0x14>
 8006a92:	2316      	movs	r3, #22
 8006a94:	6003      	str	r3, [r0, #0]
 8006a96:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a9e:	b112      	cbz	r2, 8006aa6 <_raise_r+0x1e>
 8006aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aa4:	b94b      	cbnz	r3, 8006aba <_raise_r+0x32>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 f830 	bl	8006b0c <_getpid_r>
 8006aac:	4622      	mov	r2, r4
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab6:	f000 b817 	b.w	8006ae8 <_kill_r>
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d00a      	beq.n	8006ad4 <_raise_r+0x4c>
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	d103      	bne.n	8006aca <_raise_r+0x42>
 8006ac2:	2316      	movs	r3, #22
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e7e7      	b.n	8006a9a <_raise_r+0x12>
 8006aca:	2100      	movs	r1, #0
 8006acc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4798      	blx	r3
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7e0      	b.n	8006a9a <_raise_r+0x12>

08006ad8 <raise>:
 8006ad8:	4b02      	ldr	r3, [pc, #8]	@ (8006ae4 <raise+0xc>)
 8006ada:	4601      	mov	r1, r0
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	f7ff bfd3 	b.w	8006a88 <_raise_r>
 8006ae2:	bf00      	nop
 8006ae4:	20000020 	.word	0x20000020

08006ae8 <_kill_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_kill_r+0x20>)
 8006aec:	2300      	movs	r3, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	4611      	mov	r1, r2
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	f7fa fffe 	bl	8001af6 <_kill>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d102      	bne.n	8006b04 <_kill_r+0x1c>
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	b103      	cbz	r3, 8006b04 <_kill_r+0x1c>
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	bf00      	nop
 8006b08:	20000490 	.word	0x20000490

08006b0c <_getpid_r>:
 8006b0c:	f7fa bfeb 	b.w	8001ae6 <_getpid>

08006b10 <__swhatbuf_r>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	b096      	sub	sp, #88	@ 0x58
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	461e      	mov	r6, r3
 8006b20:	da0d      	bge.n	8006b3e <__swhatbuf_r+0x2e>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b28:	f04f 0100 	mov.w	r1, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2340      	movne	r3, #64	@ 0x40
 8006b30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b34:	2000      	movs	r0, #0
 8006b36:	6031      	str	r1, [r6, #0]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	b016      	add	sp, #88	@ 0x58
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	466a      	mov	r2, sp
 8006b40:	f000 f848 	bl	8006bd4 <_fstat_r>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	dbec      	blt.n	8006b22 <__swhatbuf_r+0x12>
 8006b48:	9901      	ldr	r1, [sp, #4]
 8006b4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b52:	4259      	negs	r1, r3
 8006b54:	4159      	adcs	r1, r3
 8006b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b5a:	e7eb      	b.n	8006b34 <__swhatbuf_r+0x24>

08006b5c <__smakebuf_r>:
 8006b5c:	898b      	ldrh	r3, [r1, #12]
 8006b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b60:	079d      	lsls	r5, r3, #30
 8006b62:	4606      	mov	r6, r0
 8006b64:	460c      	mov	r4, r1
 8006b66:	d507      	bpl.n	8006b78 <__smakebuf_r+0x1c>
 8006b68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	6123      	str	r3, [r4, #16]
 8006b70:	2301      	movs	r3, #1
 8006b72:	6163      	str	r3, [r4, #20]
 8006b74:	b003      	add	sp, #12
 8006b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b78:	ab01      	add	r3, sp, #4
 8006b7a:	466a      	mov	r2, sp
 8006b7c:	f7ff ffc8 	bl	8006b10 <__swhatbuf_r>
 8006b80:	9f00      	ldr	r7, [sp, #0]
 8006b82:	4605      	mov	r5, r0
 8006b84:	4639      	mov	r1, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7fe febe 	bl	8005908 <_malloc_r>
 8006b8c:	b948      	cbnz	r0, 8006ba2 <__smakebuf_r+0x46>
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	059a      	lsls	r2, r3, #22
 8006b94:	d4ee      	bmi.n	8006b74 <__smakebuf_r+0x18>
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	f043 0302 	orr.w	r3, r3, #2
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	e7e2      	b.n	8006b68 <__smakebuf_r+0xc>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	6020      	str	r0, [r4, #0]
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bb2:	b15b      	cbz	r3, 8006bcc <__smakebuf_r+0x70>
 8006bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 f81d 	bl	8006bf8 <_isatty_r>
 8006bbe:	b128      	cbz	r0, 8006bcc <__smakebuf_r+0x70>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	431d      	orrs	r5, r3
 8006bd0:	81a5      	strh	r5, [r4, #12]
 8006bd2:	e7cf      	b.n	8006b74 <__smakebuf_r+0x18>

08006bd4 <_fstat_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d07      	ldr	r5, [pc, #28]	@ (8006bf4 <_fstat_r+0x20>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	f7fa ffe8 	bl	8001bb6 <_fstat>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	d102      	bne.n	8006bf0 <_fstat_r+0x1c>
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	b103      	cbz	r3, 8006bf0 <_fstat_r+0x1c>
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	bd38      	pop	{r3, r4, r5, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000490 	.word	0x20000490

08006bf8 <_isatty_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d06      	ldr	r5, [pc, #24]	@ (8006c14 <_isatty_r+0x1c>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f7fa ffe7 	bl	8001bd6 <_isatty>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_isatty_r+0x1a>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_isatty_r+0x1a>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	20000490 	.word	0x20000490

08006c18 <atan2>:
 8006c18:	f000 b802 	b.w	8006c20 <__ieee754_atan2>
 8006c1c:	0000      	movs	r0, r0
	...

08006c20 <__ieee754_atan2>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	ec57 6b11 	vmov	r6, r7, d1
 8006c28:	4273      	negs	r3, r6
 8006c2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006da8 <__ieee754_atan2+0x188>
 8006c2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006c32:	4333      	orrs	r3, r6
 8006c34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	ec51 0b10 	vmov	r0, r1, d0
 8006c3e:	4635      	mov	r5, r6
 8006c40:	d809      	bhi.n	8006c56 <__ieee754_atan2+0x36>
 8006c42:	4244      	negs	r4, r0
 8006c44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c48:	4304      	orrs	r4, r0
 8006c4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006c4e:	4544      	cmp	r4, r8
 8006c50:	468e      	mov	lr, r1
 8006c52:	4681      	mov	r9, r0
 8006c54:	d907      	bls.n	8006c66 <__ieee754_atan2+0x46>
 8006c56:	4632      	mov	r2, r6
 8006c58:	463b      	mov	r3, r7
 8006c5a:	f7f9 fb1f 	bl	800029c <__adddf3>
 8006c5e:	ec41 0b10 	vmov	d0, r0, r1
 8006c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006c6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006c6e:	4334      	orrs	r4, r6
 8006c70:	d103      	bne.n	8006c7a <__ieee754_atan2+0x5a>
 8006c72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c76:	f000 b89b 	b.w	8006db0 <atan>
 8006c7a:	17bc      	asrs	r4, r7, #30
 8006c7c:	f004 0402 	and.w	r4, r4, #2
 8006c80:	ea53 0909 	orrs.w	r9, r3, r9
 8006c84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006c88:	d107      	bne.n	8006c9a <__ieee754_atan2+0x7a>
 8006c8a:	2c02      	cmp	r4, #2
 8006c8c:	d05f      	beq.n	8006d4e <__ieee754_atan2+0x12e>
 8006c8e:	2c03      	cmp	r4, #3
 8006c90:	d1e5      	bne.n	8006c5e <__ieee754_atan2+0x3e>
 8006c92:	a141      	add	r1, pc, #260	@ (adr r1, 8006d98 <__ieee754_atan2+0x178>)
 8006c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c98:	e7e1      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006c9a:	4315      	orrs	r5, r2
 8006c9c:	d106      	bne.n	8006cac <__ieee754_atan2+0x8c>
 8006c9e:	f1be 0f00 	cmp.w	lr, #0
 8006ca2:	da5f      	bge.n	8006d64 <__ieee754_atan2+0x144>
 8006ca4:	a13e      	add	r1, pc, #248	@ (adr r1, 8006da0 <__ieee754_atan2+0x180>)
 8006ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006caa:	e7d8      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006cac:	4542      	cmp	r2, r8
 8006cae:	d10f      	bne.n	8006cd0 <__ieee754_atan2+0xb0>
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cb6:	d107      	bne.n	8006cc8 <__ieee754_atan2+0xa8>
 8006cb8:	2c02      	cmp	r4, #2
 8006cba:	d84c      	bhi.n	8006d56 <__ieee754_atan2+0x136>
 8006cbc:	4b34      	ldr	r3, [pc, #208]	@ (8006d90 <__ieee754_atan2+0x170>)
 8006cbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc6:	e7ca      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006cc8:	2c02      	cmp	r4, #2
 8006cca:	d848      	bhi.n	8006d5e <__ieee754_atan2+0x13e>
 8006ccc:	4b31      	ldr	r3, [pc, #196]	@ (8006d94 <__ieee754_atan2+0x174>)
 8006cce:	e7f6      	b.n	8006cbe <__ieee754_atan2+0x9e>
 8006cd0:	4543      	cmp	r3, r8
 8006cd2:	d0e4      	beq.n	8006c9e <__ieee754_atan2+0x7e>
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006cda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cde:	da1e      	bge.n	8006d1e <__ieee754_atan2+0xfe>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	da01      	bge.n	8006ce8 <__ieee754_atan2+0xc8>
 8006ce4:	323c      	adds	r2, #60	@ 0x3c
 8006ce6:	db1e      	blt.n	8006d26 <__ieee754_atan2+0x106>
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	f7f9 fdb6 	bl	800085c <__aeabi_ddiv>
 8006cf0:	ec41 0b10 	vmov	d0, r0, r1
 8006cf4:	f000 f9f4 	bl	80070e0 <fabs>
 8006cf8:	f000 f85a 	bl	8006db0 <atan>
 8006cfc:	ec51 0b10 	vmov	r0, r1, d0
 8006d00:	2c01      	cmp	r4, #1
 8006d02:	d013      	beq.n	8006d2c <__ieee754_atan2+0x10c>
 8006d04:	2c02      	cmp	r4, #2
 8006d06:	d015      	beq.n	8006d34 <__ieee754_atan2+0x114>
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	d0a8      	beq.n	8006c5e <__ieee754_atan2+0x3e>
 8006d0c:	a318      	add	r3, pc, #96	@ (adr r3, 8006d70 <__ieee754_atan2+0x150>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fac1 	bl	8000298 <__aeabi_dsub>
 8006d16:	a318      	add	r3, pc, #96	@ (adr r3, 8006d78 <__ieee754_atan2+0x158>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	e014      	b.n	8006d48 <__ieee754_atan2+0x128>
 8006d1e:	a118      	add	r1, pc, #96	@ (adr r1, 8006d80 <__ieee754_atan2+0x160>)
 8006d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d24:	e7ec      	b.n	8006d00 <__ieee754_atan2+0xe0>
 8006d26:	2000      	movs	r0, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	e7e9      	b.n	8006d00 <__ieee754_atan2+0xe0>
 8006d2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d30:	4619      	mov	r1, r3
 8006d32:	e794      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d34:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d70 <__ieee754_atan2+0x150>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f7f9 faad 	bl	8000298 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	a10d      	add	r1, pc, #52	@ (adr r1, 8006d78 <__ieee754_atan2+0x158>)
 8006d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d48:	f7f9 faa6 	bl	8000298 <__aeabi_dsub>
 8006d4c:	e787      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d4e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006d78 <__ieee754_atan2+0x158>)
 8006d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d54:	e783      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d56:	a10c      	add	r1, pc, #48	@ (adr r1, 8006d88 <__ieee754_atan2+0x168>)
 8006d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d5c:	e77f      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	e77c      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d64:	a106      	add	r1, pc, #24	@ (adr r1, 8006d80 <__ieee754_atan2+0x160>)
 8006d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6a:	e778      	b.n	8006c5e <__ieee754_atan2+0x3e>
 8006d6c:	f3af 8000 	nop.w
 8006d70:	33145c07 	.word	0x33145c07
 8006d74:	3ca1a626 	.word	0x3ca1a626
 8006d78:	54442d18 	.word	0x54442d18
 8006d7c:	400921fb 	.word	0x400921fb
 8006d80:	54442d18 	.word	0x54442d18
 8006d84:	3ff921fb 	.word	0x3ff921fb
 8006d88:	54442d18 	.word	0x54442d18
 8006d8c:	3fe921fb 	.word	0x3fe921fb
 8006d90:	080074f8 	.word	0x080074f8
 8006d94:	080074e0 	.word	0x080074e0
 8006d98:	54442d18 	.word	0x54442d18
 8006d9c:	c00921fb 	.word	0xc00921fb
 8006da0:	54442d18 	.word	0x54442d18
 8006da4:	bff921fb 	.word	0xbff921fb
 8006da8:	7ff00000 	.word	0x7ff00000
 8006dac:	00000000 	.word	0x00000000

08006db0 <atan>:
 8006db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	ec55 4b10 	vmov	r4, r5, d0
 8006db8:	4bbf      	ldr	r3, [pc, #764]	@ (80070b8 <atan+0x308>)
 8006dba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	46ab      	mov	fp, r5
 8006dc2:	d918      	bls.n	8006df6 <atan+0x46>
 8006dc4:	4bbd      	ldr	r3, [pc, #756]	@ (80070bc <atan+0x30c>)
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	d801      	bhi.n	8006dce <atan+0x1e>
 8006dca:	d109      	bne.n	8006de0 <atan+0x30>
 8006dcc:	b144      	cbz	r4, 8006de0 <atan+0x30>
 8006dce:	4622      	mov	r2, r4
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 fa61 	bl	800029c <__adddf3>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	e006      	b.n	8006dee <atan+0x3e>
 8006de0:	f1bb 0f00 	cmp.w	fp, #0
 8006de4:	f340 812b 	ble.w	800703e <atan+0x28e>
 8006de8:	a597      	add	r5, pc, #604	@ (adr r5, 8007048 <atan+0x298>)
 8006dea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dee:	ec45 4b10 	vmov	d0, r4, r5
 8006df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	4bb2      	ldr	r3, [pc, #712]	@ (80070c0 <atan+0x310>)
 8006df8:	429e      	cmp	r6, r3
 8006dfa:	d813      	bhi.n	8006e24 <atan+0x74>
 8006dfc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006e00:	429e      	cmp	r6, r3
 8006e02:	d80c      	bhi.n	8006e1e <atan+0x6e>
 8006e04:	a392      	add	r3, pc, #584	@ (adr r3, 8007050 <atan+0x2a0>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fa45 	bl	800029c <__adddf3>
 8006e12:	4bac      	ldr	r3, [pc, #688]	@ (80070c4 <atan+0x314>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	f7f9 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d1e7      	bne.n	8006dee <atan+0x3e>
 8006e1e:	f04f 3aff 	mov.w	sl, #4294967295
 8006e22:	e029      	b.n	8006e78 <atan+0xc8>
 8006e24:	f000 f95c 	bl	80070e0 <fabs>
 8006e28:	4ba7      	ldr	r3, [pc, #668]	@ (80070c8 <atan+0x318>)
 8006e2a:	429e      	cmp	r6, r3
 8006e2c:	ec55 4b10 	vmov	r4, r5, d0
 8006e30:	f200 80bc 	bhi.w	8006fac <atan+0x1fc>
 8006e34:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006e38:	429e      	cmp	r6, r3
 8006e3a:	f200 809e 	bhi.w	8006f7a <atan+0x1ca>
 8006e3e:	4622      	mov	r2, r4
 8006e40:	462b      	mov	r3, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	f7f9 fa29 	bl	800029c <__adddf3>
 8006e4a:	4b9e      	ldr	r3, [pc, #632]	@ (80070c4 <atan+0x314>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f7f9 fa23 	bl	8000298 <__aeabi_dsub>
 8006e52:	2200      	movs	r2, #0
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fa1c 	bl	800029c <__adddf3>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fcf6 	bl	800085c <__aeabi_ddiv>
 8006e70:	f04f 0a00 	mov.w	sl, #0
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	4622      	mov	r2, r4
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7f9 fbc2 	bl	8000608 <__aeabi_dmul>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4680      	mov	r8, r0
 8006e8a:	4689      	mov	r9, r1
 8006e8c:	f7f9 fbbc 	bl	8000608 <__aeabi_dmul>
 8006e90:	a371      	add	r3, pc, #452	@ (adr r3, 8007058 <atan+0x2a8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	4606      	mov	r6, r0
 8006e98:	460f      	mov	r7, r1
 8006e9a:	f7f9 fbb5 	bl	8000608 <__aeabi_dmul>
 8006e9e:	a370      	add	r3, pc, #448	@ (adr r3, 8007060 <atan+0x2b0>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 f9fa 	bl	800029c <__adddf3>
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	f7f9 fbac 	bl	8000608 <__aeabi_dmul>
 8006eb0:	a36d      	add	r3, pc, #436	@ (adr r3, 8007068 <atan+0x2b8>)
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f7f9 f9f1 	bl	800029c <__adddf3>
 8006eba:	4632      	mov	r2, r6
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	f7f9 fba3 	bl	8000608 <__aeabi_dmul>
 8006ec2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007070 <atan+0x2c0>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 f9e8 	bl	800029c <__adddf3>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	f7f9 fb9a 	bl	8000608 <__aeabi_dmul>
 8006ed4:	a368      	add	r3, pc, #416	@ (adr r3, 8007078 <atan+0x2c8>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f7f9 f9df 	bl	800029c <__adddf3>
 8006ede:	4632      	mov	r2, r6
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	f7f9 fb91 	bl	8000608 <__aeabi_dmul>
 8006ee6:	a366      	add	r3, pc, #408	@ (adr r3, 8007080 <atan+0x2d0>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 f9d6 	bl	800029c <__adddf3>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f7f9 fb88 	bl	8000608 <__aeabi_dmul>
 8006ef8:	a363      	add	r3, pc, #396	@ (adr r3, 8007088 <atan+0x2d8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	4680      	mov	r8, r0
 8006f00:	4689      	mov	r9, r1
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	f7f9 fb7f 	bl	8000608 <__aeabi_dmul>
 8006f0a:	a361      	add	r3, pc, #388	@ (adr r3, 8007090 <atan+0x2e0>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f9c2 	bl	8000298 <__aeabi_dsub>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	f7f9 fb76 	bl	8000608 <__aeabi_dmul>
 8006f1c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007098 <atan+0x2e8>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 f9b9 	bl	8000298 <__aeabi_dsub>
 8006f26:	4632      	mov	r2, r6
 8006f28:	463b      	mov	r3, r7
 8006f2a:	f7f9 fb6d 	bl	8000608 <__aeabi_dmul>
 8006f2e:	a35c      	add	r3, pc, #368	@ (adr r3, 80070a0 <atan+0x2f0>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 f9b0 	bl	8000298 <__aeabi_dsub>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	f7f9 fb64 	bl	8000608 <__aeabi_dmul>
 8006f40:	a359      	add	r3, pc, #356	@ (adr r3, 80070a8 <atan+0x2f8>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	f7f9 fb5b 	bl	8000608 <__aeabi_dmul>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 f99f 	bl	800029c <__adddf3>
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	f7f9 fb51 	bl	8000608 <__aeabi_dmul>
 8006f66:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	d148      	bne.n	8007002 <atan+0x252>
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f990 	bl	8000298 <__aeabi_dsub>
 8006f78:	e72f      	b.n	8006dda <atan+0x2a>
 8006f7a:	4b52      	ldr	r3, [pc, #328]	@ (80070c4 <atan+0x314>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 f989 	bl	8000298 <__aeabi_dsub>
 8006f86:	4b4f      	ldr	r3, [pc, #316]	@ (80070c4 <atan+0x314>)
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 f983 	bl	800029c <__adddf3>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	f7f9 fc5d 	bl	800085c <__aeabi_ddiv>
 8006fa2:	f04f 0a01 	mov.w	sl, #1
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	e765      	b.n	8006e78 <atan+0xc8>
 8006fac:	4b47      	ldr	r3, [pc, #284]	@ (80070cc <atan+0x31c>)
 8006fae:	429e      	cmp	r6, r3
 8006fb0:	d21c      	bcs.n	8006fec <atan+0x23c>
 8006fb2:	4b47      	ldr	r3, [pc, #284]	@ (80070d0 <atan+0x320>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 f96d 	bl	8000298 <__aeabi_dsub>
 8006fbe:	4b44      	ldr	r3, [pc, #272]	@ (80070d0 <atan+0x320>)
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fb1d 	bl	8000608 <__aeabi_dmul>
 8006fce:	4b3d      	ldr	r3, [pc, #244]	@ (80070c4 <atan+0x314>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7f9 f963 	bl	800029c <__adddf3>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 fc3d 	bl	800085c <__aeabi_ddiv>
 8006fe2:	f04f 0a02 	mov.w	sl, #2
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	460d      	mov	r5, r1
 8006fea:	e745      	b.n	8006e78 <atan+0xc8>
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	4938      	ldr	r1, [pc, #224]	@ (80070d4 <atan+0x324>)
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f7f9 fc32 	bl	800085c <__aeabi_ddiv>
 8006ff8:	f04f 0a03 	mov.w	sl, #3
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	e73a      	b.n	8006e78 <atan+0xc8>
 8007002:	4b35      	ldr	r3, [pc, #212]	@ (80070d8 <atan+0x328>)
 8007004:	4e35      	ldr	r6, [pc, #212]	@ (80070dc <atan+0x32c>)
 8007006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 f943 	bl	8000298 <__aeabi_dsub>
 8007012:	4622      	mov	r2, r4
 8007014:	462b      	mov	r3, r5
 8007016:	f7f9 f93f 	bl	8000298 <__aeabi_dsub>
 800701a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007026:	f7f9 f937 	bl	8000298 <__aeabi_dsub>
 800702a:	f1bb 0f00 	cmp.w	fp, #0
 800702e:	4604      	mov	r4, r0
 8007030:	460d      	mov	r5, r1
 8007032:	f6bf aedc 	bge.w	8006dee <atan+0x3e>
 8007036:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800703a:	461d      	mov	r5, r3
 800703c:	e6d7      	b.n	8006dee <atan+0x3e>
 800703e:	a51c      	add	r5, pc, #112	@ (adr r5, 80070b0 <atan+0x300>)
 8007040:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007044:	e6d3      	b.n	8006dee <atan+0x3e>
 8007046:	bf00      	nop
 8007048:	54442d18 	.word	0x54442d18
 800704c:	3ff921fb 	.word	0x3ff921fb
 8007050:	8800759c 	.word	0x8800759c
 8007054:	7e37e43c 	.word	0x7e37e43c
 8007058:	e322da11 	.word	0xe322da11
 800705c:	3f90ad3a 	.word	0x3f90ad3a
 8007060:	24760deb 	.word	0x24760deb
 8007064:	3fa97b4b 	.word	0x3fa97b4b
 8007068:	a0d03d51 	.word	0xa0d03d51
 800706c:	3fb10d66 	.word	0x3fb10d66
 8007070:	c54c206e 	.word	0xc54c206e
 8007074:	3fb745cd 	.word	0x3fb745cd
 8007078:	920083ff 	.word	0x920083ff
 800707c:	3fc24924 	.word	0x3fc24924
 8007080:	5555550d 	.word	0x5555550d
 8007084:	3fd55555 	.word	0x3fd55555
 8007088:	2c6a6c2f 	.word	0x2c6a6c2f
 800708c:	bfa2b444 	.word	0xbfa2b444
 8007090:	52defd9a 	.word	0x52defd9a
 8007094:	3fadde2d 	.word	0x3fadde2d
 8007098:	af749a6d 	.word	0xaf749a6d
 800709c:	3fb3b0f2 	.word	0x3fb3b0f2
 80070a0:	fe231671 	.word	0xfe231671
 80070a4:	3fbc71c6 	.word	0x3fbc71c6
 80070a8:	9998ebc4 	.word	0x9998ebc4
 80070ac:	3fc99999 	.word	0x3fc99999
 80070b0:	54442d18 	.word	0x54442d18
 80070b4:	bff921fb 	.word	0xbff921fb
 80070b8:	440fffff 	.word	0x440fffff
 80070bc:	7ff00000 	.word	0x7ff00000
 80070c0:	3fdbffff 	.word	0x3fdbffff
 80070c4:	3ff00000 	.word	0x3ff00000
 80070c8:	3ff2ffff 	.word	0x3ff2ffff
 80070cc:	40038000 	.word	0x40038000
 80070d0:	3ff80000 	.word	0x3ff80000
 80070d4:	bff00000 	.word	0xbff00000
 80070d8:	08007510 	.word	0x08007510
 80070dc:	08007530 	.word	0x08007530

080070e0 <fabs>:
 80070e0:	ec51 0b10 	vmov	r0, r1, d0
 80070e4:	4602      	mov	r2, r0
 80070e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070ea:	ec43 2b10 	vmov	d0, r2, r3
 80070ee:	4770      	bx	lr

080070f0 <_init>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr

080070fc <_fini>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr
